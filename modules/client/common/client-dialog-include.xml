<?xml version="1.0" encoding="UTF-8"?>
<cmd xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://www.censhare.com/xml/3.0.0/dialogs-schema.xsd"
    xmlns:corpus="http://www.censhare.com/xml/3.0.0/corpus"
    xmlns:new-val="http://www.censhare.com/xml/3.0.0/new-val"
    xmlns:new-fct="http://www.censhare.com/xml/3.0.0/new-fct"
    xmlns:xe="http://www.censhare.com/xml/3.0.0/xmleditor"
    xmlns:cs="http://www.censhare.com/xml/3.0.0/xpath-functions">

  <xml-info title="${client-dialogs-title}" description="${client-dialogs-description}" knowledge-level="2" special-licence="false" feature-help="" localize="true">
    <property-resources>
      <base url="file:module-custom"/>
      <base url="file:module"/>
      <base url="file:../../../common/global"/>
    </property-resources>
    <history>
      <entry user="Roelofsen, Roel" timestamp="2019-12-10T16:06:26.471Z" comment=""/>
    </history>
  </xml-info>
  <cmd-info name="client.common.dialog-include" enabled="true"/>
  <admin-info dialog-id="dialog-config" dialog-url="file:config-dialog.xml" preserve-original-formatting="true"/>

  <expressions>

    <expression id="example-formula-1" value="='&lt;html&gt;Test&lt;/html&gt;'"/>

    <expression id="example-formula-2">
      <value>='&lt;html&gt;Test&lt;/html&gt;'</value>
    </expression>

    <expression id="example-constant" value="A constant"/>

    <expression id="lookup-type-name" value="=cachelookup('asset_typedef','@asset_type','@type')@name"/>

    <!-- Description for asset queries -->
    <expression id="edit-query">
      <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:my="http://www.censhare.com/" version="2.0">
        <xsl:param name="system"/>
        <xsl:variable name="uiLocale" select="$system/system/@locale"/>

        <!-- Main -->
        <xsl:template match="/">
          <html>
            <xsl:call-template name="query">
              <xsl:with-param name="type" select="'and'"/>
              <xsl:with-param name="element" select="child::element()"/>
            </xsl:call-template>
          </html>
        </xsl:template>

        <!-- "and" or "or" -->
        <xsl:template match="and | or">
          <xsl:variable name="multipleConditions" select="count(*) > 1"/>
          <xsl:value-of select="if ($multipleConditions) then '(' else ''"/>
          <xsl:call-template name="query">
            <xsl:with-param name="type" select="node-name(.)"/>
            <xsl:with-param name="element" select="."/>
          </xsl:call-template>
          <xsl:value-of select="if ($multipleConditions) then ')' else ''"/>
        </xsl:template>

        <!-- "not" -->
        <xsl:template match="not">
          <xsl:variable name="multipleConditions" select="count(*) > 1"/>
          <xsl:text>${without-(lowercase)} </xsl:text>
          <xsl:value-of select="if ($multipleConditions) then '(' else ''"/>
          <xsl:call-template name="query">
            <xsl:with-param name="type" select="'and'"/>
            <xsl:with-param name="element" select="."/>
          </xsl:call-template>
          <xsl:value-of select="if ($multipleConditions) then ')' else ''"/>
        </xsl:template>

        <!-- Query -->
        <xsl:template name="query">
          <xsl:param name="type"/>
          <xsl:param name="element"/>
          <xsl:for-each select="$element/(condition | and | or | not)">
            <xsl:apply-templates select="."/>
            <xsl:if test="position() != last()">
              <xsl:value-of select="concat(' ', if ($type='and') then '${and-(lowercase)}' else '${or-(lowercase)}', ' ')"/>
            </xsl:if>
          </xsl:for-each>
        </xsl:template>

        <!-- Condition -->
        <xsl:template match="condition">
          <xsl:text>(</xsl:text>
          <xsl:variable name="feature" select="cs:cachelookup('feature', '@key', @name)"/>
          <xsl:variable name="type" select="$feature/@value_type"/>
          <xsl:variable name="isAdmin" select="$system/system/client/@type = 'javaadmin'"/>
          <!-- name of feature -->
          <xsl:value-of select="if ($isAdmin) then (cs:cachelookup('feature', '@key', @name)/@name${localized-attr-suffix}) else (cs:cachelookup('feature', '@key', @name)/@name)"/>
          <!-- op (if feature is a pair data type (data types 8, 9, 12, 14, 16, 18, 20, 22, 24, 26), then use 'includes') -->
          <xsl:value-of select="if (index-of((8, 9, 12, 14, 16, 18, 20, 22, 24, 26), $type)) then ' ${includes-(lowercase)} ' else if (@op) then concat(' ', @op, ' ') else ' = '"/>
          <!-- value -->
          <xsl:text>${quote-start}</xsl:text>
          <xsl:choose>
            <xsl:when test="$feature/@value_source">
              <xsl:choose>
                <xsl:when test="@name='censhare:function.workflow-step'">
                  <!-- special hack for workflow/workflow-step logical pair -->
                  <xsl:variable name="workflow" select="../condition[@name='censhare:asset.wf_id']/@value"/>
                  <xsl:variable name="tableElement" select="cs:cachelookup('workflow_step', '@wf_step', @value, '@wf_id', $workflow)"/>
                  <xsl:value-of select="if ($tableElement/@display_name) then $tableElement/@display_name else if ($isAdmin) then $tableElement/@name${localized-attr-suffix} else $tableElement/@name"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="tableName" select="substring-before($feature/@value_source, '@')"/>
                  <xsl:variable name="tableAttribute" select="concat('@', substring-after($feature/@value_source, '@'))"/>
                  <xsl:variable name="tableValue" select="if ($type='1') then tokenize(@value, '\*')[1] else @value"/>
                  <xsl:variable name="tableElement" select="cs:cachelookup($tableName, $tableAttribute, $tableValue)"/>
                  <xsl:value-of select="if ($tableElement/@display_name) then $tableElement/@display_name else if ($isAdmin) then $tableElement/@name${localized-attr-suffix} else $tableElement/@name"/>
                  <xsl:value-of select="if ($type='1' and ends-with(@value, '*')) then '*' else ''"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:choose>
                <!-- 0: No value -->
                <xsl:when test="$type='0'">
                  <xsl:value-of select="''"/>
                </xsl:when>
                <!-- 1: Hierarchical attribute (string) -->
                <xsl:when test="$type='1'">
                  <xsl:variable name="path" select="tokenize(@value, '\*')[1]"/>
                  <xsl:value-of select="concat('path=', $path, ', ')"/>
                  <xsl:value-of select="if ($isAdmin) then cs:cachelookup('feature_value', '@feature', @name, '@value_key', $path)/@name${localized-attr-suffix} else cs:cachelookup('feature_value', '@feature', @name, '@value_key', $path)/@name"/>
                  <xsl:value-of select="if (contains(@value, '*')) then '*' else ''"/>
                </xsl:when>
                <!-- 2: Enumeration (string) -->
                <xsl:when test="$type='2'">
                  <xsl:value-of select="if ($isAdmin) then cs:cachelookup('feature_value', '@feature', @name, '@value_key', @value)/@name${localized-attr-suffix} else cs:cachelookup('feature_value', '@feature', @name, '@value_key', @value)/@name"/>
                </xsl:when>
                <!-- 3: Integer (long) -->
                <xsl:when test="$type='3'">
                  <xsl:value-of select="string-join((cs:format-number(@value, '#,###'), my:getFeatureUnitString(.)), ' ')"/>
                </xsl:when>
                <!-- 4: String -->
                <xsl:when test="$type='4'">
                  <xsl:value-of select="@value"/>
                </xsl:when>
                <!-- 5: Timestamp -->
                <xsl:when test="$type='5'">
                  <xsl:value-of select="cs:format-date(@value, 'relative-short', 'short')"/>
                </xsl:when>
                <!-- 6: Boolean -->
                <xsl:when test="$type='6'">
                  <xsl:value-of select="if (@value='1') then '${yes}' else '${no}'"/>
                </xsl:when>
                <!-- 7: Double -->
                <xsl:when test="$type='7'">
                  <xsl:value-of select="string-join((cs:format-number(@value, '#,###.###'), my:getFeatureUnitString(.)), ' ')"/>
                </xsl:when>
                <!-- 8: Integer pair -->
                <xsl:when test="$type='8'">
                  <xsl:value-of select="string-join((cs:format-number(@value, '#,###'), my:getFeatureUnitString(.)), ' ')"/>
                </xsl:when>
                <!-- 9: Timestamp pair -->
                <xsl:when test="$type='9'">
                  <xsl:value-of select="cs:format-date(@value, 'relative-short', 'short')"/>
                </xsl:when>
                <!-- 10: Asset reference -->
                <xsl:when test="$type='10'">
                  <xsl:variable name="refAsset" select="cs:get-asset(@value_asset_id)"/>
                  <xsl:choose>
                    <xsl:when test="exists($refAsset)">
                      <xsl:value-of select="if ($refAsset/asset_feature[@feature='censhare:name' and @language=$uiLocale]) then $refAsset/asset_feature[@feature='censhare:name' and @language=$uiLocale]/@value_string else $refAsset/@name"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="concat('ID: ', @value_asset_id)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <!-- 11: XML -->
                <xsl:when test="$type='11'">
                  <xsl:value-of select="''"/>
                </xsl:when>
                <!-- 12: Double pair -->
                <xsl:when test="$type='12'">
                  <xsl:value-of select="string-join((cs:format-number(@value, '#,###.###'), my:getFeatureUnitString(.)), ' ')"/>
                </xsl:when>
                <!-- 13: Date -->
                <xsl:when test="$type='13'">
                  <xsl:value-of select="cs:format-date(xs:dateTime(concat(substring(@value, 1, 10), 'T00:00:00')), 'relative-short', 'none')"/>
                </xsl:when>
                <!-- 14: Date pair -->
                <xsl:when test="$type='14'">
                  <xsl:value-of select="cs:format-date(xs:dateTime(concat(substring(@value, 1, 10), 'T00:00:00')), 'relative-short', 'none')"/>
                </xsl:when>
                <!-- 15: Time -->
                <xsl:when test="$type='15'">
                  <xsl:value-of select="cs:format-date(xs:dateTime(concat('1970-01-01T', @value)), 'none', 'short')"/>
                </xsl:when>
                <!-- 16: Time pair -->
                <xsl:when test="$type='16'">
                  <xsl:value-of select="cs:format-date(xs:dateTime(concat('1970-01-01T', @value)), 'none', 'short')"/>
                </xsl:when>
                <!-- 17: Year -->
                <xsl:when test="$type='17'">
                  <xsl:value-of select="cs:format-number(number(@value), '#')"/>
                </xsl:when>
                <!-- 18: Year pair -->
                <xsl:when test="$type='18'">
                  <xsl:value-of select="cs:format-number(number(@value), '#')"/>
                </xsl:when>
                <!-- 19: Year/month -->
                <xsl:when test="$type='19'">
                  <xsl:value-of select="concat(my:getMonthName(number(substring(@value, 6, 2))), ' ', cs:format-number(number(substring(@value, 1, 4)), '#'))"/>
                </xsl:when>
                <!-- 20: Year/month pair -->
                <xsl:when test="$type='20'">
                  <xsl:value-of select="concat(my:getMonthName(number(substring(@value, 6, 2))), ' ', cs:format-number(number(substring(@value, 1, 4)), '#'))"/>
                </xsl:when>
                <!-- 21: Month -->
                <xsl:when test="$type='21'">
                  <xsl:value-of select="my:getMonthName(number(substring(@value, 3, 2)))"/>
                </xsl:when>
                <!-- 22: Month pair -->
                <xsl:when test="$type='22'">
                  <xsl:value-of select="my:getMonthName(number(substring(@value, 3, 2)))"/>
                </xsl:when>
                <!-- 23: Month/day -->
                <xsl:when test="$type='23'">
                  <xsl:value-of select="concat(cs:format-number(number(substring(@value, 6, 2)), '#'), '. ', my:getMonthName(number(substring(@value, 3, 2))))"/>
                </xsl:when>
                <!-- 24: Month/day pair -->
                <xsl:when test="$type='24'">
                  <xsl:value-of select="concat(cs:format-number(number(substring(@value, 6, 2)), '#'), '. ', my:getMonthName(number(substring(@value, 3, 2))))"/>
                </xsl:when>
                <!-- 25: Day -->
                <xsl:when test="$type='25'">
                  <xsl:value-of select="concat(cs:format-number(number(substring(@value, 4, 2)), '#'), '.')"/>
                </xsl:when>
                <!-- 26: Day pair -->
                <xsl:when test="$type='26'">
                  <xsl:value-of select="concat(cs:format-number(number(substring(@value, 4, 2)), '#'), '.')"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="@value"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:text>${quote-end})</xsl:text>
        </xsl:template>

        <!-- Get localized value of given feature element -->
        <xsl:function name="my:getFeatureUnitString" as="xs:string">
          <xsl:param name="condition" as="element(condition)"/>
          <xsl:value-of select="if ($condition/@value-unit) then cs:cachelookup('unit_set_rel', '@unit', $condition/@value-unit)/@unit else ()"/>
        </xsl:function>

        <!-- Get localized name of given month (integer) -->
        <xsl:function name="my:getMonthName" as="xs:string">
          <xsl:param name="month" as="xs:integer"/>
          <xsl:choose>
            <xsl:when test="$month=1">${january}</xsl:when>
            <xsl:when test="$month=2">${february}</xsl:when>
            <xsl:when test="$month=3">${march}</xsl:when>
            <xsl:when test="$month=4">${april}</xsl:when>
            <xsl:when test="$month=5">${may}</xsl:when>
            <xsl:when test="$month=6">${june}</xsl:when>
            <xsl:when test="$month=7">${july}</xsl:when>
            <xsl:when test="$month=8">${august}</xsl:when>
            <xsl:when test="$month=9">${september}</xsl:when>
            <xsl:when test="$month=10">${october}</xsl:when>
            <xsl:when test="$month=11">${november}</xsl:when>
            <xsl:when test="$month=12">${december}</xsl:when>
          </xsl:choose>
        </xsl:function>

      </xsl:stylesheet>
    </expression>

    <!-- Description for assetref widget -->
    <expression id="asset-ref">
      <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0">
        <xsl:param name="system"/>
        <xsl:variable name="assetCount" select="count(asset)"/>

        <xsl:template match="/">
          <xsl:if test="$assetCount = 1">
            <html>
              <xsl:variable name="thumbnailStorage" select="asset[1]/storage_item[@key='thumbnail'][1]"/>
              <xsl:choose>
                <!-- view asset thumbnail -->
                <xsl:when test="$thumbnailStorage">
                  <img>
                    <xsl:attribute name="src" select="concat($system/system/@censhare-url-prefix, 'assets/asset/id/', $thumbnailStorage/@asset_id, '/element/actual/', $thumbnailStorage/@element_idx, '/storage/', $thumbnailStorage/@key, '/file/', tokenize($thumbnailStorage/@relpath,'/')[last()])"/>
                  </img>
                </xsl:when>
                <!-- view asset icon -->
                <xsl:otherwise>
                  <img>
                    <xsl:attribute name="src" select="concat($system/system/@censhare-url-prefix, 'assets/asset/id/', asset/@id, '/icon/iconset/default/minsize/128/file')"/>
                  </img>
                </xsl:otherwise>
              </xsl:choose>
            </html>
          </xsl:if>
        </xsl:template>
      </xsl:stylesheet>
    </expression>

    <!-- Description for assetref widget -->
    <expression id="asset-ref-preview">
      <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0">
        <xsl:param name="system"/>
        <xsl:variable name="assetCount" select="count(asset)"/>

        <xsl:template match="/">
          <xsl:if test="$assetCount = 1">
            <html>
              <xsl:variable name="thumbnailStorage" select="asset[1]/storage_item[@key='thumbnail'][1]"/>
              <xsl:choose>
                <!-- view asset thumbnail -->
                <xsl:when test="$thumbnailStorage">
                  <img>
                    <xsl:attribute name="src" select="concat($system/system/@censhare-url-prefix, 'assets/asset/id/', $thumbnailStorage/@asset_id, '/element/actual/', $thumbnailStorage/@element_idx, '/storage/', $thumbnailStorage/@key, '/file/', tokenize($thumbnailStorage/@relpath,'/')[last()])"/>
                  </img>
                </xsl:when>
                <!-- view asset icon -->
                <xsl:otherwise>
                  <img>
                    <xsl:attribute name="src" select="concat($system/system/@censhare-url-prefix, 'assets/asset/id/', asset/@id, '/icon/iconset/default/minsize/128/file')"/>
                  </img>
                </xsl:otherwise>
              </xsl:choose>
            </html>
          </xsl:if>
        </xsl:template>
      </xsl:stylesheet>
    </expression>

    <!-- Description for assetref widget, size 150x150 pixels-->
    <expression id="asset-ref-preview-150x150">
      <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0">
        <xsl:param name="system"/>
        <xsl:variable name="assetCount" select="count(asset)"/>

        <xsl:template match="/">
          <xsl:if test="$assetCount = 1">
            <html>
              <xsl:variable name="thumbnailStorage" select="asset[1]/storage_item[@key='thumbnail'][1]"/>
              <xsl:choose>
                <xsl:when test="$thumbnailStorage">
                  <img>
                    <xsl:variable name="maxPreviewWidth" select="150"/>
                    <xsl:variable name="maxPreviewHeight" select="150"/>
                    <xsl:variable name="imageFactor" select="if (number($thumbnailStorage/@width_px) > number($thumbnailStorage/@height_px)) then ($maxPreviewWidth div $thumbnailStorage/@width_px) else ($maxPreviewHeight div $thumbnailStorage/@height_px)"/>
                    <xsl:attribute name="width" select="round($thumbnailStorage/@width_px * $imageFactor)"/>
                    <xsl:attribute name="height" select="round($thumbnailStorage/@height_px * $imageFactor)"/>
                    <xsl:attribute name="src" select="concat($system/system/@censhare-url-prefix, 'assets/asset/id/', $thumbnailStorage/@asset_id, '/element/actual/', $thumbnailStorage/@element_idx, '/storage/', $thumbnailStorage/@key, '/file/', tokenize($thumbnailStorage/@relpath,'/')[last()])"/>
                  </img>
                </xsl:when>
                <xsl:otherwise>
                  <img>
                    <xsl:attribute name="src" select="concat($system/system/@censhare-url-prefix, 'assets/asset/id/', asset/@id, '/icon/iconset/default/minsize/128/file')"/>
                  </img>
                </xsl:otherwise>
              </xsl:choose>
            </html>
          </xsl:if>
        </xsl:template>
      </xsl:stylesheet>
    </expression>

    <!-- Description for assetref widget in a list view (height of assetref widget should have height="40px") -->
    <expression id="asset-ref-list">
      <xsl:stylesheet version="2.0"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:my="http://www.censhare.com/my">

        <xsl:param name="system"/>
        <xsl:param name="control"/>
        <xsl:variable name="urlPrefix" select="$system/system/@censhare-url-prefix"/>
        <xsl:variable name="lafBackground" select="if ($system) then $system/system/laf/@background else 'dark'"/>
        <xsl:variable name="lafIconset" select="if ($system) then $system/system/laf/@icon-set else 'default'"/>
        <xsl:variable name="maxAssetPreviewSize" select="if ($control/control/@height) then ($control/control/@height) else 40"/>
        <xsl:variable name="assetCount" select="count(asset)"/>

        <xsl:template match="/">
          <xsl:if test="$assetCount = 1">
            <html>
              <table cellpadding="0" valign="top" class="asset-ref-table">
                <tr valign="top">
                  <xsl:variable name="thumbnailStorage" select="asset[1]/storage_item[@key='thumbnail'][1]"/>
                  <xsl:choose>
                    <xsl:when test="$thumbnailStorage">
                      <td width="40px">
                        <xsl:variable name="imageFactor" select="if (number($thumbnailStorage/@width_px) > number($thumbnailStorage/@height_px)) then (($maxAssetPreviewSize - 5) div $thumbnailStorage/@width_px) else (($maxAssetPreviewSize - 5) div $thumbnailStorage/@height_px)"/>
                        <xsl:copy-of select="my:getImageWithShadowElement($thumbnailStorage, $imageFactor, 0.5)"/>
                      </td>
                    </xsl:when>
                    <xsl:otherwise>
                      <td width="40px">
                        <img hspace="1" vspace="2">
                          <xsl:attribute name="src" select="concat($system/system/@censhare-url-prefix, 'assets/asset/id/', asset/@id, '/icon/iconset/default/minsize/128/file')"/>
                          <xsl:attribute name="width" select="$maxAssetPreviewSize"/>
                          <xsl:attribute name="height" select="$maxAssetPreviewSize"/>
                        </img>
                      </td>
                    </xsl:otherwise>
                  </xsl:choose>
                  <td>
                    <xsl:variable name="assetType" select="asset[1]/@type"/>
                    <xsl:variable name="address" select="asset[1]/asset_feature[@feature='censhare:address'][1]"/>
                    <span class="asset-info-bold"><xsl:value-of select="asset[1]/@name"/></span>
                    <xsl:choose>
                      <!-- Person -->
                      <xsl:when test="starts-with($assetType, 'person.')">
                        <xsl:variable name="personalData" select="$address/asset_feature[@feature='censhare:address.personal-data']"/>
                        <xsl:variable name="function" select="$personalData/asset_feature[@feature='censhare:address.function']"/>
                        <span class="asset-info-label-inline"><xsl:value-of select="concat(' – ', if ($function) then ($function/@value_string) else (cs:cachelookup('asset_typedef', '@asset_type', $assetType)/@name))"/></span>
                        <br/>
                        <!-- Company -->
                        <xsl:variable name="companys" select="if (asset[1]/parent_asset_rel[@key='user.employee.']) then asset[1]/cs:parent-rel()[@key='user.employee.']/cs:asset()[@censhare:asset.type='address.'] else ()"/>
                        <xsl:if test="$companys">
                          <span class="asset-info-label"><xsl:value-of select="'${company}: '"/></span>
                          <span class="asset-info-value"><xsl:value-of select="$companys[1]/@name"/></span>
                          <br/>
                        </xsl:if>
                        <!-- E-Mail -->
                        <xsl:variable name="email" select="$address/asset_feature[@feature='censhare:address.com-email-type' and @value_key='work']/asset_feature[@feature='censhare:address.uri-mailto']/@value_string"/>
                        <xsl:if test="$email">
                          <span class="asset-info-label"><xsl:value-of select="'${e-mail}: '"/></span>
                          <a class="asset-info-link">
                            <xsl:attribute name="href" select="concat('mailto:', $email)"/>
                            <xsl:value-of select="$email"/>
                          </a>
                          <xsl:text> </xsl:text>
                        </xsl:if>
                        <!-- Phone -->
                        <xsl:variable name="workPhone" select="$address/asset_feature[@feature='censhare:address.com-tel-type' and @value_key='work']/asset_feature[@feature='censhare:address.uri-tel']/@value_string"/>
                        <xsl:if test="$workPhone">
                          <span class="asset-info-label"><xsl:value-of select="'${phone}: '"/></span>
                          <span class="asset-info-value"><xsl:value-of select="$workPhone"/></span>
                          <xsl:text> </xsl:text>
                        </xsl:if>
                        <!-- Mobile phone -->
                        <xsl:variable name="mobilePhone" select="$address/asset_feature[@feature='censhare:address.com-tel-type' and @value_key='cell']/asset_feature[@feature='censhare:address.uri-tel']/@value_string"/>
                        <xsl:if test="$mobilePhone">
                          <span class="asset-info-label"><xsl:value-of select="'${mobile-phone}: '"/></span>
                          <span class="asset-info-value"><xsl:value-of select="$mobilePhone"/></span>
                          <xsl:text> </xsl:text>
                        </xsl:if>
                      </xsl:when>
                      <!-- Company -->
                      <xsl:when test="starts-with($assetType, 'address.')">
                        <span class="asset-info-label-inline"><xsl:value-of select="concat(' – ', cs:cachelookup('asset_typedef', '@asset_type', $assetType)/@name)"/></span>
                        <br/>
                        <!-- Address -->
                        <xsl:variable name="workAddress" select="$address/asset_feature[@feature='censhare:address.type']"/>
                        <xsl:variable name="street" select="$workAddress/asset_feature[@feature='censhare:address.street']/@value_string"/>
                        <xsl:variable name="zip" select="$workAddress/asset_feature[@feature='censhare:address.zip-code']/@value_string"/>
                        <xsl:variable name="city" select="$workAddress/asset_feature[@feature='censhare:address.city']/@value_string"/>
                        <xsl:variable name="country" select="cs:cachelookup('feature_value', '@feature', 'censhare:address.country-code', '@value_key', $workAddress/asset_feature[@feature='censhare:address.country-code']/@value_key)/@name"/>
                        <xsl:if test="$street or $zip or $city or $country">
                          <span class="asset-info-label"><xsl:value-of select="'${address}: '"/></span>
                          <span class="asset-info-value"><xsl:value-of select="string-join(($street, string-join(($zip, $city), ' '), $country), ', ')"/></span>
                          <xsl:text> </xsl:text>
                        </xsl:if>
                        <!-- Homepage -->
                        <xsl:variable name="uri" select="$address/asset_feature[@feature='censhare:address.com-other-type' and @value_key='website']/asset_feature[@feature='censhare:address.uri-generic']/@value_string"/>
                        <xsl:if test="$uri">
                          <span class="asset-info-label"><xsl:value-of select="'${homepage}: '"/></span>
                          <a class="asset-info-link" target="_blank">
                            <xsl:attribute name="href" select="concat(if (starts-with($uri, 'http')) then '' else 'http://', $uri)"/>
                            <xsl:value-of select="$uri"/>
                          </a>
                        </xsl:if>
                      </xsl:when>
                      <!-- Issue or layout -->
                      <xsl:when test="starts-with($assetType, 'issue.') or starts-with($assetType, 'layout.')">
                        <span class="asset-info-label-inline"><xsl:value-of select="concat(' – ', cs:cachelookup('asset_typedef', '@asset_type', $assetType)/@name)"/></span>
                        <br/>
                        <xsl:variable name="rootTargetElement" select="asset[1]/asset_element[@key='target.' and not(@parent_idx)]"/>
                        <xsl:variable name="childTargetElements" select="asset[1]/asset_element[@key='target.' and @parent_idx = $rootTargetElement/@idx]"/>
                        <xsl:variable name="rootActualElement" select="asset[1]/asset_element[@key='actual.' and not(@parent_idx)]"/>
                        <xsl:if test="$childTargetElements or $rootActualElement">
                          <span class="asset-info-label">${pages}: </span>
                          <span class="asset-info-value">
                            <xsl:if test="$rootActualElement">
                              <xsl:variable name="childActualElements" select="asset[1]/asset_element[@key='actual.' and @parent_idx = $rootActualElement/@idx]"/>
                              <xsl:variable name="actualElements" select="if ($childActualElements) then $childActualElements else $rootActualElement"/>
                              <xsl:variable name="countActualElements" select="count($actualElements)"/>
                              <xsl:value-of select="if ($countActualElements = 1) then '1 ${page}' else concat($countActualElements, ' ${pages}')"/>
                            </xsl:if>
                            <xsl:if test="$childTargetElements">
                              <xsl:variable name="countTargetElements" select="count($childTargetElements)"/>
                              <xsl:value-of select="concat(if ($rootActualElement) then ', ' else '', if ($countTargetElements = 1) then '1 ${planned-page}' else concat($countTargetElements, ' ${planned-pages}'))"/>
                            </xsl:if>
                          </span>
                        </xsl:if>
                      </xsl:when>
                      <!-- Others -->
                      <xsl:otherwise>
                        <span class="asset-info-label-inline"><xsl:value-of select="concat(' – ', cs:cachelookup('asset_typedef', '@asset_type', $assetType)/@name)"/></span>
                        <br/>
                        <xsl:variable name="masterFile" select="asset[1]/storage_item[@key='master']"/>
                        <xsl:if test="$masterFile">
                          <span class="asset-info-label">${file}: </span>
                          <span class="asset-info-value">
                            <xsl:for-each select="$masterFile">
                              <xsl:value-of select="cs:cachelookup('mimetype', '@mimetype', @mimetype)/@name"/>
                              <xsl:value-of select="if (@mimetype = 'application/indesign' and @app_version) then (for $x in @app_version return (substring-after(cs:master-data('indesign_version')[app_versions/app_version/@version=$x and @edition='standard']/applications/indesign/@name, 'Adobe InDesign'))) else ''"/>
                              <xsl:value-of select="if (@filelength>0) then concat(', ', cs:format-number((@filelength + 52429) div 1048576, '#,##0.0 MB')) else ''"/>
                              <xsl:variable name="elementIDx" select="@element_idx"/>
                              <xsl:variable name="assetElement" select="../asset_element[@idx=$elementIDx and @key='actual.']"/>
                              <xsl:value-of select="if ($assetElement/@width_mm and $assetElement/@height_mm) then concat(', ', cs:format-number($assetElement/@width_mm, '#,##0.0'), 'x', cs:format-number($assetElement/@height_mm, '#,##0.0'), ' mm') else ''"/>
                              <xsl:value-of select="if (@width_px and @height_px) then concat(', ', cs:format-number(@width_px, '#,###'), 'x', cs:format-number(@height_px, '#,###'), ' ${pixels}') else ''"/>
                              <xsl:value-of select="if (@dpi) then concat(', ', cs:format-number(@dpi, '#,###'), ' ${dpi}') else ''"/>
                              <xsl:value-of select="if (@color) then concat(', ', for $x in @color return if ($x='bw') then '${bitmap}' else if ($x='gs') then '${grey}' else if ($x='idx') then '${indexed}' else if ($x='rgb') then '${rgb}' else if ($x='lab') then '${lab}' else if ($x='cmyk') then '${cmyk}' else '$x') else ''"/>
                              <xsl:value-of select="if (@charcount) then concat(', ', cs:format-number(@charcount, '#,###'), ' ${chars}') else ''"/>
                              <xsl:value-of select="if (@wordcount) then concat(', ', cs:format-number(@wordcount, '#,###'), ' ${words}') else ''"/>
                              <xsl:value-of select="if (@linecount) then concat(', ', cs:format-number(@linecount, '#,###'), ' ${lines}') else ''"/>
                            </xsl:for-each>
                          </span>
                        </xsl:if>
                      </xsl:otherwise>
                    </xsl:choose>
                  </td>
                </tr>
              </table>
            </html>
          </xsl:if>
        </xsl:template>

        <!-- Get image with shadow element -->
        <xsl:function name="my:getImageWithShadowElement">
          <xsl:param name="imageStorage"/>
          <xsl:param name="drawFactor"/>
          <xsl:param name="shadowDrawFactor"/>
          <xsl:variable name="imageWidth" select="round($imageStorage/@width_px * $drawFactor)"/>
          <xsl:variable name="imageHeight" select="round($imageStorage/@height_px * $drawFactor)"/>
          <table cellpadding="0" valign="top">
            <tr>
              <td align="right"><xsl:copy-of select="my:getIconImage('shadow-top-left', round(5 * $shadowDrawFactor), round(2 * $shadowDrawFactor))"/></td>
              <td><xsl:copy-of select="my:getIconImage('shadow-top', $imageWidth, round(2 * $shadowDrawFactor))"/></td>
              <td><xsl:copy-of select="my:getIconImage('shadow-top-right', round(5 * $shadowDrawFactor), round(2 * $shadowDrawFactor))"/></td>
            </tr>
            <tr>
              <td align="right"><xsl:copy-of select="my:getIconImage('shadow-left', round(5 * $shadowDrawFactor), $imageHeight)"/></td>
              <td>
                <img>
                  <xsl:attribute name="src" select="concat($urlPrefix, 'assets/asset/id/', $imageStorage/@asset_id, '/element/actual/', $imageStorage/@element_idx, '/storage/preview/file/', tokenize($imageStorage/@relpath,'/')[last()])"/>
                  <xsl:attribute name="width" select="$imageWidth"/>
                  <xsl:attribute name="height" select="$imageHeight"/>
                </img>
              </td>
              <td><xsl:copy-of select="my:getIconImage('shadow-right', round(5 * $shadowDrawFactor), $imageHeight)"/></td>
            </tr>
            <tr>
              <td align="right"><xsl:copy-of select="my:getIconImage('shadow-bottom-left', round(5 * $shadowDrawFactor), round(8 * $shadowDrawFactor))"/></td>
              <td><xsl:copy-of select="my:getIconImage('shadow-bottom', $imageWidth, round(8 * $shadowDrawFactor))"/></td>
              <td><xsl:copy-of select="my:getIconImage('shadow-bottom-right', round(5 * $shadowDrawFactor), round(8 * $shadowDrawFactor))"/></td>
            </tr>
          </table>
        </xsl:function>

        <!-- Get icon image of given key -->
        <xsl:function name="my:getIconImage">
          <xsl:param name="key"/>
          <xsl:param name="width"/>
          <xsl:param name="height"/>
          <img>
            <xsl:attribute name="src" select="concat($urlPrefix, 'resources/icon/', $key, '/iconset/', $lafIconset, '/background/', $lafBackground, '/file')"/>
            <xsl:if test="$width">
              <xsl:attribute name="width" select="$width"/>
            </xsl:if>
            <xsl:if test="$height">
              <xsl:attribute name="height" select="$height"/>
            </xsl:if>
          </img>
        </xsl:function>

      </xsl:stylesheet>
    </expression>

    <!-- Description for assetref widget in a list view with info about state (height of assetref widget should have height="100px") -->
    <expression id="asset-ref-list-state">
      <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:my="http://www.censhare.com/my">
        <xsl:param name="system"/>
        <xsl:param name="control"/>
        <xsl:variable name="urlPrefix" select="$system/system/@censhare-url-prefix"/>
        <xsl:variable name="lafBackground" select="$system/system/laf/@background"/>
        <xsl:variable name="lafIconset" select="$system/system/laf/@icon-set"/>
        <xsl:variable name="maxAssetPreviewHeight" select="if ($control/control/@height) then ($control/control/@height) else 160"/>
        <xsl:variable name="maxAssetPreviewWidth" select="100"/>
        <xsl:variable name="assetCount" select="count(asset)"/>

        <xsl:template match="/">
          <xsl:if test="$assetCount = 1">
            <html>
              <table cellpadding="0" valign="top" class="asset-ref-table">
                <tr valign="top">
                  <td width="{$maxAssetPreviewWidth - 10}px">
                    <xsl:variable name="thumbnailStorage" select="my:getThumbnailStorage(asset[1])"/>
                    <xsl:choose>
                      <xsl:when test="$thumbnailStorage">
                        <xsl:variable name="scaleFactor" select="min((($maxAssetPreviewWidth - 10) div $thumbnailStorage/@width_px, ($maxAssetPreviewHeight - 10) div $thumbnailStorage/@height_px))"/>
                        <xsl:copy-of select="my:getImageWithShadowElement($thumbnailStorage, $scaleFactor, 1.0)"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <img hspace="1" vspace="2">
                          <xsl:attribute name="src" select="concat($system/system/@censhare-url-prefix, 'assets/asset/id/', asset/@id, '/icon/iconset/default/minsize/128/file')"/>
                          <xsl:attribute name="width" select="$maxAssetPreviewWidth"/>
                          <xsl:attribute name="height" select="$maxAssetPreviewWidth"/>
                        </img>
                      </xsl:otherwise>
                    </xsl:choose>
                  </td>
                  <td>
                    <table cellpadding="0">
                      <tr>
                        <td>
                          <xsl:value-of select="asset[1]/@name"/>
                        </td>
                      </tr>
                      <tr>
                        <td height="120" valign="bottom">
                          <xsl:variable name="finishedStates" select="(2)"/>
                          <xsl:variable name="childAssets" select="asset[1]/cs:child-rel()[@key='target.']"/>
                          <xsl:variable name="childAssetWorkflowStates" select="for $x in $childAssets return cs:cachelookup('workflow_step', '@wf_id', $x/@wf_id, '@wf_step', $x/@wf_step)/@wf_state_id"/>
                          <xsl:choose>
                            <xsl:when test="$childAssetWorkflowStates">
                              <xsl:variable name="countFinished" select="count($childAssetWorkflowStates[.=$finishedStates])"/>
                              <span style="font-size:xx-large;font-weight:bold;font-family:Arial"><xsl:value-of select="concat(($countFinished * 100) div count($childAssetWorkflowStates), '%')"/></span>
                              <table width="100" cellpadding="0">
                                <tr>
                                  <xsl:for-each select="cs:cachelookup('workflow_state')/workflow_state">
                                    <xsl:sort order="ascending" select="@id"/>
                                    <xsl:variable name="workflowStateID" select="@id"/>
                                    <xsl:variable name="countState" select="count($childAssetWorkflowStates[.=$workflowStateID])"/>
                                    <xsl:variable name="percentState" select="($countState * 100) div count($childAssetWorkflowStates)"/>
                                    <td bgcolor="#{my:integerToHex(@color)}" width="{$percentState}%">
                                  </td>
                                  </xsl:for-each>
                                </tr>
                              </table>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'${no-state}'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </td>
                      </tr>
                    </table>
                  </td>
                </tr>
              </table>
            </html>
          </xsl:if>
        </xsl:template>

        <!-- get hex string of given integer -->
        <xsl:function name="my:integerToHex" as="xs:string">
          <xsl:param name="in" as="xs:integer"/>
          <xsl:sequence select="if ($in eq 0) then '0' else concat(if ($in gt 16) then my:integerToHex($in idiv 16) else '', substring('0123456789ABCDEF', ($in mod 16) + 1, 1))"/>
        </xsl:function>

        <!-- get thumbnail storage -->
        <xsl:function name="my:getThumbnailStorage" as="element(storage_item)?">
          <xsl:param name="asset" as="element(asset)"/>
          <xsl:variable name="storage" select="$asset/storage_item[@key='thumbnail'][1]"/>
          <xsl:choose>
            <xsl:when test="$storage">
              <xsl:copy-of select="$storage"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="pageElements" select="my:getPageAssetElements($asset, 'target.')"/>
              <xsl:if test="$pageElements">
                <xsl:copy-of select="my:getPreviewStorageOfAssetElement($asset, $pageElements[1], 'thumbnail')"/>
              </xsl:if>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:function>

        <!-- get page asset elements of given asset and element type -->
        <xsl:function name="my:getPageAssetElements" as="element(asset_element)*">
          <xsl:param name="asset" as="element(asset)"/>
          <xsl:param name="elementType" as="xs:string"/>
          <xsl:variable name="rootElement" select="$asset/asset_element[@key=$elementType and not(@parent_idx)]"/>
          <xsl:if test="$rootElement">
            <xsl:variable name="firstChildElement" select="for $x in $asset/asset_element[@parent_idx='0' and @key=$elementType] return if ($asset/asset_element[@next_idx=$x/@idx and @key=$elementType]) then () else $x"/>
            <xsl:choose>
              <xsl:when test="$firstChildElement">
                <xsl:copy-of select="$firstChildElement"/>
                <xsl:copy-of select="my:getNextAssetElements($asset, $firstChildElement)"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="$elementType='actual.' and $asset/storage_item">
                  <xsl:copy-of select="$rootElement"/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:if>
        </xsl:function>

        <!-- get recursivly next asset element of given asset element of given asset -->
        <xsl:function name="my:getNextAssetElements">
          <xsl:param name="asset" as="element(asset)"/>
          <xsl:param name="assetElement" as="element(asset_element)"/>
          <xsl:if test="$assetElement/@next_idx">
            <xsl:variable name="nextElement" select="$asset/asset_element[@idx=$assetElement/@next_idx and @key=$assetElement/@key]"/>
            <xsl:if test="$nextElement">
              <xsl:copy-of select="$nextElement"/>
              <xsl:copy-of select="my:getNextAssetElements($asset, $nextElement)"/>
            </xsl:if>
          </xsl:if>
        </xsl:function>

        <!-- get preview storage of given asset element of given asset of given storage key -->
        <xsl:function name="my:getPreviewStorageOfAssetElement" as="element(storage_item)?">
          <xsl:param name="asset" as="element(asset)"/>
          <xsl:param name="assetElement" as="element(asset_element)"/>
          <xsl:param name="storageKey" as="xs:string"/>
          <xsl:variable name="actualAssetElement" select="if ($assetElement/@key='target.') then $asset/asset_element[@key='actual.' and @target_idx=$assetElement/@idx] else $assetElement"/>
          <xsl:choose>
            <xsl:when test="$actualAssetElement">
              <!-- actual asset element of same asset exists - search for storage item -->
              <xsl:variable name="storageItem" select="$asset/storage_item[@element_idx=$actualAssetElement/@idx and @key=$storageKey][1]"/>
              <xsl:if test="$storageItem">
                <xsl:copy-of select="$storageItem"/>
              </xsl:if>
            </xsl:when>
            <xsl:otherwise>
              <!-- no actual asset element of same asset exists - search for placed asset -->
              <xsl:variable name="childElementRel" select="$asset/child_asset_element_rel[@key='target.' and @parent_idx=$assetElement/@idx]"/>
              <xsl:if test="$childElementRel">
                <xsl:variable name="childAsset" select="cs:get-asset($childElementRel/@child_asset)"/>
                <xsl:if test="$childAsset">
                  <xsl:variable name="targetChildAssetElement" select="$childAsset/asset_element[@key='target.' and @idx=$childElementRel/@child_idx]"/>
                  <xsl:variable name="actualChildAssetElement" select="$childAsset/asset_element[@key='actual.' and @target_idx=$targetChildAssetElement/@idx]"/>
                  <xsl:variable name="storageItem" select="$childAsset/storage_item[@element_idx=$actualChildAssetElement/@idx and @key=$storageKey][1]"/>
                  <xsl:if test="$storageItem">
                    <xsl:copy-of select="$storageItem"/>
                  </xsl:if>
                </xsl:if>
              </xsl:if>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:function>

        <!-- Get image with shadow element -->
        <xsl:function name="my:getImageWithShadowElement">
          <xsl:param name="imageStorage"/>
          <xsl:param name="drawFactor"/>
          <xsl:param name="shadowDrawFactor"/>
          <xsl:variable name="imageWidth" select="round($imageStorage/@width_px * $drawFactor)"/>
          <xsl:variable name="imageHeight" select="round($imageStorage/@height_px * $drawFactor)"/>
          <table cellpadding="0" valign="top">
            <tr>
              <td align="right"><xsl:copy-of select="my:getIconImage('shadow-top-left', round(5 * $shadowDrawFactor), round(2 * $shadowDrawFactor))"/></td>
              <td><xsl:copy-of select="my:getIconImage('shadow-top', $imageWidth, round(2 * $shadowDrawFactor))"/></td>
              <td><xsl:copy-of select="my:getIconImage('shadow-top-right', round(5 * $shadowDrawFactor), round(2 * $shadowDrawFactor))"/></td>
            </tr>
            <tr>
              <td align="right"><xsl:copy-of select="my:getIconImage('shadow-left', round(5 * $shadowDrawFactor), $imageHeight)"/></td>
              <td>
                <img>
                  <xsl:attribute name="src" select="concat($urlPrefix, 'assets/asset/id/', $imageStorage/@asset_id, '/element/actual/', $imageStorage/@element_idx, '/storage/preview/file/', tokenize($imageStorage/@relpath,'/')[last()])"/>
                  <xsl:attribute name="width" select="$imageWidth"/>
                  <xsl:attribute name="height" select="$imageHeight"/>
                </img>
              </td>
              <td><xsl:copy-of select="my:getIconImage('shadow-right', round(5 * $shadowDrawFactor), $imageHeight)"/></td>
            </tr>
            <tr>
              <td align="right"><xsl:copy-of select="my:getIconImage('shadow-bottom-left', round(5 * $shadowDrawFactor), round(8 * $shadowDrawFactor))"/></td>
              <td><xsl:copy-of select="my:getIconImage('shadow-bottom', $imageWidth, round(8 * $shadowDrawFactor))"/></td>
              <td><xsl:copy-of select="my:getIconImage('shadow-bottom-right', round(5 * $shadowDrawFactor), round(8 * $shadowDrawFactor))"/></td>
            </tr>
          </table>
        </xsl:function>

       <!-- Get icon image of given key -->
        <xsl:function name="my:getIconImage">
          <xsl:param name="key"/>
          <xsl:param name="width"/>
          <xsl:param name="height"/>
          <img>
            <xsl:attribute name="src" select="concat($urlPrefix, 'resources/icon/', $key, '/iconset/', $lafIconset, '/background/', $lafBackground, '/file')"/>
            <xsl:if test="$width">
              <xsl:attribute name="width" select="$width"/>
            </xsl:if>
            <xsl:if test="$height">
              <xsl:attribute name="height" select="$height"/>
            </xsl:if>
          </img>
        </xsl:function>

      </xsl:stylesheet>
    </expression>

    <!-- Description for assetref widget in a list view with info about birthday (height of assetref widget should have height="40px") -->
    <expression id="asset-ref-list-birthday">
      <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0">
        <xsl:param name="system"/>
        <xsl:param name="control"/>
        <xsl:variable name="maxAssetPreviewSize" select="if ($control/control/@height) then ($control/control/@height) else 36"/>
        <xsl:variable name="assetCount" select="count(asset)"/>

        <xsl:template match="/">
          <xsl:if test="$assetCount = 1">
            <html>
              <table cellpadding="0" valign="top" class="asset-ref-table">
                <tr valign="top">
                  <xsl:variable name="thumbnailStorage" select="asset[1]/storage_item[@key='thumbnail'][1]"/>
                  <xsl:choose>
                    <xsl:when test="$thumbnailStorage">
                      <td width="40px">
                        <img hspace="1" vspace="2">
                          <xsl:attribute name="src" select="concat($system/system/@censhare-url-prefix, 'assets/asset/id/', $thumbnailStorage/@asset_id, '/element/actual/', $thumbnailStorage/@element_idx, '/storage/', $thumbnailStorage/@key, '/file/', tokenize($thumbnailStorage/@relpath,'/')[last()])"/>
                          <xsl:variable name="imageFactor" select="if (number($thumbnailStorage/@width_px) > number($thumbnailStorage/@height_px)) then ($maxAssetPreviewSize div $thumbnailStorage/@width_px) else ($maxAssetPreviewSize div $thumbnailStorage/@height_px)"/>
                          <xsl:attribute name="width" select="round($thumbnailStorage/@width_px * $imageFactor)"/>
                          <xsl:attribute name="height" select="round($thumbnailStorage/@height_px * $imageFactor)"/>
                        </img>
                      </td>
                    </xsl:when>
                    <xsl:otherwise>
                      <td width="40px">
                        <img hspace="1" vspace="2">
                          <xsl:attribute name="src" select="concat($system/system/@censhare-url-prefix, 'assets/asset/id/', asset/@id, '/icon/iconset/default/minsize/128/file')"/>
                          <xsl:attribute name="width" select="$maxAssetPreviewSize"/>
                          <xsl:attribute name="height" select="$maxAssetPreviewSize"/>
                        </img>
                      </td>
                    </xsl:otherwise>
                  </xsl:choose>
                  <td>
                    <xsl:variable name="assetType" select="asset[1]/@type"/>
                    <xsl:variable name="address" select="asset[1]/asset_feature[@feature='censhare:address'][1]"/>
                    <span class="asset-info-bold"><xsl:value-of select="asset[1]/@name"/></span>
                    <br/>
                    <xsl:variable name="birthday" select="asset[1]//asset_feature[@feature='censhare:address.birthday']"/>
                    <xsl:if test="$birthday">
                      <span class="asset-info-label"><xsl:value-of select="'${birthday}: '"/></span>
                      <span class="asset-info-value"><xsl:value-of select="cs:format-date($birthday/@value_timestamp, 'short', 'none')"/></span>
                    </xsl:if>
                  </td>
                </tr>
              </table>
            </html>
          </xsl:if>
        </xsl:template>
      </xsl:stylesheet>
    </expression>

    <!-- Description for assetref widget in a list view with info about deadline (height of assetref widget should have height="40px") -->
    <expression id="asset-ref-list-deadline">
      <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:my="http://www.censhare.com" version="2.0">
        <xsl:param name="system"/>
        <xsl:param name="control"/>
        <xsl:variable name="maxAssetPreviewSize" select="if ($control/control/@height) then ($control/control/@height) else 36"/>
        <xsl:variable name="assetCount" select="count(asset)"/>

        <xsl:template match="/">
          <xsl:if test="$assetCount = 1">
            <html>
              <table cellpadding="0" valign="top" class="asset-ref-table">
                <tr valign="top">
                  <xsl:variable name="thumbnailStorage" select="asset[1]/storage_item[@key='thumbnail'][1]"/>
                  <xsl:choose>
                    <xsl:when test="$thumbnailStorage">
                      <td width="40px">
                        <img hspace="1" vspace="2">
                          <xsl:attribute name="src" select="concat($system/system/@censhare-url-prefix, 'assets/asset/id/', $thumbnailStorage/@asset_id, '/element/actual/', $thumbnailStorage/@element_idx, '/storage/', $thumbnailStorage/@key, '/file/', tokenize($thumbnailStorage/@relpath,'/')[last()])"/>
                          <xsl:variable name="imageFactor" select="if (number($thumbnailStorage/@width_px) > number($thumbnailStorage/@height_px)) then ($maxAssetPreviewSize div $thumbnailStorage/@width_px) else ($maxAssetPreviewSize div $thumbnailStorage/@height_px)"/>
                          <xsl:attribute name="width" select="round($thumbnailStorage/@width_px * $imageFactor)"/>
                          <xsl:attribute name="height" select="round($thumbnailStorage/@height_px * $imageFactor)"/>
                        </img>
                      </td>
                    </xsl:when>
                    <xsl:otherwise>
                      <td width="40px">
                        <img hspace="1" vspace="2">
                          <xsl:attribute name="src" select="concat($system/system/@censhare-url-prefix, 'assets/asset/id/', asset/@id, '/icon/iconset/default/minsize/128/file')"/>
                          <xsl:attribute name="width" select="$maxAssetPreviewSize"/>
                          <xsl:attribute name="height" select="$maxAssetPreviewSize"/>
                        </img>
                      </td>
                    </xsl:otherwise>
                  </xsl:choose>
                  <td width="10"/>
                  <td>
                    <xsl:variable name="assetType" select="asset[1]/@type"/>
                    <xsl:variable name="address" select="asset[1]/asset_feature[@feature='censhare:address'][1]"/>
                    <span class="asset-info-bold"><xsl:value-of select="asset[1]/@name"/></span>
                    <br/>
                    <xsl:if test="asset[1]/@deadline_actual">
                      <xsl:variable name="value" select="my:getDateTimeOffsetString(xs:dateTime(asset[1]/@deadline_actual))"/>
                      <span class="asset-info-label"><xsl:value-of select="'${deadline}: '"/></span>
                      <xsl:choose>
                        <xsl:when test="starts-with($value, '-')">
                          <span class="asset-info-value" style="color:red"><xsl:value-of select="$value"/></span>
                        </xsl:when>
                        <xsl:otherwise>
                          <span class="asset-info-value"><xsl:value-of select="$value"/></span>
                        </xsl:otherwise>
                      </xsl:choose>
                      <br/>
                    </xsl:if>
                    <xsl:if test="asset[1]/@annotation">
                      <span class="asset-info-label"><xsl:value-of select="'${annotation}: '"/></span>
                      <span class="asset-info-value"><xsl:value-of select="asset[1]/@annotation"/></span>
                      <br/>
                  </xsl:if>
                  </td>
                </tr>
              </table>
            </html>
          </xsl:if>
        </xsl:template>

        <!-- Get offset of given matchDateTime to current dateTime as string -->
        <xsl:function name="my:getDateTimeOffsetString" as="xs:string">
          <xsl:param name="matchDateTime" as="xs:dateTime"/>
          <xsl:variable name="offset" select="$matchDateTime - current-dateTime()"/>
          <xsl:variable name="offsetYears" select="years-from-duration(xs:yearMonthDuration($offset))"/>
          <xsl:variable name="offsetMonths" select="months-from-duration(xs:yearMonthDuration($offset))"/>
          <xsl:variable name="offsetDays" select="days-from-duration(xs:dayTimeDuration($offset))"/>
          <xsl:variable name="offsetHours" select="hours-from-duration(xs:dayTimeDuration($offset))"/>
          <xsl:variable name="offsetMinutes" select="minutes-from-duration(xs:dayTimeDuration($offset))"/>
          <xsl:value-of select="concat(if (starts-with(string($offset), '-')) then '-' else '', string-join((my:getIntegerCaption(abs($offsetYears), (), '${year}', '${years}'), my:getIntegerCaption(abs($offsetMonths), (), '${month}', '${months}'), my:getIntegerCaption(abs($offsetDays), (), '${day}', '${days}'), my:getIntegerCaption(abs($offsetHours), (), '${hour}', '${hours}'), my:getIntegerCaption(abs($offsetMinutes), (), '${minute}', '${minutes}')), ' '))"/>
        </xsl:function>

        <!-- Get caption of given integer (nullCaption if int=0, singleCaption if int=1, else multiCaption) -->
        <xsl:function name="my:getIntegerCaption">
          <xsl:param name="int" as="xs:integer"/>
          <xsl:param name="nullCaption"/>
          <xsl:param name="singleCaption"/>
          <xsl:param name="multiCaption"/>
          <xsl:copy-of select="if ($int=0) then $nullCaption else if ($int=1) then concat($int, ' ', $singleCaption) else concat($int, ' ', $multiCaption)"/>
        </xsl:function>

      </xsl:stylesheet>
    </expression>

    <!-- Description for assetref widget that references an article based on the standard structure -->
    <expression id="asset-ref-article">
      <xsl:stylesheet xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:cs="http://www.censhare.com/xml/3.0.0/xpath-functions" version="2.0">
        <xsl:output omit-xml-declaration="yes" method="html"/>
        <xsl:param name="system">
          <system censhare-url-prefix="censhare:///service/"/>
        </xsl:param>
        <xsl:param name="temp">
          <temp current_language=""/>
        </xsl:param>
        <xsl:param name="control">
          <control width="500" height="150"/>
        </xsl:param>
        <xsl:template match="/">
          <xsl:variable name="language" select="$temp/temp/@current_language"/>
          <xsl:variable name="articleAsset" select="asset[1]"/>
          <xsl:variable name="textAssets" select="for $childAssetId in $articleAsset/child_asset_rel[@key='user.main-content.']/@child_asset return cs:get-asset($childAssetId)"/>
          <xsl:variable name="textAsset" select="if (exists($textAssets)) then (if (string-length($language) gt 0) then $textAssets[@language=$language] else $textAssets)[1] else ()"/>
          <xsl:variable name="textContent" select="if (exists($textAsset)) then doc(concat($system/system/@censhare-url-prefix, 'assets/asset/id/', $textAsset/@id, '/storage/master/file')) else ()"/>
          <xsl:variable name="imageAssetID" select="if (exists($textAsset)) then $textAsset/child_asset_rel[@key='actual.key-visual.' or starts-with(@key, 'actual.')][1]/@child_asset else ()"/>
          <xsl:variable name="imageAsset" select="if (exists($imageAssetID)) then cs:get-asset($imageAssetID) else ()"/>
          <xsl:variable name="thumbnailStorage" select="if (exists($imageAsset)) then $imageAsset/storage_item[@key='thumbnail'][1] else ()"/>
          <html>
            <body>
              <p align="center">
                <font size="2">
                  <xsl:value-of select="concat($articleAsset/@name, ' [', $articleAsset/@id, ']')"/>
                </font>
              </p>
              <table>
                <tr>
                  <td valign="middle" width="{xs:integer(floor($control/control/@width div 2))}" align="center">
                    <xsl:choose>
                      <xsl:when test="exists($thumbnailStorage)">
                        <xsl:variable name="f" select="min((($control/control/@width - 10) div 2 div $thumbnailStorage/@width_px, ($control/control/@height - 20) div $thumbnailStorage/@height_px, 1))"/>
                        <img width="{xs:integer($thumbnailStorage/@width_px * $f)}" height="{xs:integer($thumbnailStorage/@height_px * $f)}">
                          <xsl:attribute name="src" select="concat($system/system/@censhare-url-prefix, 'assets/asset/id/', $thumbnailStorage/@asset_id, '/element/actual/', $thumbnailStorage/@element_idx, '/storage/', $thumbnailStorage/@key, '/file/', tokenize($thumbnailStorage/@relpath,'/')[last()])"/>
                        </img>
                      </xsl:when>
                      <xsl:otherwise>
                        <img>
                          <xsl:attribute name="src" select="concat($system/system/@censhare-url-prefix, 'assets/asset/id/', $articleAsset/@id, '/icon/iconset/default/minsize/128/file')"/>
                        </img>
                      </xsl:otherwise>
                    </xsl:choose>
                  </td>
                  <td valign="top" width="{xs:integer(floor($control/control/@width div 2))}">
                    <h1>
                      <font size="3">
                        <xsl:value-of select="string-join($textContent/*/content/title/descendant::text(), ' ')"/>
                      </font>
                    </h1>
                    <p>
                      <font size="2">
                        <xsl:variable name="text" select="string-join($textContent/*/content/text/descendant::text(), ' ')"/>
                        <xsl:value-of select="concat(substring($text, 1, 100), if (string-length($text) gt 100) then '...' else '')"/>
                      </font>
                    </p>
                  </td>
                </tr>
              </table>
            </body>
          </html>
        </xsl:template>
      </xsl:stylesheet>
    </expression>

    <!-- Description for map temporary address -->
    <expression id="map-temp-address">
      <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0">
        <xsl:template match="/">
          <xsl:if test="count(asset) = 1">
            <html>
              <!-- Street -->
              <xsl:variable name="street" select="asset/tmp_map_address/@street"/>
              <xsl:if test="$street">
                <span class="asset-info-label"><xsl:value-of select="'${street} '"/></span>
                <span class="asset-info-value"><xsl:value-of select="$street"/></span>
              </xsl:if>
              <!-- ZIP -->
              <xsl:variable name="zip" select="asset/tmp_map_address/@zip"/>
              <xsl:if test="$zip">
                <span class="asset-info-label"><xsl:value-of select="' ${postal-code} '"/></span>
                <span class="asset-info-value"><xsl:value-of select="$zip"/></span>
              </xsl:if>
              <!-- City -->
              <xsl:variable name="city" select="asset/tmp_map_address/@city"/>
              <xsl:if test="$city">
                <span class="asset-info-label"><xsl:value-of select="' ${city} '"/></span>
                <span class="asset-info-value"><xsl:value-of select="$city"/></span>
              </xsl:if>
              <!-- Country -->
              <xsl:variable name="country" select="asset/tmp_map_address/@country"/>
              <xsl:if test="$country">
                <span class="asset-info-label"><xsl:value-of select="' ${country} '"/></span>
                <span class="asset-info-value"><xsl:value-of select="$country"/></span>
              </xsl:if>
            </html>
          </xsl:if>
        </xsl:template>
      </xsl:stylesheet>
    </expression>

    <!-- Description for asset placement -->
    <expression id="asset-placement">

      <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0">
        <xsl:param name="system"/>
        <xsl:param name="asset_element"/>
        <xsl:param name="storage_item"/>
        <xsl:param name="transformation"/>
        <xsl:variable name="partyID" select="$system/system/party/@id"/>
        <xsl:variable name="urlPrefix" select="$system/system/@censhare-url-prefix"/>
        <xsl:variable name="lafBackground" select="$system/system/laf/@background"/>
        <xsl:variable name="lafIconset" select="$system/system/laf/@icon-set"/>

        <xsl:template match="/">
          <html>
            <table cellpadding="1" valign="top" class="asset-info-table">
              <tr>
                <!-- Asset name -->
                <td class="asset-info-bold">
                  <xsl:value-of select="concat(asset/@name, ' (', asset/@id, ')')"/>
                </td>
              </tr>
              <tr>
                <td>
                  <table cellpadding="0">
                    <xsl:choose>
                      <xsl:when test="$transformation">
                        <!-- transformation -->
                        <tr>
                          <td class="asset-info-label">${transformation}:</td>
                          <td class="asset-info-value"><xsl:value-of select="concat('${quote-start}', $transformation/transformation/@name, '${quote-end}')"/></td>
                        </tr>
                      </xsl:when>
                      <xsl:when test="$storage_item">
                        <!-- placed storage item -->
                        <tr>
                          <xsl:variable name="seqIDx" select="$asset_element/asset_element/@corpus:seq_idx"/>
                          <xsl:choose>
                            <xsl:when test="$seqIDx > 0">
                              <td class="asset-info-label"><xsl:value-of select="concat(cs:cachelookup('storage_keydef', '@key', $storage_item/storage_item/@key)/@name, ' (', cs:format-number($seqIDx + 1, '#'), '):')"/></td>
                            </xsl:when>
                            <xsl:otherwise>
                              <td class="asset-info-label"><xsl:value-of select="concat(cs:cachelookup('storage_keydef', '@key', $storage_item/storage_item/@key)/@name, ':')"/></td>
                            </xsl:otherwise>
                          </xsl:choose>
                          <td class="asset-info-value">
                            <xsl:for-each select="$storage_item/storage_item">
                              <xsl:value-of select="cs:cachelookup('mimetype', '@mimetype', @mimetype)/@name"/>
                              <xsl:value-of select="if (@mimetype = 'application/indesign' and @app_version) then (for $x in @app_version return (substring-after(cs:master-data('indesign_version')[app_versions/app_version/@version=$x and @edition='standard']/applications/indesign/@name, 'Adobe InDesign'))) else ''"/>
                              <xsl:value-of select="if (@filelength>0) then concat(', ', cs:format-number((@filelength + 52429) div 1048576, '#,##0.0 MB')) else ''"/>
                              <xsl:value-of select="if (@dpi) then concat(', ', cs:format-number(@dpi, '#,###'), ' ${dpi}') else ''"/>
                              <xsl:value-of select="if (@color) then concat(', ', for $x in @color return if ($x='bw') then '${bitmap}' else if ($x='gs') then '${grey}' else if ($x='idx') then '${indexed}' else if ($x='rgb') then '${rgb}' else if ($x='lab') then '${lab}' else if ($x='cmyk') then '${cmyk}' else '$x') else ''"/>
                            </xsl:for-each>
                          </td>
                        </tr>
                      </xsl:when>
                      <xsl:otherwise>
                        <!-- placed metadata -->
                        <tr>
                          <td class="asset-info-label">${meta-data}</td>
                        </tr>
                      </xsl:otherwise>
                    </xsl:choose>
                  </table>
                </td>
              </tr>
            </table>
          </html>
        </xsl:template>
      </xsl:stylesheet>

    </expression>

    <!-- Description for admin info -->
    <expression id="admin-info">

      <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0">
        <xsl:param name="system"/>
        <xsl:variable name="maxPreviewSize" select="32"/>
        <xsl:variable name="assetCount" select="count(asset)"/>
        <xsl:variable name="partyID" select="$system/system/party/@id"/>
        <xsl:variable name="urlPrefix" select="$system/system/@censhare-url-prefix"/>
        <xsl:variable name="lafBackground" select="$system/system/laf/@background"/>
        <xsl:variable name="lafIconset" select="$system/system/laf/@icon-set"/>

        <xsl:template match="/">
          <!--
          <xsl:if test="$assetCount > 0">
          -->
            <html>
              <table cellpadding="1" valign="top" class="admin-info-table">
                <tr>
                  <!-- Asset name or count of assets -->
                  <td class="admin-info-title">
                    <xsl:value-of select="if (cs:equal-values(asset/@name)) then asset[1]/@name else concat($assetCount, ' ', '${assets}')"/>
                  </td>
                </tr>
                <tr>
                  <td>
                    <table cellpadding="0">
                      <!-- Asset type -->
                      <tr >
                        <td class="admin-info-label">${type}:</td>
                        <td class="admin-info-value"><xsl:value-of select="cs:equal-values(asset/@type, cs:cachelookup('asset_typedef', '@asset_type', asset[1]/@type)/@name, '${multiple-values}')"/></td>
                      </tr>
                      <!-- Resource -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="resourceKey" select="asset[1]/asset_feature[@feature='censhare:resource-key']"/>
                        <xsl:variable name="resourceMeta" select="asset[1]/asset_feature[@feature='censhare:resource-meta']"/>
                        <xsl:if test="$resourceKey">
                          <tr>
                            <td class="admin-info-label">${resource}:</td>
                            <td class="admin-info-value">${quote-start}<xsl:value-of select="$resourceKey/@value_string"/>${quote-end} - <xsl:value-of select="upper-case(string-join($resourceMeta/xmldata/target-formats/format/@key, ', '))"/></td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Annotation -->
                      <xsl:if test="asset[1]/@annotation and cs:equal-values(asset/@annotation)">
                        <tr>
                          <td class="admin-info-label">${annotation}:</td>
                          <td class="admin-info-value">
                            <xsl:call-template name="lineBreak">
                              <xsl:with-param name="text" select="asset[1]/@annotation"/>
                            </xsl:call-template>
                          </td>
                        </tr>
                      </xsl:if>
                      <!-- UUID's -->
                      <xsl:variable name="uuids" select="asset[1]/asset_feature[@feature='censhare:uuid']"/>
                      <xsl:if test="$uuids">
                        <tr>
                          <td class="admin-info-label">${uuids}:</td>
                          <td class="admin-info-value2">
                            <xsl:for-each select="$uuids">
                              <xsl:value-of select="@value_string"/>
                              <xsl:if test="position() != last()"><br/></xsl:if>
                            </xsl:for-each>
                          </td>
                        </tr>
                      </xsl:if>
                    </table>
                  </td>
                </tr>
              </table>
            </html>
          <!--
          </xsl:if>
          -->
        </xsl:template>

        <!-- Creates line breaks '<br/>' elements of line feed, line separator and paragraph separator at given text parameter -->
        <xsl:template name="lineBreak">
          <xsl:param name="text" select="."/>
          <xsl:variable name="lines" select="tokenize($text, '\n|\u2028|\u2029')"/> <!-- delimiters: line feed, line separator and paragraph separator -->
          <xsl:for-each select="tokenize($text, '\n|\u2028|\u2029')">
            <xsl:value-of select="."/>
            <xsl:if test="position() != last()">
              <br/>
            </xsl:if>
          </xsl:for-each>
        </xsl:template>

      </xsl:stylesheet>

    </expression>

    <expression id="comparison-view-info">
      <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:my="http://www.censhare.com" version="2.0">
        <xsl:variable name="assetCount" select="count(asset)"/>
        <xsl:template match="/">
          <xsl:if test="$assetCount > 0">
            <html>
              <table cellpadding="1" valign="top" class="asset-info-table">
                <!-- Name -->
                <tr>
                  <td class="asset-info-bold">
                    <xsl:value-of select="asset/@name"/>
                  </td>
                </tr>
                <!-- Type -->
                <tr>
                  <td class="asset-info-value">
                    <xsl:value-of select="my:getLocalizedValueHierarchical(asset[1]/@type, 'asset_typedef', '@asset_type', '/', false())"/>
                  </td>
                </tr>
                <!-- Files -->
                <xsl:variable name="masterStorageItems" select="asset/storage_item[@key='master']"/>
                <xsl:if test="$masterStorageItems">
                  <tr>
                    <td class="asset-info-value">
                      <!-- Master storage items -->
                      <xsl:choose>
                        <xsl:when test="$masterStorageItems">
                          <xsl:for-each select="$masterStorageItems">
                            <xsl:value-of select="cs:cachelookup('mimetype', '@mimetype', @mimetype)/@name"/>
                            <xsl:value-of select="if (@mimetype = 'application/indesign' and @app_version) then (for $x in @app_version return (substring-after(cs:master-data('indesign_version')[app_versions/app_version/@version=$x and @edition='standard']/applications/indesign/@name, 'Adobe InDesign'))) else ''"/>
                            <xsl:value-of select="if (@filelength > 0) then concat(', ', my:getFileSizeString(@filelength)) else ''"/>
                            <xsl:variable name="elementIDx" select="@element_idx"/>
                            <xsl:variable name="assetElement" select="../asset_element[@idx=$elementIDx and @key='actual.']"/>
                            <xsl:value-of select="if ($assetElement/@width_mm and $assetElement/@height_mm) then concat(', ', cs:format-number($assetElement/@width_mm, '#,##0.0'), 'x', cs:format-number($assetElement/@height_mm, '#,##0.0'), ' mm') else ''"/>
                            <xsl:value-of select="if (@width_px and @height_px) then concat(', ', cs:format-number(@width_px, '#,###'), 'x', cs:format-number(@height_px, '#,###'), ' ${pixels}') else ''"/>
                            <xsl:value-of select="if (@dpi) then concat(', ', cs:format-number(@dpi, '#,###'), ' ${dpi}') else ''"/>
                            <xsl:value-of select="if (@duration_sec) then concat(', ${duration} ', my:getDurationString(@duration_sec)) else ''"/>
                            <xsl:value-of select="if (@audio_format) then concat(', ', @audio_format) else ''"/>
                            <xsl:value-of select="if (@video_format) then concat(', ', @video_format) else ''"/>
                            <xsl:value-of select="if (@frames_per_second) then concat(', ', round(@frames_per_second), ' fps') else ''"/>
                            <xsl:value-of select="if (@bitrate_mbps) then concat(', ', cs:format-number(@bitrate_mbps, '#,##0.0##'), ' Mbit/s') else ''"/>
                            <xsl:value-of select="if (@color) then concat(', ', for $x in @color return if ($x='bw') then '${bitmap}' else if ($x='gs') then '${grey}' else if ($x='idx') then '${indexed}' else if ($x='rgb') then '${rgb}' else if ($x='lab') then '${lab}' else if ($x='cmyk') then '${cmyk}' else '$x') else ''"/>
                            <xsl:value-of select="if (@charcount) then concat(', ', cs:format-number(@charcount, '#,###'), ' ${chars}') else ''"/>
                            <xsl:value-of select="if (@wordcount) then concat(', ', cs:format-number(@wordcount, '#,###'), ' ${words}') else ''"/>
                            <xsl:value-of select="if (@linecount) then concat(', ', cs:format-number(@linecount, '#,###'), ' ${lines}') else ''"/>
                            <br/>
                          </xsl:for-each>
                        </xsl:when>
                        <xsl:otherwise>${no-master-file}<br/></xsl:otherwise>
                      </xsl:choose>
                    </td>
                  </tr>
                </xsl:if>
              </table>
            </html>
          </xsl:if>
        </xsl:template>

        <!-- Get localized name of a given dot separated value -->
        <xsl:function name="my:getLocalizedValueHierarchical" as="xs:string">
          <xsl:param name="value" as="xs:string"/>
          <xsl:param name="cachedTableName" as="xs:string"/>
          <xsl:param name="cachedTableAttribute" as="xs:string"/>
          <xsl:param name="delimiter" as="xs:string"/>
          <xsl:param name="hideRoot" as="xs:boolean"/>
          <xsl:variable name="items" select="tokenize($value, '\.')"/>
          <xsl:variable name="startItem" select="if ($hideRoot) then 2 else 1"/>
          <xsl:value-of select="string-join(for $x in ($startItem to xs:long(count($items))) return cs:cachelookup($cachedTableName, $cachedTableAttribute, concat(string-join(subsequence($items, 1, $x), '.'), '.'))/@name, $delimiter)"/>
        </xsl:function>

        <!-- Get string presentation of given file size as number -->
        <xsl:function name="my:getFileSizeString" as="xs:string">
          <xsl:param name="fileSize" as="xs:double"/>
          <xsl:choose>
            <xsl:when test="$fileSize &lt; 1024"><xsl:value-of select="cs:format-number($fileSize, '#,##0 Bytes')"/></xsl:when>
            <xsl:when test="$fileSize &lt; 1048576"><xsl:value-of select="cs:format-number($fileSize div 1024, '#,##0.0 KB')"/></xsl:when>
            <xsl:when test="$fileSize &lt; 1073741824"><xsl:value-of select="cs:format-number($fileSize div 1048576, '#,##0.0 MB')"/></xsl:when>
            <xsl:otherwise><xsl:value-of select="cs:format-number($fileSize div 1073741824, '#,##0.0 GB')"/></xsl:otherwise>
          </xsl:choose>
        </xsl:function>

        <!-- Get string presentation (e.g. '2:30' or '1:02:30') of given duration as number of seconds -->
        <xsl:function name="my:getDurationString" as="xs:string">
          <xsl:param name="duration" as="xs:double"/>
          <xsl:variable name="hourPart" select="string(xs:integer(floor($duration div 3600)))"/>
          <xsl:variable name="minutePart" select="string(xs:integer(floor(($duration mod 3600) div 60)))"/>
          <xsl:variable name="secondPart" select="string(round($duration mod 60))"/>
          <xsl:copy-of select="concat(if ($hourPart != '0') then concat($hourPart, ':', if (string-length($minutePart) = 1) then '0' else()) else (), $minutePart, ':', if (string-length($secondPart) = 1) then '0' else (), $secondPart)"/>
        </xsl:function>

      </xsl:stylesheet>
    </expression>

    <!-- Description for asset general info -->
    <expression id="asset-general-info">

      <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:my="http://www.censhare.com" version="2.0">
        <xsl:param name="system"/>
        <xsl:variable name="maxPreviewSize" select="32"/>
        <xsl:variable name="assetCount" select="count(asset)"/>
        <xsl:variable name="partyID" select="$system/system/party/@id"/>
        <xsl:variable name="uiLocale" select="$system/system/@locale"/>
        <xsl:variable name="urlPrefix" select="$system/system/@censhare-url-prefix"/>
        <xsl:variable name="lafBackground" select="$system/system/laf/@background"/>
        <xsl:variable name="lafIconset" select="$system/system/laf/@icon-set"/>

        <xsl:template match="/">
          <xsl:if test="$assetCount > 0">
            <html>
              <table cellpadding="1" valign="top" class="asset-info-table">
                <tr>
                  <td>
                    <table cellpadding="0">
                      <!-- Asset type -->
                      <tr >
                        <td class="asset-info-label">${type}:</td>
                        <td class="asset-info-value"><xsl:value-of select="cs:equal-values(asset/@type, my:getLocalizedValueHierarchical(asset[1]/@type, 'asset_typedef', '@asset_type', '/', false()), '${multiple-values}')"/></td>
                      </tr>
                      <!-- Address (show only, if one asset is selected) -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="address" select="asset[1]/asset_feature[@feature='censhare:address'][1]"/>
                        <xsl:variable name="personalDatas" select="$address/asset_feature[@feature='censhare:address.personal-data']"/>
                        <xsl:variable name="comTelTypes" select="$address/asset_feature[@feature='censhare:address.com-tel-type']"/>
                        <xsl:variable name="comEmailTypes" select="$address/asset_feature[@feature='censhare:address.com-email-type']"/>
                        <xsl:variable name="comOtherTypes" select="$address/asset_feature[@feature='censhare:address.com-other-type']"/>
                        <xsl:variable name="postAddresses" select="$address/asset_feature[@feature='censhare:address.type']"/>
                        <xsl:if test="$address or $personalDatas or $comTelTypes or $comEmailTypes or $comOtherTypes or $postAddresses">
                          <xsl:for-each select="asset[1]/asset_feature[@feature='censhare:address']">
                            <xsl:if test="$comTelTypes">
                              <tr>
                                <td class="asset-info-label">${phone}:</td>
                                <td class="asset-info-value">
                                  <table cellpadding="0">
                                    <xsl:for-each select="$comTelTypes">
                                      <xsl:sort select="cs:master-data('feature_value')[@feature=current()/@feature and @value_key=current()/@value_key]/@sorting" data-type="number" order="ascending"/>
                                      <tr>
                                        <td class="asset-info-value2" width="60"><xsl:value-of select="my:getFeatureValue(.)"/>:&#x00A0;&#x00A0;</td>
                                        <td class="asset-info-value"><xsl:value-of select="asset_feature[@feature='censhare:address.uri-tel']/@value_string"/></td>
                                      </tr>
                                    </xsl:for-each>
                                  </table>
                                </td>
                              </tr>
                            </xsl:if>
                            <xsl:if test="$comEmailTypes">
                              <tr>
                                <td class="asset-info-label">${e-mail}:</td>
                                <td class="asset-info-value">
                                  <table cellpadding="0">
                                    <xsl:for-each select="$comEmailTypes">
                                      <xsl:sort select="cs:master-data('feature_value')[@feature=current()/@feature and @value_key=current()/@value_key]/@sorting" data-type="number" order="ascending"/>
                                      <tr>
                                        <td class="asset-info-value2" width="60"><xsl:value-of select="my:getFeatureValue(.)"/>:&#x00A0;&#x00A0;</td>
                                        <td class="asset-info-value">
                                          <a class="asset-info-link">
                                            <xsl:attribute name="href" select="concat('mailto:', asset_feature[@feature='censhare:address.uri-mailto']/@value_string)"/>
                                            <xsl:value-of select="asset_feature[@feature='censhare:address.uri-mailto']/@value_string"/>
                                          </a>
                                        </td>
                                      </tr>
                                    </xsl:for-each>
                                  </table>
                                </td>
                              </tr>
                            </xsl:if>
                            <xsl:if test="$comOtherTypes">
                              <tr>
                                <td class="asset-info-label">${other}:</td>
                                <td class="asset-info-value">
                                  <table cellpadding="0">
                                    <xsl:for-each select="$comOtherTypes">
                                      <xsl:sort select="cs:master-data('feature_value')[@feature=current()/@feature and @value_key=current()/@value_key]/@sorting" data-type="number" order="ascending"/>
                                      <tr>
                                        <td class="asset-info-value2" width="60"><xsl:value-of select="my:getFeatureValue(.)"/>:&#x00A0;&#x00A0;</td>
                                        <td class="asset-info-value">
                                          <xsl:variable name="uri" select="asset_feature[@feature='censhare:address.uri-generic']/@value_string"/>
                                          <xsl:choose>
                                            <xsl:when test="@value_key='website'">
                                              <a class="asset-info-link" target="_blank">
                                                <xsl:attribute name="href" select="concat(if (starts-with($uri, 'http')) then '' else 'http://',$uri)"/>
                                                <xsl:value-of select="asset_feature[@feature='censhare:address.uri-generic']/@value_string"/>
                                              </a>
                                            </xsl:when>
                                            <xsl:when test="@value_key='twitter'">
                                              <a class="asset-info-link" target="_blank">
                                                <xsl:attribute name="href" select="concat('http://twitter.com/', $uri)"/>
                                                <xsl:value-of select="asset_feature[@feature='censhare:address.uri-generic']/@value_string"/>
                                              </a>
                                            </xsl:when>
                                            <xsl:when test="@value_key='skype'">
                                              <a class="asset-info-link" target="_blank">
                                                <xsl:attribute name="href" select="concat('skype:', $uri, '?chat')"/>
                                                <xsl:value-of select="asset_feature[@feature='censhare:address.uri-generic']/@value_string"/>
                                              </a>
                                            </xsl:when>
                                            <xsl:when test="@value_key='facebook'">
                                              <a class="asset-info-link" target="_blank">
                                                <xsl:attribute name="href" select="concat('http://www.facebook.com/', $uri)"/>
                                                <xsl:value-of select="asset_feature[@feature='censhare:address.uri-generic']/@value_string"/>
                                              </a>
                                            </xsl:when>
                                            <xsl:when test="@value_key='xing'">
                                              <a class="asset-info-link" target="_blank">
                                                <xsl:attribute name="href" select="concat('http://www.xing.com/profile/', $uri)"/>
                                                <xsl:value-of select="asset_feature[@feature='censhare:address.uri-generic']/@value_string"/>
                                              </a>
                                            </xsl:when>
                                            <xsl:otherwise>
                                              <xsl:value-of select="$uri"/>
                                            </xsl:otherwise>
                                          </xsl:choose>
                                        </td>
                                      </tr>
                                    </xsl:for-each>
                                  </table>
                                </td>
                              </tr>
                            </xsl:if>
                            <xsl:if test="$postAddresses">
                              <tr>
                                <td class="asset-info-label">${address}:</td>
                                <td class="asset-info-value">
                                  <table cellpadding="0">
                                    <xsl:for-each select="$postAddresses">
                                      <xsl:sort select="cs:master-data('feature_value')[@feature=current()/@feature and @value_key=current()/@value_key]/@sorting" data-type="number" order="ascending"/>
                                      <tr>
                                        <td class="asset-info-value2" width="60"><xsl:value-of select="my:getFeatureValue(.)"/>:&#x00A0;&#x00A0;</td>
                                        <xsl:variable name="lines" select="(string-join((asset_feature[@feature='censhare:address.street'][1]/@value_string, asset_feature[@feature='censhare:address.street-number'][1]/@value_string), ' '), asset_feature[@feature='censhare:address.additional'][1]/@value_string, asset_feature[@feature='censhare:address.po-box'][1]/@value_string, string-join((asset_feature[@feature='censhare:address.zip-code'][1]/@value_string, asset_feature[@feature='censhare:address.city'][1]/@value_string), ' '), asset_feature[@feature='censhare:address.region'][1]/@value_string, if (asset_feature[@feature='censhare:address.country-code']) then my:getFeatureValue(asset_feature[@feature='censhare:address.country-code']) else '')"/>
                                        <td class="asset-info-value">
                                          <xsl:for-each select="$lines">
                                            <xsl:value-of select="."/>
                                            <br/>
                                          </xsl:for-each>
                                        </td>
                                      </tr>
                                    </xsl:for-each>
                                  </table>
                                </td>
                              </tr>
                            </xsl:if>
                          </xsl:for-each>
                        </xsl:if>
                      </xsl:if>
                      <!-- Contexts -->
                      <!--xsl:if test="$assetCount=1">
                        <xsl:variable name="language" select="if (asset[1]/@language) then cs:cachelookup('language_def', '@id', asset[1]/@language)/@name else ()"/>
                        <xsl:variable name="region" select="if (asset[1]/asset_feature[@feature='censhare:region']) then my:getFeatureValue(asset[1]/asset_feature[@feature='censhare:region'][1]) else ()"/>
                        <xsl:variable name="income" select="if (asset[1]/asset_feature[@feature='censhare:income']) then my:getFeatureValue(asset[1]/asset_feature[@feature='censhare:income'][1]) else ()"/>
                        <xsl:variable name="gender" select="if (asset[1]/asset_feature[@feature='censhare:gender']) then my:getFeatureValue(asset[1]/asset_feature[@feature='censhare:gender'][1]) else ()"/>
                        <xsl:variable name="ageRange" select="if (asset[1]/asset_feature[@feature='censhare:age-range']) then my:getFeatureValue(asset[1]/asset_feature[@feature='censhare:age-range'][1]) else ()"/>
                        <xsl:variable name="relationshipStatus" select="if (asset[1]/asset_feature[@feature='censhare:relationship-status']) then my:getFeatureValue(asset[1]/asset_feature[@feature='censhare:relationship-status'][1]) else ()"/>
                        <xsl:if test="$language or $region or $income or $gender or $ageRange or $relationshipStatus">
                          <tr>
                            <td class="asset-info-label">${contexts}:</td>
                            <td class="asset-info-value">
                              <xsl:if test="$language">
                                <span class="asset-info-label-inline">${language}:&#x00A0;&#x00A0;</span>
                                <xsl:value-of select="$language"/>
                                <br/>
                              </xsl:if>
                              <xsl:if test="$region">
                                <span class="asset-info-label-inline">${region}:&#x00A0;&#x00A0;</span>
                                <xsl:value-of select="$region"/>
                                <br/>
                              </xsl:if>
                              <xsl:if test="$income">
                                <span class="asset-info-label-inline">${income}:&#x00A0;&#x00A0;</span>
                                <xsl:value-of select="$income"/>
                                <br/>
                              </xsl:if>
                              <xsl:if test="$gender">
                                <span class="asset-info-label-inline">${gender}:&#x00A0;&#x00A0;</span>
                                <xsl:value-of select="$gender"/>
                                <br/>
                              </xsl:if>
                              <xsl:if test="$ageRange">
                                <span class="asset-info-label-inline">${age-range}:&#x00A0;&#x00A0;</span>
                                <xsl:value-of select="$ageRange"/>
                                <br/>
                              </xsl:if>
                              <xsl:if test="$relationshipStatus">
                                <span class="asset-info-label-inline">${relationship-status}:&#x00A0;&#x00A0;</span>
                                <xsl:value-of select="$relationshipStatus"/>
                                <br/>
                              </xsl:if>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if-->
                      <!-- Pages (show only, if target or actual child asset elements exists) -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="rootTargetElement" select="asset[1]/asset_element[@key='target.' and not(@parent_idx)]"/>
                        <xsl:variable name="childTargetElements" select="asset[1]/asset_element[@key='target.' and @parent_idx = $rootTargetElement/@idx]"/>
                        <xsl:variable name="rootActualElement" select="asset[1]/asset_element[@key='actual.' and not(@parent_idx)]"/>
                        <xsl:variable name="childActualElements" select="asset[1]/asset_element[@key='actual.' and @parent_idx = $rootActualElement/@idx]"/>
                        <xsl:if test="$childTargetElements or $childActualElements">
                          <tr>
                            <td class="asset-info-label">${pages}:</td>
                            <td class="asset-info-value">
                              <xsl:if test="$childActualElements">
                                <xsl:variable name="countActualElements" select="count($childActualElements)"/>
                                <xsl:value-of select="if ($countActualElements = 1) then '1 ${page}' else concat($countActualElements, ' ${pages}')"/>
                              </xsl:if>
                              <xsl:if test="$childTargetElements">
                                <xsl:variable name="countTargetElements" select="count($childTargetElements)"/>
                                <xsl:value-of select="concat(if ($childActualElements) then ', ' else '', if ($countTargetElements = 1) then '1 ${planned-page}' else concat($countTargetElements, ' ${planned-pages}'))"/>
                              </xsl:if>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Language (show only, if all assets have same value) -->
                      <xsl:variable name="values" select="asset/@language"/>
                      <xsl:if test="count($values)=$assetCount and cs:equal-values($values)">
                        <tr>
                          <td class="asset-info-label">${language}:</td>
                          <td class="asset-info-value"><xsl:value-of select="cs:cachelookup('language_def', '@id', $values[1])/@name"/></td>
                        </tr>
                      </xsl:if>
                      <!-- Author (show only, if all assets have same value) -->
                      <xsl:variable name="values" select="asset/@author"/>
                      <xsl:if test="count($values)=$assetCount and cs:equal-values($values)">
                        <tr>
                          <td class="asset-info-label">${author}:</td>
                          <td class="asset-info-value"><xsl:value-of select="$values[1]"/></td>
                        </tr>
                      </xsl:if>
                      <!-- Keywords (show only, if all assets have same value) -->
                      <xsl:variable name="values" select="asset/@keywords"/>
                      <xsl:if test="count($values)=$assetCount and cs:equal-values($values)">
                        <tr>
                          <td class="asset-info-label">${keywords}:</td>
                          <td class="asset-info-value"><xsl:value-of select="$values[1]"/></td>
                        </tr>
                      </xsl:if>
                      <!-- Keyword features (show only, if one asset is selected) -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="featureList" select="asset[1]/asset_feature[@feature='censhare:keyword']"/>
                        <xsl:if test="$featureList">
                          <tr>
                            <td class="asset-info-label">${keywords}:</td>
                            <td class="asset-info-value">
                              <xsl:value-of select="string-join(for $x in $featureList return my:getFeatureValueHierarchical($x, '/', true()), ', ')"/>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- External keyword features (show only, if one asset is selected) -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="featureList" select="asset[1]/asset_feature[@feature='censhare:keyword.external']/asset_feature[@feature='censhare:keyword.external.ref']"/>
                        <xsl:if test="$featureList">
                          <tr>
                            <td class="asset-info-label">${keywords}:</td>
                            <td class="asset-info-value">
                              <xsl:for-each select="$featureList">
                                <xsl:sort select="number(@relevance_percentage)" order="descending"/>
                                <xsl:value-of select="my:getFeatureValue(.)"/>
                                <xsl:if test="@relevance_percentage">
                                  <span class="asset-info-label-inline">&#160;➔<xsl:value-of select="cs:format-number(@relevance_percentage, '0.0')"/>%</span>
                                </xsl:if>
                                <br/>
                              </xsl:for-each>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Annotation (show only, if one asset is selected) -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="value" select="asset/@annotation"/>
                        <xsl:if test="$value">
                          <tr>
                            <td class="asset-info-label">${annotation}:</td>
                            <td class="asset-info-value">
                              <xsl:call-template name="lineBreak">
                                <xsl:with-param name="text" select="$value"/>
                              </xsl:call-template>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Description in current UI locale (show only, if one asset is selected) -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="value" select="asset[1]/@description"/>
                        <xsl:variable name="feature" select="asset[1]/asset_feature[@feature='censhare:description' and @language=$uiLocale][1]"/>
                        <xsl:if test="$value or $feature">
                          <tr>
                            <td class="asset-info-label">${description}:</td>
                            <td class="asset-info-value">
                              <xsl:call-template name="lineBreak">
                                <xsl:with-param name="text" select="if ($feature) then my:getFeatureValue($feature) else $value"/>
                              </xsl:call-template>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Planned time start (show only, if one asset is selected) -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="value" select="asset/asset_feature[@feature='censhare:planned-time-start']"/>
                        <xsl:if test="$value">
                          <tr>
                            <td class="asset-info-label">${start-date}:</td>
                            <td class="asset-info-value">
                              <xsl:value-of select="cs:format-date($value/@value_timestamp, 'relative-short', 'short')"/>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Deadline (show only, if all assets have same value) -->
                      <xsl:variable name="values" select="asset/@deadline_actual"/>
                      <xsl:if test="count($values)=$assetCount and cs:equal-values($values)">
                        <tr>
                          <td class="asset-info-label">${deadline}:</td>
                          <td class="asset-info-value"><xsl:value-of select="cs:format-date($values[1], 'relative-short', 'short')"/></td>
                        </tr>
                      </xsl:if>
                      <!-- Completion (show only, if one asset is selected) -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="value" select="asset/asset_feature[@feature='censhare:task-completion-percentage']"/>
                        <xsl:if test="$value">
                          <tr>
                            <td class="asset-info-label">${complete}:</td>
                            <td class="asset-info-value">
                              <xsl:value-of select="concat(round($value/@value_double), '%')"/>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Workflow (show only, if all assets have same value) -->
                      <xsl:variable name="values" select="asset/@wf_id"/>
                      <xsl:if test="count($values)=$assetCount and cs:equal-values($values)">
                        <tr>
                          <td class="asset-info-label">${workflow}:</td>
                          <td>
                            <xsl:value-of select="cs:cachelookup('workflow', '@id', $values[1])/@name"/>
                            <br/>
                            <xsl:variable name="steps" select="asset/@wf_step"/>
                            <xsl:if test="count($steps)=$assetCount and cs:equal-values($steps)">
                              <span class="asset-info-label-inline">${step}:&#x00A0;&#x00A0;</span>
                              <xsl:value-of select="cs:cachelookup('workflow_step', '@wf_id', $values[1], '@wf_step', $steps[1])/@name"/>
                              <br/>
                            </xsl:if>
                            <xsl:variable name="targets" select="asset/@wf_target"/>
                            <xsl:if test="count($targets)=$assetCount and cs:equal-values($targets)">
                              <xsl:variable name="userAssetID" select="cs:cachelookup('party', '@id', $targets[1])/@party_asset_id"/>
                              <xsl:variable name="userAsset" select="cs:get-asset($userAssetID, 0, 0)"/>
                              <xsl:variable name="thumbnailStorage" select="$userAsset/storage_item[@key='thumbnail'][1]"/>
                              <xsl:choose>
                                <xsl:when test="$thumbnailStorage">
                                  <table cellpadding="0">
                                    <tr>
                                      <td class="asset-info-label">${assigned-to}:</td>
                                      <td class="asset-info-label">
                                        <img hspace="1" vspace="2">
                                          <xsl:attribute name="src" select="concat($urlPrefix, 'assets/asset/id/', $thumbnailStorage/@asset_id, '/element/actual/', $thumbnailStorage/@element_idx, '/storage/', $thumbnailStorage/@key, '/file/', tokenize($thumbnailStorage/@relpath,'/')[last()])"/>
                                          <xsl:variable name="imageFactor" select="if ($thumbnailStorage/@width_px > $thumbnailStorage/@height_px) then ($maxPreviewSize div $thumbnailStorage/@width_px) else ($maxPreviewSize div $thumbnailStorage/@height_px)"/>
                                          <xsl:attribute name="width" select="round($thumbnailStorage/@width_px * $imageFactor)"/>
                                          <xsl:attribute name="height" select="round($thumbnailStorage/@height_px * $imageFactor)"/>
                                        </img>
                                      </td>
                                      <td class="asset-info-value">
                                        <xsl:value-of select="my:DisplayNameOrID($targets[1])"/>
                                      </td>
                                    </tr>
                                  </table>
                                </xsl:when>
                                <xsl:otherwise>
                                  <span class="asset-info-label-inline">${assigned-to}:&#x00A0;&#x00A0;</span>
                                  <xsl:value-of select="my:DisplayNameOrID($targets[1])"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                          </td>
                        </tr>
                      </xsl:if>
                      <!-- Notes  (show count of notes of all selected assets) -->
                      <xsl:variable name="notes" select="asset/actual_notes/note"/>
                      <xsl:if test="$notes">
                        <tr>
                          <td class="asset-info-label">${notes}:</td>
                          <td class="asset-info-value"><xsl:value-of select="concat(count($notes), ' ', if (count($notes) = 1) then '${note}' else '${notes}')"/></td>
                        </tr>
                      </xsl:if>
                      <!-- Features -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="assetFeatures" select="asset//asset_feature[cs:cachelookup('feature', '@key', @feature, '@isassetinfo', '1')]"/>
                        <xsl:if test="$assetFeatures">
                          <xsl:for-each select="$assetFeatures">
                            <xsl:sort select="cs:master-data('feature')[@key=current()/@feature]/@assetinfo_sorting" data-type="number"/>
                            <xsl:variable name="assetFeature" select="."/>
                            <tr>
                              <td class="asset-info-label"><xsl:value-of select="my:getFeatureName(.)"/>:</td>
                              <td class="asset-info-value">
                                <xsl:copy-of select="my:getFeatureValue(.)"/>
                                <xsl:variable name="feature" select="cs:master-data('feature')[@key=$assetFeature/@feature]"/>
                                <xsl:if test="$feature/@has_relevance='1' and $assetFeature/@relevance_percentage">
                                  <span class="asset-info-label-inline">&#160;➔<xsl:value-of select="cs:format-number($assetFeature/@relevance_percentage, '0.0')"/>%</span>
                                </xsl:if>
                                <br/>
                              </td>
                            </tr>
                          </xsl:for-each>
                        </xsl:if>
                      </xsl:if>
                    </table>
                  </td>
                </tr>
              </table>
            </html>
          </xsl:if>
        </xsl:template>

        <!-- Get display name of given party id or display the id in case the user/group is inactive -->
        <xsl:function name="my:DisplayNameOrID">
          <xsl:param name="party_id" />
          <xsl:variable name="display_name" select="cs:master-data('party')[@id=$party_id]/@display_name" />
          <xsl:choose>
            <xsl:when test="not($display_name)">
              <xsl:value-of select="if ($party_id=1) then '${system-user}' else concat('User ID ', $party_id)" />
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="$display_name" />
            </xsl:otherwise>
          </xsl:choose>
        </xsl:function>

        <!-- Get localized name of given feature element -->
        <xsl:function name="my:getFeatureName" as="xs:string">
          <xsl:param name="featureElement" as="element(asset_feature)"/>
          <xsl:variable name="featureDefinition" select ="cs:master-data('feature')[@key=$featureElement/@feature]"/>
          <xsl:value-of select="if ($featureDefinition/@label) then $featureDefinition/@label else $featureDefinition/@name"/>
        </xsl:function>

        <!-- Get localized name of given month (integer) -->
        <xsl:function name="my:getMonthName" as="xs:string">
          <xsl:param name="month" as="xs:integer"/>
          <xsl:choose>
            <xsl:when test="$month=1">${january}</xsl:when>
            <xsl:when test="$month=2">${february}</xsl:when>
            <xsl:when test="$month=3">${march}</xsl:when>
            <xsl:when test="$month=4">${april}</xsl:when>
            <xsl:when test="$month=5">${may}</xsl:when>
            <xsl:when test="$month=6">${june}</xsl:when>
            <xsl:when test="$month=7">${july}</xsl:when>
            <xsl:when test="$month=8">${august}</xsl:when>
            <xsl:when test="$month=9">${september}</xsl:when>
            <xsl:when test="$month=10">${october}</xsl:when>
            <xsl:when test="$month=11">${november}</xsl:when>
            <xsl:when test="$month=12">${december}</xsl:when>
          </xsl:choose>
        </xsl:function>

        <!-- Get localized name of a given dot separated value -->
        <xsl:function name="my:getLocalizedValueHierarchical" as="xs:string">
          <xsl:param name="value" as="xs:string"/>
          <xsl:param name="cachedTableName" as="xs:string"/>
          <xsl:param name="cachedTableAttribute" as="xs:string"/>
          <xsl:param name="delimiter" as="xs:string"/>
          <xsl:param name="hideRoot" as="xs:boolean"/>
          <xsl:variable name="items" select="tokenize($value, '\.')"/>
          <xsl:variable name="startItem" select="if ($hideRoot) then 2 else 1"/>
          <xsl:value-of select="string-join(for $x in ($startItem to xs:long(count($items))) return cs:cachelookup($cachedTableName, $cachedTableAttribute, concat(string-join(subsequence($items, 1, $x), '.'), '.'))/@name, $delimiter)"/>
        </xsl:function>

        <!-- Get localized name of a asset feature with a hierarchical value type -->
        <xsl:function name="my:getFeatureValueHierarchical" as="xs:string">
          <xsl:param name="featureElement" as="element(asset_feature)"/>
          <xsl:param name="delimiter" as="xs:string"/>
          <xsl:param name="hideRoot" as="xs:boolean"/>
          <xsl:variable name="items" select="tokenize($featureElement/@value_key, '\.')"/>
          <xsl:variable name="startItem" select="if ($hideRoot) then 2 else 1"/>
          <xsl:value-of select="string-join(for $x in ($startItem to xs:long(count($items))) return cs:cachelookup('feature_value', '@feature', $featureElement/@feature, '@value_key', concat(string-join(subsequence($items, 1, $x), '.'), '.'))/@name, $delimiter)"/>
        </xsl:function>

        <!-- Get localized value of given feature element -->
        <xsl:function name="my:getFeatureValue">
          <xsl:param name="featureElement" as="element(asset_feature)"/>
          <xsl:variable name="feature" select="cs:cachelookup('feature', '@key', $featureElement/@feature)"/>
          <xsl:variable name="type" select="$feature/@value_type"/>
          <xsl:choose>
            <!-- 0: No value -->
            <xsl:when test="$type='0'">
              <xsl:value-of select="''"/>
            </xsl:when>
            <!-- 1: Hierarchical attribute (string) -->
            <xsl:when test="$type='1'">
              <xsl:value-of select="cs:cachelookup('feature_value', '@feature', $featureElement/@feature, '@value_key', $featureElement/@value_key)/@name"/>
            </xsl:when>
            <!-- 2: Enumeration (string) -->
            <xsl:when test="$type='2'">
              <xsl:value-of select="cs:cachelookup('feature_value', '@feature', $featureElement/@feature, '@value_key', $featureElement/@value_key)/@name"/>
            </xsl:when>
            <!-- 3: Integer (long) -->
            <xsl:when test="$type='3'">
              <xsl:choose>
                <xsl:when test="$feature/@value_list_resource_key">
                  <xsl:value-of select="doc(concat('censhare:///service/assets/asset/id/', $featureElement/@asset_id, '/transform;key=censhare:value-list.product-feature;value=', $featureElement/@value_long))/options/option/@display_value"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="string-join((cs:format-number($featureElement/@value_long, '#,###'), my:getFeatureUnitString($featureElement)), ' ')"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <!-- 4: String -->
            <xsl:when test="$type='4'">
              <xsl:choose>
                <!-- censhare URL -->
                <xsl:when test="$featureElement/@feature='censhare:url'">
                  <a class="asset-info-link" target="_blank">
                    <xsl:attribute name="href" select="$featureElement/@value_string"/>
                    <xsl:value-of select="$featureElement/@value_string"/>
                  </a>
                </xsl:when>
                <!-- String -->
                <xsl:otherwise>
                  <xsl:choose>
                    <xsl:when test="$feature/@value_list_resource_key">
                      <xsl:value-of select="doc(concat('censhare:///service/assets/asset/id/', $featureElement/@asset_id, '/transform;key=censhare:value-list.product-feature;value=', $featureElement/@value_string))/options/option/@display_value"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="$featureElement/@value_string"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <!-- 5: Timestamp -->
            <xsl:when test="$type='5'">
              <xsl:value-of select="cs:format-date($featureElement/@value_timestamp, 'relative-short', 'short')"/>
            </xsl:when>
            <!-- 6: Boolean -->
            <xsl:when test="$type='6'">
              <xsl:value-of select="if ($featureElement/@value_long='1') then '${yes}' else '${no}'"/>
            </xsl:when>
            <!-- 7: Double -->
            <xsl:when test="$type='7'">
              <xsl:value-of select="string-join((cs:format-number($featureElement/@value_double, '#,###.###'), my:getFeatureUnitString($featureElement)), ' ')"/>
            </xsl:when>
            <!-- 8: Integer pair -->
            <xsl:when test="$type='8'">
              <xsl:value-of select="string-join((concat(cs:format-number($featureElement/@value_long, '#,###'), '-', cs:format-number($featureElement/@value_long2, '#,###')), my:getFeatureUnitString($featureElement)), ' ')"/>
            </xsl:when>
            <!-- 9: Timestamp pair -->
            <xsl:when test="$type='9'">
              <xsl:value-of select="concat(cs:format-date($featureElement/@value_timestamp, 'relative-short', 'short'), '-', cs:format-date($featureElement/@value_timestamp2, 'relative-short', 'short'))"/>
            </xsl:when>
            <!-- 10: Asset reference -->
            <xsl:when test="$type='10'">
              <xsl:choose>
                <xsl:when test="$feature/@value_list_resource_key">
                  <xsl:value-of select="doc(concat('censhare:///service/assets/asset/id/', $featureElement/@asset_id, '/transform;key=', $feature/@value_list_resource_key, ';value=', $featureElement/@value_asset_id))/options/option/@display_value"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="refAsset" select="cs:get-asset($featureElement/@value_asset_id)"/>
                  <xsl:choose>
                    <xsl:when test="exists($refAsset)">
                      <xsl:value-of select="if ($refAsset/asset_feature[@feature='censhare:name' and @language=$uiLocale]) then $refAsset/asset_feature[@feature='censhare:name' and @language=$uiLocale]/@value_string else $refAsset/@name"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="concat('ID: ', $featureElement/@value_asset_id)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <!-- 11: XML -->
            <xsl:when test="$type='11'">
              <xsl:value-of select="''"/>
            </xsl:when>
            <!-- 12: Double pair -->
            <xsl:when test="$type='12'">
              <xsl:value-of select="string-join((concat(cs:format-number($featureElement/@value_double, '#,###.###'), '-', cs:format-number($featureElement/@value_double2, '#,###.###')), my:getFeatureUnitString($featureElement)), ' ')"/>
            </xsl:when>
            <!-- 13: Date -->
            <xsl:when test="$type='13'">
              <xsl:value-of select="cs:format-date($featureElement/@value_timestamp, 'relative-short', 'none')"/>
            </xsl:when>
            <!-- 14: Date pair -->
            <xsl:when test="$type='14'">
              <xsl:value-of select="concat(cs:format-date($featureElement/@value_timestamp, 'relative-short', 'none'), '-', cs:format-date($featureElement/@value_timestamp2, 'relative-short', 'none'))"/>
            </xsl:when>
            <!-- 15: Time -->
            <xsl:when test="$type='15'">
              <xsl:value-of select="cs:format-date($featureElement/@value_timestamp, 'none', 'short')"/>
            </xsl:when>
            <!-- 16: Time pair -->
            <xsl:when test="$type='16'">
              <xsl:value-of select="concat(cs:format-date($featureElement/@value_timestamp, 'none', 'short'), '-', cs:format-date($featureElement/@value_timestamp2, 'none', 'short'))"/>
            </xsl:when>
            <!-- 17: Year -->
            <xsl:when test="$type='17'">
              <xsl:value-of select="year-from-dateTime($featureElement/@value_timestamp)"/>
            </xsl:when>
            <!-- 18: Year pair -->
            <xsl:when test="$type='18'">
              <xsl:value-of select="concat(year-from-dateTime($featureElement/@value_timestamp), '-', year-from-dateTime($featureElement/@value_timestamp2))"/>
            </xsl:when>
            <!-- 19: Year/month -->
            <xsl:when test="$type='19'">
              <xsl:value-of select="concat(my:getMonthName(month-from-dateTime($featureElement/@value_timestamp)), ' ', year-from-dateTime($featureElement/@value_timestamp))"/>
            </xsl:when>
            <!-- 20: Year/month pair -->
            <xsl:when test="$type='20'">
              <xsl:value-of select="concat(my:getMonthName(month-from-dateTime($featureElement/@value_timestamp)), ' ', year-from-dateTime($featureElement/@value_timestamp), '-', my:getMonthName(month-from-dateTime($featureElement/@value_timestamp2)), ' ', year-from-dateTime($featureElement/@value_timestamp2))"/>
            </xsl:when>
            <!-- 21: Month -->
            <xsl:when test="$type='21'">
              <xsl:value-of select="my:getMonthName(month-from-dateTime($featureElement/@value_timestamp))"/>
            </xsl:when>
            <!-- 22: Month pair -->
            <xsl:when test="$type='22'">
              <xsl:value-of select="concat(my:getMonthName(month-from-dateTime($featureElement/@value_timestamp)), '-', my:getMonthName(month-from-dateTime($featureElement/@value_timestamp2)))"/>
            </xsl:when>
            <!-- 23: Month/day -->
            <xsl:when test="$type='23'">
              <xsl:value-of select="concat(day-from-dateTime($featureElement/@value_timestamp), '. ', my:getMonthName(month-from-dateTime($featureElement/@value_timestamp)))"/>
            </xsl:when>
            <!-- 24: Month/day pair -->
            <xsl:when test="$type='24'">
              <xsl:value-of select="concat(day-from-dateTime($featureElement/@value_timestamp), '. ', my:getMonthName(month-from-dateTime($featureElement/@value_timestamp)), '-', day-from-dateTime($featureElement/@value_timestamp2), '. ', my:getMonthName(month-from-dateTime($featureElement/@value_timestamp2)))"/>
            </xsl:when>
            <!-- 25: Day -->
            <xsl:when test="$type='25'">
              <xsl:value-of select="concat(day-from-dateTime($featureElement/@value_timestamp), '.')"/>
            </xsl:when>
            <!-- 26: Day pair -->
            <xsl:when test="$type='26'">
              <xsl:value-of select="concat(day-from-dateTime($featureElement/@value_timestamp), '.-', day-from-dateTime($featureElement/@value_timestamp2), '.')"/>
            </xsl:when>
            <!-- 27: Duration -->
            <!-- 28: Asset Key -->
            <!-- 29: Asset key ref -->
            <xsl:when test="$type='29'">
              <xsl:choose>
                <xsl:when test="$feature/@value_list_resource_key">
                  <xsl:value-of select="doc(concat('censhare:///service/assets/asset/id/', $featureElement/@asset_id, '/transform;key=', $feature/@value_list_resource_key, ';value=', $featureElement/@value_asset_key_ref))/options/option/@display_value"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="refAsset" select="cs:asset()[@censhare:resource-key=$featureElement/@value_asset_key_ref]"/>
                  <xsl:choose>
                    <xsl:when test="exists($refAsset)">
                      <xsl:value-of select="if ($refAsset/asset_feature[@feature='censhare:name' and @language=$uiLocale]) then $refAsset/asset_feature[@feature='censhare:name' and @language=$uiLocale]/@value_string else $refAsset/@name"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="concat('Resource key: ', $featureElement/@value_asset_key_ref)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="'${none}'"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:function>

        <!-- Get localized value of given feature element -->
        <xsl:function name="my:getFeatureUnitString" as="xs:string">
          <xsl:param name="featureElement" as="element(asset_feature)"/>
          <xsl:value-of select="if ($featureElement/@value_unit) then cs:cachelookup('unit_set_rel', '@unit', $featureElement/@value_unit)/@unit else ()"/>
        </xsl:function>

        <!-- Creates line breaks '<br/>' elements of line feed, line separator and paragraph separator at given text parameter -->
        <xsl:template name="lineBreak">
          <xsl:param name="text" select="."/>
          <xsl:variable name="lines" select="tokenize($text, '\n|\u2028|\u2029')"/> <!-- delimiters: line feed, line separator and paragraph separator -->
          <xsl:for-each select="tokenize($text, '\n|\u2028|\u2029')">
            <xsl:value-of select="."/>
            <xsl:if test="position() != last()">
              <br/>
            </xsl:if>
          </xsl:for-each>
        </xsl:template>

      </xsl:stylesheet>

    </expression>

    <!-- Description for asset budget and costs info -->
    <expression id="asset-budget-and-costs-info">

      <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:my="http://www.censhare.com" version="2.0">
        <xsl:param name="system"/>
        <xsl:variable name="maxPreviewSize" select="32"/>
        <xsl:variable name="assetCount" select="count(asset)"/>
        <xsl:variable name="partyID" select="$system/system/party/@id"/>
        <xsl:variable name="urlPrefix" select="$system/system/@censhare-url-prefix"/>
        <xsl:variable name="lafBackground" select="$system/system/laf/@background"/>
        <xsl:variable name="lafIconset" select="$system/system/laf/@icon-set"/>

        <xsl:template match="/">
          <xsl:variable name="plannedCostsFeatures" select="asset/asset_feature[@feature='censhare:costs-type' and @value_key='censhare:costs-planned']"/>
          <xsl:variable name="actualCostsFeatures" select="asset/asset_feature[@feature='censhare:costs-type' and @value_key='censhare:costs-actual']"/>
          <xsl:if test="$assetCount > 0 and ($plannedCostsFeatures or $actualCostsFeatures)">
            <html>
              <table cellpadding="1" valign="top" class="asset-info-table">
                <tr>
                  <td>
                    <table cellpadding="0">
                      <xsl:variable name="plannedCosts" select="my:getCostsOfAssets(asset, 'censhare:costs-planned', false())"/>
                      <xsl:variable name="actualCosts" select="my:getCostsOfAssets(asset, 'censhare:costs-actual', false())"/>
                      <xsl:variable name="actualChildCosts" select="my:getCostsOfAssets(asset, 'censhare:costs-actual', true()) - $actualCosts"/>
                      <xsl:variable name="actualTotalCosts" select="$actualCosts + $actualChildCosts"/>
                      <tr>
                        <td/>
                        <td class="asset-info-label-inline" colspan="2" align="right">${costs}</td>
                        <xsl:if test="$plannedCosts">
                          <td class="asset-info-label-inline" colspan="2" align="right">${budget}</td>
                        </xsl:if>
                      </tr>
                      <tr>
                        <td class="asset-info-label">${asset}:</td>
                        <td><xsl:value-of select="if ($actualCosts) then '&#160;€&#160;' else ()"/></td>
                        <td class="asset-info-value" align="right">
                          <xsl:value-of select="cs:format-number($actualCosts, '#,##0.00')"/><br/>
                        </td>
                        <td><xsl:value-of select="if ($plannedCosts) then '&#160;&#160;&#160;€&#160;' else ()"/></td>
                        <td class="asset-info-value" align="right">
                          <xsl:value-of select="cs:format-number($plannedCosts, '#,##0.00')"/><br/>
                        </td>
                      </tr>
                      <xsl:if test="$actualChildCosts">
                        <tr>
                          <td class="asset-info-label">${related-assets}:</td>
                          <td><xsl:value-of select="if ($actualChildCosts) then '&#160;€&#160;' else ()"/></td>
                          <td class="asset-info-value" align="right">
                            <xsl:value-of select="cs:format-number($actualChildCosts, '#,##0.00')"/><br/>
                          </td>
                        </tr>
                      </xsl:if>
                      <tr>
                        <td class="asset-info-label">${total}:</td>
                        <td><xsl:value-of select="if ($actualTotalCosts) then '&#160;€&#160;' else ()"/></td>
                        <td class="asset-info-value" align="right">
                          <xsl:value-of select="cs:format-number($actualTotalCosts, '#,##0.00')"/><br/>
                        </td>
                        <td><xsl:value-of select="if ($plannedCosts) then '&#160;&#160;&#160;€&#160;' else ()"/></td>
                        <td class="asset-info-value" align="right">
                          <xsl:value-of select="cs:format-number($plannedCosts, '#,##0.00')"/><br/>
                        </td>
                      </tr>
                      <xsl:if test="$plannedCosts">
                        <tr>
                          <xsl:variable name="isOverPlanned" select="$plannedCosts - $actualTotalCosts lt 0"/>
                          <xsl:if test="$isOverPlanned">
                            <xsl:attribute name="style" select="'color:red;'"/>
                          </xsl:if>
                          <td class="asset-info-label">${result}:</td>
                          <td><xsl:value-of select="'&#160;€&#160;'"/></td>
                          <td class="asset-info-value" align="right">
                            <xsl:value-of select="cs:format-number(abs($plannedCosts - $actualTotalCosts), '#,##0.00')"/><br/>
                          </td>
                          <td colspan="2"><xsl:value-of select="concat('&#160;&#160;&#160;', if ($isOverPlanned) then '${above}' else '${below}')"/></td>
                        </tr>
                      </xsl:if>
                    </table>
                  </td>
                </tr>
              </table>
            </html>
          </xsl:if>
        </xsl:template>

        <!-- Get costs of given assets -->
        <!-- if includeChildAssets, then recursive all child assets are added, if -->
        <!-- - a actual asset relation exists -->
        <!-- - asset is an issue and target asset element relations exists (only placed assets in planning are added) -->
        <!-- - asset is not an issue and target asset relations exists (all target related assets are added) -->
        <xsl:function name="my:getCostsOfAssets" as="xs:double">
          <xsl:param name="assets" as="element(asset)*"/>
          <xsl:param name="costType" as="xs:string"/> <!-- "censhare:costs-planned" or "censhare:costs-actual" -->
          <xsl:param name="includeChildAssets" as="xs:boolean"/>
          <xsl:variable name="costsFeatures" select="$assets/asset_feature[@feature='censhare:costs-type' and @value_key=$costType]"/>
          <!--xsl:message select="concat('### check costs of assets (', string-join(for $x in $assets return $x/@id, ', '), '), costType=', $costType, ', features found=', boolean($costsFeatures))"/-->
          <xsl:variable name="values" as="xs:double*">
            <xsl:if test="exists($costsFeatures)">
              <xsl:variable name="value" select="my:getCostsOfAssetFeatures($costsFeatures)"/>
              <xsl:sequence select="$value"/>
              <!--xsl:message select="concat('### costs of assets (', string-join(for $x in $assets return $x/@id, ', '), ')=', $value)"/-->
            </xsl:if>
            <xsl:if test="$includeChildAssets">
              <xsl:variable name="childAssetIds" select="distinct-values(($assets/child_asset_rel[@key='actual.']/@child_asset, for $x in $assets return if (starts-with($x/@type, 'issue.')) then $x/child_asset_element_rel[@key='target.']/@child_asset else $x/child_asset_rel[@key='target.']/@child_asset))"/>
              <!--xsl:message select="concat('### check child assets (', string-join($childAssetIds, ', '), ')')"/-->
              <xsl:for-each select="$childAssetIds">
                <xsl:variable name="childAsset" select="cs:get-asset(.)"/>
                <xsl:if test="$childAsset">
                  <xsl:variable name="value" select="my:getCostsOfAssets($childAsset, $costType, true())"/>
                  <xsl:sequence select="$value"/>
                  <!--xsl:message select="concat('### costs of child asset (', $childAsset/@id, ')=', $value)"/-->
                </xsl:if>
              </xsl:for-each>
            </xsl:if>
          </xsl:variable>
          <xsl:value-of select="sum($values)"/>
        </xsl:function>

        <!-- Get costs of given asset features -->
        <xsl:function name="my:getCostsOfAssetFeatures" as="xs:double">
          <xsl:param name="parentAssetFeatures" as="element(asset_feature)*"/>
          <xsl:variable name="values" as="xs:double*">
            <xsl:for-each select="$parentAssetFeatures">
              <xsl:variable name="amountFeature" select="asset_feature[@feature='censhare:costs-amount']"/>
              <xsl:variable name="unitKey" select="asset_feature[@feature='censhare:costs-unit-key']/@value_string"/>
              <xsl:choose>
                <xsl:when test="$amountFeature">
                  <xsl:sequence select="$amountFeature/@value_double"/>
                </xsl:when>
                <xsl:when test="$unitKey">
                  <xsl:variable name="unitCount" select="asset_feature[@feature='censhare:costs-unit-count']/@value_double"/>
                  <xsl:variable name="resourceAssetID" select="asset_feature[@feature='censhare:costs-resource']/@value_asset_id"/>
                  <xsl:variable name="resourceCostsFeature" select="cs:get-asset($resourceAssetID)/asset_feature[@feature='censhare:resource-cost-unit' and @value_key=$unitKey]/asset_feature[@feature='censhare:resource-costs']"/>
                  <xsl:sequence select="$unitCount * $resourceCostsFeature/@value_double"/>
                </xsl:when>
              </xsl:choose>
            </xsl:for-each>
          </xsl:variable>
          <xsl:value-of select="sum($values)"/>
        </xsl:function>

      </xsl:stylesheet>

    </expression>

    <!-- Description for asset more info -->
    <expression id="asset-more-info">

        <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:my="http://www.censhare.com" version="2.0">
          <xsl:param name="system"/>
          <xsl:variable name="maxPreviewSize" select="32"/>
          <xsl:variable name="assetCount" select="count(asset)"/>
          <xsl:variable name="partyID" select="$system/system/party/@id"/>
          <xsl:variable name="uiLocale" select="$system/system/@locale"/>
          <xsl:variable name="urlPrefix" select="$system/system/@censhare-url-prefix"/>
          <xsl:variable name="lafBackground" select="$system/system/laf/@background"/>
          <xsl:variable name="lafIconset" select="$system/system/laf/@icon-set"/>


          <xsl:template match="/">
            <xsl:if test="$assetCount > 0">
              <html>
                <table cellpadding="1" valign="top" class="asset-info-table">
                  <tr>
                    <td>
                      <table cellpadding="0">
                        <!-- Variant info (show only, if one asset is selected) -->
                        <xsl:if test="$assetCount=1">
                          <xsl:variable name="parentRelations" select="asset[1]/parent_asset_rel[starts-with(@key, 'variant.')]"/>
                          <xsl:variable name="childRelations" select="asset[1]/child_asset_rel[starts-with(@key, 'variant.')]"/>
                          <xsl:if test="$parentRelations or $childRelations">
                            <tr>
                              <td class="asset-info-label">${variant}:</td>
                              <td class="asset-info-value">
                                <table cellpadding="0">
                                  <xsl:if test="$parentRelations">
                                    <tr>
                                      <td class="asset-info-label">⬆</td>
                                      <td class="asset-info-value">
                                        <xsl:value-of select="my:getVariantTypeName($parentRelations[1]/@key)"/>
                                        <xsl:variable name="transformationAssetKey" select="$parentRelations[1]/asset_rel_feature[@feature='censhare:transformation-asset-key'][1]/@value_string"/>
                                        <xsl:variable name="isAutomatic" select="$parentRelations[1]/@variant_automatic='1'"/>
                                        <xsl:variable name="isUpdateFlag" select="$parentRelations[1]/@variant_update_flag='1'"/>
                                        <xsl:if test="$transformationAssetKey or $isAutomatic or $isUpdateFlag">
                                          <xsl:text> (</xsl:text>
                                          <xsl:variable name="transformationAsset" select="cs:get-asset(cs:cachelookup('resource_asset', '@key', $transformationAssetKey)/@asset_id)"/>
                                          <xsl:if test="$transformationAsset">
                                            <img width="12" height="12">
                                              <xsl:attribute name="src" select="concat($urlPrefix, 'assets/asset/id/', $transformationAsset/@id, '/icon/iconset/', $lafIconset, '/background/', $lafBackground, '/file')"/>
                                            </img>
                                            <xsl:value-of select="concat('&#160;', $transformationAsset/@name)"/>
                                          </xsl:if>
                                          <xsl:if test="$isAutomatic">
                                            <xsl:value-of select="concat(if ($transformationAsset) then ', ' else '', '${automatic}')"/>
                                          </xsl:if>
                                          <xsl:if test="$isUpdateFlag">
                                            <xsl:value-of select="concat(if ($transformationAsset or $isAutomatic) then ', ' else '', '${update-flag}')"/>
                                          </xsl:if>
                                          <xsl:text>)</xsl:text>
                                        </xsl:if>
                                      </td>
                                    </tr>
                                  </xsl:if>
                                  <xsl:if test="$childRelations">
                                    <xsl:variable name="variantKeys" select="distinct-values($childRelations/@key)"/>
                                    <tr>
                                      <td class="asset-info-label">⬇</td>
                                      <td class="asset-info-value">
                                        <xsl:for-each select="$variantKeys">
                                          <xsl:variable name="key" select="."/>
                                          <xsl:value-of select="concat(count($childRelations[@key=$key]), 'x ', my:getVariantTypeName($key))"/>
                                          <br/>
                                        </xsl:for-each>
                                      </td>
                                    </tr>
                                  </xsl:if>
                                </table>
                              </td>
                            </tr>
                          </xsl:if>
                        </xsl:if>
                        <!-- Placements info (show only, if one asset is selected) -->
                        <xsl:if test="$assetCount=1">
                          <xsl:variable name="parentRelations" select="asset[1]/parent_asset_rel[starts-with(@key, 'actual.') and @parent_currversion='0']"/>
                          <xsl:variable name="childRelations" select="asset[1]/child_asset_rel[starts-with(@key, 'actual.') and @child_currversion='0']"/>
                          <xsl:if test="$parentRelations or $childRelations">
                            <tr>
                              <td class="asset-info-label">${placements}:</td>
                              <td class="asset-info-value">
                                <table cellpadding="0">
                                  <xsl:if test="$parentRelations">
                                    <tr>
                                      <td class="asset-info-label">⬆</td>
                                      <td class="asset-info-value">
                                        <xsl:value-of select="concat(count($parentRelations), ' ', if (count($parentRelations) > 1) then '${assets}' else '${asset}')"/>
                                      </td>
                                    </tr>
                                  </xsl:if>
                                  <xsl:if test="$childRelations">
                                    <tr>
                                      <td class="asset-info-label">⬇</td>
                                      <td class="asset-info-value">
                                        <xsl:value-of select="concat(count($childRelations), ' ', if (count($childRelations) > 1) then '${assets}' else '${asset}')"/>
                                      </td>
                                    </tr>
                                  </xsl:if>
                                </table>
                              </td>
                            </tr>
                          </xsl:if>
                        </xsl:if>
                        <!-- YouTube (show only, if one asset is selected) -->
                        <xsl:if test="$assetCount=1">
                          <xsl:variable name="youtubeID" select="asset[1]/asset_feature[@feature='censhare:youtube.id']/@value_string"/>
                          <xsl:variable name="youtubeTitle" select="asset[1]/asset_feature[@feature='censhare:youtube.title']/@value_string"/>
                          <xsl:variable name="youtubeDescription" select="asset[1]/asset_feature[@feature='censhare:youtube.description']/@value_string"/>
                          <xsl:variable name="youtubeKeywords" select="asset[1]/asset_feature[@feature='censhare:youtube.keywords']/@value_string"/>
                          <xsl:variable name="youtubeCategory" select="asset[1]/asset_feature[@feature='censhare:youtube.category']"/>
                          <xsl:variable name="youtubeOAuth" select="asset[1]/asset_feature[@feature='censhare:youtube.oauth-token']"/>
                          <xsl:if test="$youtubeID or $youtubeTitle or $youtubeDescription or $youtubeKeywords or $youtubeCategory or $youtubeOAuth">
                            <tr>
                              <td class="asset-info-label">YouTube:</td>
                              <td class="asset-info-value">
                                <table cellpadding="0">
                                  <xsl:if test="$youtubeID">
                                    <tr>
                                      <td class="asset-info-value2">${url}:&#x00A0;&#x00A0;</td>
                                      <td class="asset-info-value">
                                        <a class="asset-info-link" target="_blank">
                                          <xsl:attribute name="href" select="concat('http://www.youtube.com/watch?v=', $youtubeID)"/>
                                          <xsl:value-of select="concat('www.youtube.com/watch?v=', $youtubeID)"/>
                                        </a>
                                      </td>
                                    </tr>
                                  </xsl:if>
                                  <xsl:if test="$youtubeTitle">
                                    <tr>
                                      <td class="asset-info-value2">${title}:&#x00A0;&#x00A0;</td>
                                      <td class="asset-info-value">
                                        <xsl:value-of select="$youtubeTitle"/>
                                      </td>
                                    </tr>
                                  </xsl:if>
                                  <xsl:if test="$youtubeDescription">
                                    <tr>
                                      <td class="asset-info-value2">${description}:&#x00A0;&#x00A0;</td>
                                      <td class="asset-info-value">
                                        <xsl:value-of select="$youtubeDescription"/>
                                      </td>
                                    </tr>
                                  </xsl:if>
                                  <xsl:if test="$youtubeKeywords">
                                    <tr>
                                      <td class="asset-info-value2">${keywords}:&#x00A0;&#x00A0;</td>
                                      <td class="asset-info-value">
                                        <xsl:value-of select="$youtubeKeywords"/>
                                      </td>
                                    </tr>
                                  </xsl:if>
                                  <xsl:if test="$youtubeCategory">
                                    <tr>
                                      <td class="asset-info-value2">${category}:&#x00A0;&#x00A0;</td>
                                      <td class="asset-info-value">
                                        <xsl:value-of select="my:getFeatureValue($youtubeCategory)"/>
                                      </td>
                                    </tr>
                                  </xsl:if>
                                  <xsl:if test="$youtubeOAuth">
                                    <tr>
                                      <td class="asset-info-value2">${authentication}:&#x00A0;&#x00A0;</td>
                                      <td class="asset-info-value">
                                        <xsl:value-of select="concat('${created} ', cs:format-date($youtubeOAuth/@timestamp, 'relative-short', 'short'))"/>
                                      </td>
                                    </tr>
                                  </xsl:if>
                                </table>
                              </td>
                            </tr>
                          </xsl:if>
                        </xsl:if>
                        <!-- Facebook (show only, if one asset is selected) -->
                        <xsl:if test="$assetCount=1">
                          <xsl:variable name="facebookID" select="asset[1]/asset_feature[@feature='censhare:facebook.id']/@value_string"/>
                          <xsl:variable name="facebookMessage" select="asset[1]/asset_feature[@feature='censhare:facebook.message']/@value_string"/>
                          <xsl:variable name="facebookOAuth" select="asset[1]/asset_feature[@feature='censhare:facebook.oauth-token']"/>
                          <xsl:if test="$facebookID or $facebookMessage or $facebookOAuth">
                            <tr>
                              <td class="asset-info-label">Facebook:</td>
                              <td class="asset-info-value">
                                <table cellpadding="0">
                                  <xsl:if test="$facebookID">
                                    <tr>
                                      <td class="asset-info-value2">${url}:&#x00A0;&#x00A0;</td>
                                      <td class="asset-info-value">
                                        <a class="asset-info-link" target="_blank">
                                          <xsl:attribute name="href" select="concat('http://www.facebook.com/', $facebookID)"/>
                                          <xsl:value-of select="concat('www.facebook.com/', $facebookID)"/>
                                        </a>
                                      </td>
                                    </tr>
                                  </xsl:if>
                                  <xsl:if test="$facebookMessage">
                                    <tr>
                                      <td class="asset-info-value2">${message}:&#x00A0;&#x00A0;</td>
                                      <td class="asset-info-value">
                                        <xsl:value-of select="$facebookMessage"/>
                                      </td>
                                    </tr>
                                  </xsl:if>
                                  <xsl:if test="$facebookOAuth">
                                    <tr>
                                      <td class="asset-info-value2">${authentication}:&#x00A0;&#x00A0;</td>
                                      <td class="asset-info-value">
                                        <xsl:value-of select="concat('${created} ', cs:format-date($facebookOAuth/@timestamp, 'relative-short', 'short'))"/>
                                      </td>
                                    </tr>
                                  </xsl:if>
                                </table>
                              </td>
                            </tr>
                          </xsl:if>
                        </xsl:if>
                        <!-- Twitter (show only, if one asset is selected) -->
                        <xsl:if test="$assetCount=1">
                          <xsl:variable name="twitterID" select="asset[1]/asset_feature[@feature='censhare:twitter.id']/@value_string"/>
                          <xsl:variable name="twitterScreenName" select="asset[1]/asset_feature[@feature='censhare:twitter.screen-name']/@value_string"/>
                          <xsl:variable name="twitterMessage" select="asset[1]/asset_feature[@feature='censhare:twitter.message']/@value_string"/>
                          <xsl:variable name="twitterOAuth" select="asset[1]/asset_feature[@feature='censhare:twitter.oauth-token']"/>
                          <xsl:if test="($twitterID and $twitterScreenName) or $twitterMessage or $twitterOAuth">
                            <tr>
                              <td class="asset-info-label">Twitter:</td>
                              <td class="asset-info-value">
                                <table cellpadding="0">
                                  <xsl:if test="$twitterID and $twitterScreenName">
                                    <tr>
                                      <td class="asset-info-value2">${url}:&#x00A0;&#x00A0;</td>
                                      <td class="asset-info-value">
                                        <a class="asset-info-link" target="_blank">
                                          <xsl:attribute name="href" select="concat('https://twitter.com/', $twitterScreenName, '/status/', $twitterID)"/>
                                          <xsl:value-of select="concat('twitter.com/', $twitterScreenName, '/status/', $twitterID)"/>
                                        </a>
                                      </td>
                                    </tr>
                                  </xsl:if>
                                  <xsl:if test="$twitterMessage">
                                    <tr>
                                      <td class="asset-info-value2">${message}:&#x00A0;&#x00A0;</td>
                                      <td class="asset-info-value">
                                        <xsl:value-of select="$twitterMessage"/>
                                      </td>
                                    </tr>
                                  </xsl:if>
                                  <xsl:if test="$twitterOAuth">
                                    <tr>
                                      <td class="asset-info-value2">${authentication}:&#x00A0;&#x00A0;</td>
                                      <td class="asset-info-value">
                                        <xsl:value-of select="concat('${created} ', cs:format-date($twitterOAuth/@timestamp, 'relative-short', 'short'))"/>
                                      </td>
                                    </tr>
                                  </xsl:if>
                                </table>
                              </td>
                            </tr>
                          </xsl:if>
                        </xsl:if>
                        <!-- Resource (show only, if one asset is selected) -->
                        <xsl:if test="$assetCount=1">
                          <xsl:variable name="resourceKey" select="asset[1]/asset_feature[@feature='censhare:resource-key']"/>
                          <xsl:if test="$resourceKey">
                            <xsl:variable name="resourceMeta" select="asset[1]/asset_feature[@feature='censhare:resource-meta']"/>
                            <tr>
                              <td class="asset-info-label">${resource}:</td>
                              <td class="asset-info-value">${quote-start}<xsl:value-of select="$resourceKey/@value_string"/>${quote-end} - <xsl:value-of select="upper-case(string-join($resourceMeta/xmldata/target-formats/format/@key, ', '))"/></td>
                            </tr>
                            <!-- Resource enabled -->
                            <xsl:variable name="resourceEnabled" select="asset[1]/asset_feature[@feature='censhare:resource-enabled']"/>
                            <tr>
                              <td class="asset-info-label">${enabled}:</td>
                              <td class="asset-info-value">
                                <xsl:value-of select="if ($resourceEnabled and $resourceEnabled/@value_long='0') then '${no}' else '${yes}'"/>
                              </td>
                            </tr>
                            <!-- Resource in cached tables -->
                            <xsl:variable name="resourceInCachedTables" select="asset[1]/asset_feature[@feature='censhare:resource-in-cached-tables']"/>
                            <tr>
                              <td class="asset-info-label">${cached-tables}:</td>
                              <td class="asset-info-value">
                                <xsl:value-of select="if ($resourceInCachedTables and $resourceInCachedTables/@value_long='0') then '${no}' else '${yes}'"/>
                              </td>
                            </tr>
                            <!-- Resource usages -->
                            <xsl:variable name="usageKeys" select="asset[1]/asset_feature[@feature='censhare:resource-usage']"/>
                            <xsl:if test="$usageKeys">
                              <tr>
                                <td class="asset-info-label">${usages}:</td>
                                <td class="asset-info-value">
                                  <xsl:for-each select="$usageKeys">
                                    <xsl:value-of select="my:getFeatureValue(.)"/>
                                    <br/>
                                  </xsl:for-each>
                                </td>
                              </tr>
                            </xsl:if>
                            <!-- Module source -->
                            <xsl:variable name="moduleSource" select="asset[1]/asset_feature[@feature='censhare:module-asset-source']"/>
                            <xsl:if test="$moduleSource">
                              <tr>
                                <td class="asset-info-label">${source}:</td>
                                <td class="asset-info-value"><xsl:value-of select="$moduleSource/@value_string"/></td>
                              </tr>
                            </xsl:if>
                          </xsl:if>
                        </xsl:if>
                        <!-- Download (show only, if one asset is selected) -->
                        <xsl:if test="$assetCount=1">
                          <xsl:variable name="downloadHash" select="asset[1]/asset_feature[@feature='censhare:download-hash']"/>
                          <xsl:if test="$downloadHash">
                            <xsl:variable name="expiryDate" select="asset[1]/asset_feature[@feature='censhare:expiry-date']"/>
                            <tr>
                              <td class="asset-info-label">${download}:</td>
                              <td class="asset-info-value">
                                <xsl:value-of select="concat('/tempDownload/', $downloadHash/@value_string)"/>
                                <span class="asset-info-label-inline"> ${until-(lowercase)} </span>
                                <xsl:value-of select="cs:format-date($expiryDate/@value_timestamp, 'relative-short', 'short')"/>
                              </td>
                            </tr>
                          </xsl:if>
                        </xsl:if>
                        <!-- Fonts (show only, if one asset is selected) -->
                        <xsl:if test="$assetCount=1">
                          <xsl:variable name="fontAssetFeatures" select="asset[1]/asset_feature[@feature='censhare:font.name']"/>
                          <xsl:if test="$fontAssetFeatures">
                            <tr>
                              <td class="asset-info-label">${fonts}:</td>
                              <td class="asset-info-value">
                                <xsl:for-each select="$fontAssetFeatures">
                                  <xsl:variable name="fontFamily" select="asset_feature[@feature='censhare:font.family']/@value_string"/>
                                  <xsl:variable name="fontFace" select="asset_feature[@feature='censhare:font.face']/@value_string"/>
                                  <xsl:value-of select="string-join(($fontFamily, if (ends-with($fontFamily, $fontFace)) then () else $fontFace), ' ')"/>
                                  <br/>
                                </xsl:for-each>
                              </td>
                            </tr>
                          </xsl:if>
                        </xsl:if>
                        <!-- Search (show only, if one asset is selected) -->
                        <xsl:if test="$assetCount=1">
                          <xsl:variable name="query" select="asset[1]/search_xml/query"/>
                          <xsl:if test="$query">
                            <tr>
                              <td class="asset-info-label">${search}:</td>
                              <td class="asset-info-value">
                                <xsl:call-template name="query">
                                  <xsl:with-param name="type" select="'and'"/>
                                  <xsl:with-param name="element" select="$query"/>
                                </xsl:call-template>
                              </td>
                            </tr>
                          </xsl:if>
                        </xsl:if>
                        <!-- Cancellation (show only, if all assets have same value) -->
                        <xsl:variable name="values" select="asset/@cancelled"/>
                        <xsl:if test="count($values)=$assetCount and cs:equal-values($values)">
                          <tr>
                            <td class="asset-info-label">${cancellation}:</td>
                            <td class="asset-info-value"><xsl:value-of select="if ($values[1]='1') then '${cancelled}' else ''"/></td>
                          </tr>
                        </xsl:if>
                        <!-- Archive (show only, if all assets have values > 0 and same value) -->
                        <xsl:variable name="values" select="asset/@storage_state"/>
                        <xsl:if test="count($values)=$assetCount and $values[1]>0 and cs:equal-values($values)">
                          <tr>
                            <td class="asset-info-label">${archive}:</td>
                            <td class="asset-info-value">
                              <xsl:variable name="x" select="$values[1]"/>
                              <xsl:choose>
                                <xsl:when test="$x='1'">${archived}</xsl:when>
                                <xsl:when test="$x='2'">${proposed-for-archiving}</xsl:when>
                                <xsl:when test="$x='3'">${marked-for-archiving}</xsl:when>
                                <xsl:when test="$x='4'">${archiving-in-progress}</xsl:when>
                                <xsl:when test="$x='5'">${proposed-for-dearchiving}</xsl:when>
                                <xsl:when test="$x='6'">${marked-for-dearchiving}</xsl:when>
                                <xsl:when test="$x='7'">${dearchiving-in-progress}</xsl:when>
                              </xsl:choose>
                            </td>
                          </tr>
                        </xsl:if>
                        <!-- Deletion (show only, if all assets have values > 0 and same value) -->
                        <xsl:variable name="values" select="asset/@deletion"/>
                        <xsl:if test="count($values)=$assetCount and $values[1]>0 and cs:equal-values($values)">
                          <tr>
                            <td class="asset-info-label">${deletion}:</td>
                            <td class="asset-info-value">
                              <xsl:variable name="x" select="$values[1]"/>
                              <xsl:choose>
                                <xsl:when test="$x='1'">${marked-for-deletion}</xsl:when>
                                <xsl:when test="$x='2'">${cannot-delete}</xsl:when>
                                <xsl:when test="$x='3'">${delete-physically}</xsl:when>
                                <xsl:when test="$x='4'">${proposed-for-deletion}</xsl:when>
                              </xsl:choose>
                            </td>
                          </tr>
                        </xsl:if>
                        <!-- Planning mode  -->
                        <xsl:if test="$assetCount=1">
                          <xsl:variable name="planningMode" select="asset/asset_feature[@feature='censhare:planning-mode']/@value_key"/>
                          <xsl:if test="$planningMode">
                            <tr>
                              <td class="asset-info-label">${planning-mode}:</td>
                              <td class="asset-info-value">
                                <xsl:value-of select="cs:cachelookup('feature_value', '@feature', 'censhare:planning-mode', '@value_key', $planningMode)/@name"/>
                              </td>
                            </tr>
                          </xsl:if>
                        </xsl:if>
                        <!-- Files -->
                        <xsl:variable name="storageItems" select="asset/storage_item"/>
                        <xsl:variable name="masterStorageItems" select="$storageItems[@key='master']"/>
                        <xsl:variable name="defaultStorageKeys" select="('master', 'preview', 'thumbnail', 'text-preview', 'content')"/>
                        <xsl:variable name="additionalStorageItems" select="$storageItems[empty(index-of($defaultStorageKeys, @key))]"/>
                        <xsl:if test="$masterStorageItems or $additionalStorageItems">
                          <tr>
                            <td class="asset-info-label">${files}:</td>
                            <td class="asset-info-value">
                              <!-- Master storage items -->
                              <xsl:choose>
                                <xsl:when test="$masterStorageItems">
                                  <xsl:if test="$assetCount = 1">
                                    <xsl:for-each select="$masterStorageItems">
                                      <xsl:value-of select="cs:cachelookup('mimetype', '@mimetype', @mimetype)/@name"/>
                                      <xsl:value-of select="if (@mimetype = 'application/indesign' and @app_version) then (for $x in @app_version return (substring-after(cs:master-data('indesign_version')[app_versions/app_version/@version=$x and @edition='standard']/applications/indesign/@name, 'Adobe InDesign'))) else ''"/>
                                      <xsl:value-of select="if (@filelength > 0) then concat(', ', my:getFileSizeString(@filelength)) else ''"/>
                                      <xsl:variable name="elementIDx" select="@element_idx"/>
                                      <xsl:variable name="assetElement" select="../asset_element[@idx=$elementIDx and @key='actual.']"/>
                                      <xsl:value-of select="if ($assetElement/@width_mm and $assetElement/@height_mm) then concat(', ', cs:format-number($assetElement/@width_mm, '#,##0.0'), 'x', cs:format-number($assetElement/@height_mm, '#,##0.0'), ' mm') else ''"/>
                                      <xsl:value-of select="if (@width_px and @height_px) then concat(', ', cs:format-number(@width_px, '#,###'), 'x', cs:format-number(@height_px, '#,###'), ' ${pixels}') else ''"/>
                                      <xsl:value-of select="if (@dpi) then concat(', ', cs:format-number(@dpi, '#,###'), ' ${dpi}') else ''"/>
                                      <xsl:value-of select="if (@duration_sec) then concat(', ${duration} ', my:getDurationString(@duration_sec)) else ''"/>
                                      <xsl:value-of select="if (@audio_format) then concat(', ', @audio_format) else ''"/>
                                      <xsl:value-of select="if (@video_format) then concat(', ', @video_format) else ''"/>
                                      <xsl:value-of select="if (@frames_per_second) then concat(', ', round(@frames_per_second), ' fps') else ''"/>
                                      <xsl:value-of select="if (@bitrate_mbps) then concat(', ', cs:format-number(@bitrate_mbps, '#,##0.0##'), ' Mbit/s') else ''"/>
                                      <xsl:value-of select="if (@color) then concat(', ', for $x in @color return if ($x='bw') then '${bitmap}' else if ($x='gs') then '${grey}' else if ($x='idx') then '${indexed}' else if ($x='rgb') then '${rgb}' else if ($x='lab') then '${lab}' else if ($x='cmyk') then '${cmyk}' else '$x') else ''"/>
                                      <xsl:value-of select="if (@charcount) then concat(', ', cs:format-number(@charcount, '#,###'), ' ${chars}') else ''"/>
                                      <xsl:value-of select="if (@wordcount) then concat(', ', cs:format-number(@wordcount, '#,###'), ' ${words}') else ''"/>
                                      <xsl:value-of select="if (@linecount) then concat(', ', cs:format-number(@linecount, '#,###'), ' ${lines}') else ''"/>
                                      <br/>
                                    </xsl:for-each>
                                  </xsl:if>
                                  <xsl:if test="$assetCount > 1 or count($masterStorageItems) > 1">
                                    <xsl:if test="$assetCount = 1">
                                      <span class="asset-info-label-inline">${sum}: </span>
                                    </xsl:if>
                                    <xsl:variable name="fileCount" select="count($masterStorageItems)"/>
                                    <xsl:variable name="charCount" select="sum($masterStorageItems/@charcount)"/>
                                    <xsl:variable name="wordCount" select="sum($masterStorageItems/@wordcount)"/>
                                    <xsl:variable name="lineCount" select="sum($masterStorageItems/@linecount)"/>
                                    <xsl:value-of select="concat(if ($fileCount=1) then '1 ${file}' else concat($fileCount, ' ${files}'), ', ', my:getFileSizeString(sum($masterStorageItems/@filelength)), if ($charCount > 0) then concat(', ', cs:format-number($charCount, '#,###'), ' ${chars}') else '', if ($wordCount > 0) then concat(', ', cs:format-number($wordCount, '#,###'), ' ${words}') else '', if ($lineCount > 0) then concat(', ', cs:format-number($lineCount, '#,###'), ' ${lines}') else '')"/>
                                    <br/>
                                 </xsl:if>
                                </xsl:when>
                                <xsl:otherwise>${no-master-file}<br/></xsl:otherwise>
                              </xsl:choose>
                              <!-- Additional storage items -->
                              <xsl:for-each select="distinct-values($additionalStorageItems/@key)">
                                <xsl:variable name="storageKey" select="."/>
                                <xsl:variable name="storageItems" select="$additionalStorageItems[@key=$storageKey]"/>
                                <xsl:value-of select="concat(count($storageItems),'x ', cs:cachelookup('storage_keydef', '@key', $storageKey)/@name, ', ', my:getFileSizeString(sum($storageItems/@filelength)))"/>
                                <br/>
                              </xsl:for-each>
                            </td>
                          </tr>
                        </xsl:if>
                        <!-- Production flags -->
                        <xsl:if test="$assetCount=1">
                          <xsl:variable name="featureList" select="asset/asset_feature[@feature='censhare:asset-flag']"/>
                          <xsl:if test="$featureList">
                            <tr>
                              <td class="asset-info-label">${production-flags}:</td>
                              <td class="asset-info-value"><xsl:value-of select="string-join(for $x in $featureList return my:getFeatureValue($x), ', ')"/></td>
                            </tr>
                          </xsl:if>
                        </xsl:if>
                        <!-- Categories -->
                        <xsl:if test="$assetCount=1">
                          <xsl:variable name="featureList" select="asset/asset_feature[@feature='censhare:category']"/>
                          <xsl:if test="$featureList">
                            <tr>
                              <td class="asset-info-label">${categories}:</td>
                              <td class="asset-info-value"><xsl:value-of select="string-join(for $x in $featureList return my:getFeatureValue($x), ', ')"/></td>
                            </tr>
                          </xsl:if>
                        </xsl:if>
                        <!-- Category features -->
                        <xsl:if test="$assetCount=1">
                          <xsl:variable name="featureList" select="asset/asset_feature[cs:cachelookup('feature', '@key', @feature, '@type', 'censhare:category-feature')]"/>
                          <xsl:if test="$featureList">
                            <tr>
                              <td class="asset-info-label">${category-features}:</td>
                              <td class="asset-info-value">
                                <xsl:for-each select="$featureList">
                                  <span class="asset-info-label-inline"><xsl:value-of select="my:getFeatureName(.)"/>: </span>
                                  <xsl:copy-of select="my:getFeatureValue(.)"/>
                                  <br/>
                                </xsl:for-each>
                              </td>
                            </tr>
                          </xsl:if>
                        </xsl:if>
                        <!-- Features -->
                        <xsl:if test="$assetCount=1">
                          <xsl:variable name="assetFeatures" select="asset//asset_feature[cs:cachelookup('feature', '@key', @feature, '@isassetinfo', '2')]"/>
                          <xsl:if test="$assetFeatures">
                            <xsl:for-each select="$assetFeatures">
                            <xsl:sort select="cs:master-data('feature')[@key=current()/@feature]/@assetinfo_sorting" data-type="number"/>
                            <xsl:variable name="assetFeature" select="."/>
                            <tr>
                              <td class="asset-info-label"><xsl:value-of select="my:getFeatureName(.)"/>:</td>
                              <td class="asset-info-value">
                                <xsl:copy-of select="my:getFeatureValue(.)"/>
                                <xsl:variable name="feature" select="cs:master-data('feature')[@key=$assetFeature/@feature]"/>
                                <xsl:if test="$feature/@has_relevance='1' and $assetFeature/@relevance_percentage">
                                  <span class="asset-info-label-inline">&#160;➔<xsl:value-of select="cs:format-number($assetFeature/@relevance_percentage, '0.0')"/>%</span>
                                </xsl:if>
                                <br/>
                              </td>
                            </tr>
                          </xsl:for-each>
                          </xsl:if>
                        </xsl:if>
                        <!-- QuickTime infos -->
                        <xsl:if test="$assetCount=1">
                          <xsl:variable name="featureList" select="asset/asset_feature[@feature='censhare:quicktime']/asset_feature"/>
                          <xsl:if test="$featureList">
                            <tr>
                              <td class="asset-info-label">${features}:</td>
                              <td class="asset-info-value">
                                <xsl:for-each select="$featureList">
                                  <span class="asset-info-label-inline"><xsl:value-of select="my:getFeatureName(.)"/>: </span>
                                  <xsl:copy-of select="my:getFeatureValue(.)"/>
                                  <br/>
                                </xsl:for-each>
                              </td>
                            </tr>
                          </xsl:if>
                        </xsl:if>
                        <!-- Exif infos -->
                        <xsl:if test="$assetCount=1">
                          <xsl:variable name="exif" select="asset/asset_feature[@feature='censhare:exif']"/>
                          <xsl:if test="$exif">
                            <xsl:variable name="model" select="$exif/asset_feature[@feature='censhare:exif.model']"/>
                            <xsl:variable name="lens" select="$exif/asset_feature[@feature='censhare:exif.lens']"/>
                            <xsl:variable name="iso" select="$exif/asset_feature[@feature='censhare:exif.iso']"/>
                            <xsl:variable name="focalLength" select="$exif/asset_feature[@feature='censhare:exif.focal-length']"/>
                            <xsl:variable name="exposureCompensation" select="$exif/asset_feature[@feature='censhare:exif.exposure-compensation']"/>
                            <xsl:variable name="aperture" select="$exif/asset_feature[@feature='censhare:exif.aperture']"/>
                            <xsl:variable name="shutterSpeed" select="$exif/asset_feature[@feature='censhare:exif.shutter-speed']"/>
                            <xsl:variable name="whiteBalance" select="$exif/asset_feature[@feature='censhare:exif.white-balance']"/>
                            <xsl:variable name="meteringMode" select="$exif/asset_feature[@feature='censhare:exif.metering-mode']"/>
                            <xsl:variable name="flash" select="$exif/asset_feature[@feature='censhare:exif.flash']/@value_long = 1"/>
                            <xsl:if test="$model or $lens or $iso or $focalLength or $aperture or $shutterSpeed or $whiteBalance or $meteringMode or $flash">
                              <tr>
                                <td class="asset-info-label">${camera}:</td>
                                <td class="asset-info-value">
                                  <!-- Exif: camera model -->
                                  <xsl:if test="$model">
                                    <table cellpadding="0">
                                      <tr>
                                        <td class="asset-info-value">
                                          <xsl:call-template name="iconImage">
                                            <xsl:with-param name="key" select="'camera'"/>
                                          </xsl:call-template>
                                        </td>
                                        <td class="asset-info-value">
                                          <nobr><xsl:value-of select="concat('&#160;', $model/@value_string)"/></nobr>
                                        </td>
                                      </tr>
                                    </table>
                                  </xsl:if>
                                  <!-- Exif: lens -->
                                  <xsl:if test="$lens">
                                    <table cellpadding="0">
                                      <tr>
                                        <td class="asset-info-value">
                                          <xsl:call-template name="iconImage">
                                            <xsl:with-param name="key" select="'lens'"/>
                                          </xsl:call-template>
                                        </td>
                                        <td class="asset-info-value">
                                          <nobr><xsl:value-of select="concat('&#160;', $lens/@value_string)"/></nobr>
                                        </td>
                                      </tr>
                                    </table>
                                  </xsl:if>
                                  <!-- Exif: iso -->
                                  <xsl:if test="$iso">
                                    <table cellpadding="0">
                                      <tr>
                                        <td class="asset-info-value">
                                          <xsl:call-template name="iconImage">
                                            <xsl:with-param name="key" select="'iso'"/>
                                          </xsl:call-template>
                                        </td>
                                        <td class="asset-info-value">
                                          <nobr><xsl:value-of select="concat('&#160;', $iso/@value_long, '&#8195;')"/></nobr>
                                        </td>
                                      </tr>
                                    </table>
                                  </xsl:if>
                                  <!-- Exif: focal length -->
                                  <xsl:if test="$focalLength">
                                    <table cellpadding="0">
                                      <tr>
                                        <td class="asset-info-value">
                                          <xsl:call-template name="iconImage">
                                            <xsl:with-param name="key" select="'focal-length'"/>
                                          </xsl:call-template>
                                        </td>
                                        <td class="asset-info-value">
                                          <nobr><xsl:value-of select="concat('&#160;', $focalLength/@value_double, 'mm&#8195;')"/></nobr>
                                        </td>
                                      </tr>
                                    </table>
                                  </xsl:if>
                                  <!-- Exif: exposure compensation -->
                                  <xsl:if test="$exposureCompensation">
                                    <table cellpadding="0">
                                      <tr>
                                        <td class="asset-info-value">
                                          <xsl:call-template name="iconImage">
                                            <xsl:with-param name="key" select="'exposure-compensation'"/>
                                          </xsl:call-template>
                                        </td>
                                        <td class="asset-info-value">
                                          <nobr><xsl:value-of select="concat('&#160;', $exposureCompensation/@value_long, ' EV&#8195;')"/></nobr>
                                        </td>
                                      </tr>
                                    </table>
                                  </xsl:if>
                                  <!-- Exif: aperture -->
                                  <xsl:if test="$aperture">
                                    <table cellpadding="0">
                                      <tr>
                                        <td class="asset-info-value">
                                          <xsl:call-template name="iconImage">
                                            <xsl:with-param name="key" select="'aperture'"/>
                                          </xsl:call-template>
                                        </td>
                                        <td class="asset-info-value">
                                          <nobr><xsl:value-of select="concat('&#160;', 'ƒ/', $aperture/@value_double, '&#8195;')"/></nobr>
                                        </td>
                                      </tr>
                                    </table>
                                  </xsl:if>
                                  <!-- Exif: shutter speed -->
                                  <xsl:if test="$shutterSpeed">
                                    <table cellpadding="0">
                                      <tr>
                                        <td class="asset-info-value">
                                          <xsl:call-template name="iconImage">
                                            <xsl:with-param name="key" select="'stop-watch'"/>
                                          </xsl:call-template>
                                        </td>
                                        <td class="asset-info-value">
                                          <nobr><xsl:value-of select="concat('&#160;', $shutterSpeed/@value_string, '&#8195;')"/></nobr>
                                        </td>
                                      </tr>
                                    </table>
                                  </xsl:if>
                                  <!-- Exif: white balance -->
                                  <xsl:if test="$whiteBalance">
                                    <table cellpadding="0">
                                      <tr>
                                        <td class="asset-info-value">
                                          <xsl:call-template name="iconImage">
                                            <xsl:with-param name="key" select="'white-balance'"/>
                                          </xsl:call-template>
                                        </td>
                                        <td class="asset-info-value">
                                          <xsl:value-of select="concat('&#160;', my:getFeatureValue($whiteBalance), '&#8195;')"/>
                                        </td>
                                      </tr>
                                    </table>
                                  </xsl:if>
                                  <!-- Exif: metering mode -->
                                  <xsl:if test="$meteringMode">
                                    <table cellpadding="0">
                                      <tr>
                                        <td class="asset-info-value">
                                          <xsl:call-template name="iconImage">
                                            <xsl:with-param name="key" select="'metering-mode'"/>
                                          </xsl:call-template>
                                        </td>
                                        <td class="asset-info-value">
                                          <xsl:value-of select="concat('&#160;', my:getFeatureValue($meteringMode), '&#8195;')"/>
                                        </td>
                                      </tr>
                                    </table>
                                  </xsl:if>
                                  <!-- Exif: flash -->
                                  <xsl:if test="$flash">
                                    <table cellpadding="0">
                                      <tr>
                                        <td class="asset-info-value">
                                          <xsl:call-template name="iconImage">
                                            <xsl:with-param name="key" select="'flash'"/>
                                          </xsl:call-template>
                                        </td>
                                        <td class="asset-info-value">
                                          <xsl:value-of select="'&#160;${flash}&#8195;'"/>
                                        </td>
                                      </tr>
                                    </table>
                                  </xsl:if>
                                </td>
                              </tr>
                            </xsl:if>
                          </xsl:if>
                        </xsl:if>
                        <!-- IPTC infos -->
                        <xsl:if test="$assetCount=1">
                          <xsl:variable name="iptc" select="asset/asset_feature[@feature='censhare:iptc']"/>
                          <xsl:if test="$iptc">
                            <xsl:for-each select="$iptc/asset_feature[starts-with(@feature, 'censhare:iptc')]">
                              <tr>
                                <td class="asset-info-label">
                                  <xsl:value-of select="concat('IPTC ', my:getFeatureName(current()), ':')"/>
                                </td>
                                <td class="asset-info-value">
                                <xsl:choose>
                                  <xsl:when test="exists(current()/asset_feature)">
                                   <xsl:for-each select="current()/asset_feature[starts-with(@feature, 'censhare:iptc')]">
                                    <span class="asset-info-label"> <xsl:value-of select="concat(my:getFeatureName(current()), ':&#8195;')"/></span>
                                    <span class="asset-info-value"><xsl:value-of select="my:getFeatureValue(current())"/></span><br/>
                                  </xsl:for-each>
                                 </xsl:when>
                                 <xsl:otherwise>
                                   <xsl:value-of select="my:getFeatureValue(current())"/>
                                 </xsl:otherwise>
                                 </xsl:choose>
                                </td>
                              </tr>
                            </xsl:for-each>
                          </xsl:if>
                        </xsl:if>
                        <!-- Coordinates -->
                        <xsl:variable name="elements" select="asset//asset_feature[@feature='censhare:geo-coord']"/>
                        <xsl:if test="exists($elements)">
                          <tr>
                            <td class="asset-info-label">${coordinates}:</td>
                            <td class="asset-info-value">
                              <xsl:value-of select="if (count($elements) = 1) then concat(cs:format-number($elements[1]/@value_double, '#,##0.000'), '° ${latitude}, ', cs:format-number($elements[1]/@value_double2, '#,##0.000'), '° ${longitude}') else concat(count($elements), ' ${positions}')"/>
                            </td>
                          </tr>
                        </xsl:if>
                        <!-- Rating -->
                        <xsl:variable name="featureList" select="(asset/asset_feature[@feature='censhare:rating'], asset/asset_feature[@feature='censhare:xmp']/asset_feature[@feature='censhare:xmp.rating' and @value_double &gt; 0.0])"/>
                        <xsl:if test="$featureList">
                          <tr>
                            <td class="asset-info-label">${rating}:</td>
                            <td class="asset-info-value">
                              <table cellpadding="0">
                                <tr>
                                  <td class="asset-info-value">
                                    <nobr><xsl:value-of select="for $x in avg($featureList/@value_double) return if ($x&lt;5.5) then concat(if ($x&lt;0.5) then '${0-star}' else if ($x&lt;1.5) then '${1-star}' else if ($x&lt;2.5) then '${2-star}' else if ($x&lt;3.5) then '${3-star}' else if ($x&lt;4.5) then '${4-star}' else if ($x&lt;5.5) then '${5-star}' else '', ' ∅', cs:format-number($x, '#,##0.0')) else ''"/></nobr>
                                    <xsl:text>&#8195;</xsl:text>
                                  </td>
                                  <td class="asset-info-value">
                                    <xsl:variable name="myRating" select="if ($assetCount = 1) then asset/asset_feature[@feature='censhare:rating' and @party=$partyID] else ()"/>
                                    <xsl:variable name="xmpRating" select="if ($assetCount = 1) then asset/asset_feature[@feature='censhare:xmp']/asset_feature[@feature='censhare:xmp.rating'] else ()"/>
                                    <nobr><xsl:value-of select="concat('${5-star}', ' (', count($featureList[@value_double='5.0']), ')', if($myRating and $myRating/@value_double='5.0') then ('&#8195;${my}') else if($xmpRating and $xmpRating/@value_double='5.0') then ('&#8195;XMP') else ())"/></nobr><br/>
                                    <nobr><xsl:value-of select="concat('${4-star}', ' (', count($featureList[@value_double='4.0']), ')', if($myRating and $myRating/@value_double='4.0') then ('&#8195;${my}') else if($xmpRating and $xmpRating/@value_double='4.0') then ('&#8195;XMP') else ())"/></nobr><br/>
                                    <nobr><xsl:value-of select="concat('${3-star}', ' (', count($featureList[@value_double='3.0']), ')', if($myRating and $myRating/@value_double='3.0') then ('&#8195;${my}') else if($xmpRating and $xmpRating/@value_double='3.0') then ('&#8195;XMP') else ())"/></nobr><br/>
                                    <nobr><xsl:value-of select="concat('${2-star}', ' (', count($featureList[@value_double='2.0']), ')', if($myRating and $myRating/@value_double='2.0') then ('&#8195;${my}') else if($xmpRating and $xmpRating/@value_double='2.0') then ('&#8195;XMP') else ())"/></nobr><br/>
                                    <nobr><xsl:value-of select="concat('${1-star}', ' (', count($featureList[@value_double='1.0']), ')', if($myRating and $myRating/@value_double='1.0') then ('&#8195;${my}') else if($xmpRating and $xmpRating/@value_double='1.0') then ('&#8195;XMP') else ())"/></nobr>
                                  </td>
                                </tr>
                              </table>
                            </td>
                          </tr>
                        </xsl:if>
                        <!-- Period -->
                        <xsl:if test="$assetCount=1">
                          <xsl:variable name="featureList" select="asset/asset_feature[@feature='censhare:period']"/>
                          <xsl:if test="$featureList">
                            <tr>
                              <td class="asset-info-label">${periods}:</td>
                              <td class="asset-info-value"><xsl:value-of select="string-join(for $x in $featureList return concat(cs:format-date($x/@value_timestamp, 'relative-short', 'short'), '-', cs:format-date($x/@value_timestamp2, 'relative-short', 'short')), ', ')"/></td>
                            </tr>
                          </xsl:if>
                        </xsl:if>
                        <!-- Output channel -->
                        <xsl:if test="$assetCount=1">
                          <xsl:variable name="featureList" select="asset/asset_feature[@feature='censhare:output-channel']"/>
                          <xsl:if test="$featureList">
                            <tr>
                              <td class="asset-info-label">${channels}:</td>
                              <td class="asset-info-value">
                                <xsl:value-of select="string-join(for $x in $featureList return my:getFeatureValueHierarchical($x, '/', true()), ', ')"/>
                              </td>
                            </tr>
                          </xsl:if>
                        </xsl:if>
                        <!-- Domains -->
                        <xsl:variable name="domain1" select="cs:equal-values(asset/@domain, asset[1]/@domain, false())"/>
                        <xsl:variable name="domain2" select="cs:equal-values(asset/@domain2, asset[1]/@domain2, false())"/>
                        <xsl:if test="($domain1 or $domain2) and ($domain1!='root.' or $domain2!='root.')">
                          <tr>
                            <td class="asset-info-label">${domain}:</td>
                            <td class="asset-info-value">
                              <xsl:if test="$domain1 and $domain1!='root.'">
                                <span class="asset-info-label-inline">${1st}: </span>
                                <xsl:value-of select="my:getLocalizedValueHierarchical($domain1, 'domain', '@pathid', '/', true())"/>
                                <xsl:text> </xsl:text>
                              </xsl:if>
                              <xsl:if test="$domain2 and $domain2!='root.'">
                                <span class="asset-info-label-inline">${2nd}: </span>
                                <xsl:value-of select="my:getLocalizedValueHierarchical($domain2, 'domain2', '@pathid', '/', true())"/>
                              </xsl:if>
                            </td>
                          </tr>
                        </xsl:if>
                        <!-- Created -->
                        <xsl:variable name="date" select="cs:equal-values(asset/@creation_date, asset[1]/@creation_date, false())"/>
                        <xsl:variable name="by" select="cs:equal-values(asset/@created_by, asset[1]/@created_by, false())"/>
                        <xsl:if test="$date or $by">
                          <tr>
                            <td class="asset-info-label">${created}:</td>
                            <td class="asset-info-value">
                              <xsl:call-template name="previewDateAndBy">
                                <xsl:with-param name="date" select="$date"/>
                                <xsl:with-param name="by" select="$by"/>
                              </xsl:call-template>
                            </td>
                          </tr>
                        </xsl:if>
                        <!-- Modified -->
                        <xsl:variable name="date" select="cs:equal-values(asset/@modified_date, asset[1]/@modified_date, false())"/>
                        <xsl:variable name="by" select="cs:equal-values(asset/@modified_by, asset[1]/@modified_by, false())"/>
                        <xsl:if test="$date or $by">
                          <tr>
                            <td class="asset-info-label">${modified}:</td>
                            <td class="asset-info-value">
                              <xsl:call-template name="previewDateAndBy">
                                <xsl:with-param name="date" select="$date"/>
                                <xsl:with-param name="by" select="$by"/>
                              </xsl:call-template>
                            </td>
                          </tr>
                        </xsl:if>
                        <!-- Opened -->
                        <xsl:variable name="by" select="cs:equal-values(asset/@checked_out_by, asset[1]/@checked_out_by, false())"/>
                        <xsl:if test="$by">
                          <xsl:variable name="date" select="cs:equal-values(asset/@checked_out_date, asset[1]/@checked_out_date, false())"/>
                          <tr>
                            <td class="asset-info-label">${opened}:</td>
                            <td class="asset-info-value">
                              <xsl:call-template name="previewDateAndBy">
                                <xsl:with-param name="date" select="$date"/>
                                <xsl:with-param name="by" select="$by"/>
                              </xsl:call-template>
                            </td>
                          </tr>
                        </xsl:if>
                        <!-- Owners (show only, if one asset is selected) -->
                        <xsl:if test="$assetCount=1">
                          <xsl:variable name="featureList" select="asset/asset_feature[@feature='censhare:owner']"/>
                          <xsl:if test="$featureList">
                            <tr>
                              <td class="asset-info-label"><xsl:value-of select="if (count($featureList) = 1) then '${owner}:' else '${owners}:'"/></td>
                              <td class="asset-info-value">
                                <xsl:for-each select="$featureList">
                                  <xsl:value-of select="my:DisplayNameOrID(@value_long)"/>
                                  <br/>
                                </xsl:for-each>
                              </td>
                            </tr>
                            <tr>
                              <td class="asset-info-label">${non-owner}:</td>
                              <td class="asset-info-value">
                                <xsl:variable name="nonOwnerAccess" select="cs:equal-values(asset/@non_owner_access, asset[1]/@non_owner_access, false())"/>
                                <xsl:value-of select="if ($nonOwnerAccess=0) then '${unrestricted-access}' else if ($nonOwnerAccess=1) then '${read-only-access}' else if ($nonOwnerAccess=2) then '${no-access}' else ''"/>
                              </td>
                            </tr>
                          </xsl:if>
                        </xsl:if>
                        <!-- Application -->
                        <xsl:variable name="application" select="cs:equal-values(asset/@application, asset[1]/@application, false())"/>
                        <xsl:if test="$application">
                          <tr>
                            <td class="asset-info-label">${application}:</td>
                            <td class="asset-info-value"><xsl:value-of select="cs:cachelookup('asset_application', '@id', $application)/@name"/></td>
                          </tr>
                        </xsl:if>
                        <!-- ID -->
                        <xsl:if test="$assetCount=1">
                          <tr>
                            <td class="asset-info-label">${id}:</td>
                            <td class="asset-info-value"><xsl:value-of select="asset[1]/@id"/></td>
                          </tr>
                        </xsl:if>
                        <!-- Version -->
                        <xsl:if test="$assetCount=1">
                          <tr>
                            <td class="asset-info-label">${version}:</td>
                            <td class="asset-info-value"><xsl:value-of select="asset[1]/@version"/></td>
                          </tr>
                        </xsl:if>
                        <!-- Content versio -->
                        <xsl:if test="$assetCount=1">
                          <tr>
                            <td class="asset-info-label">${content-version}:</td>
                            <td class="asset-info-value"><xsl:value-of select="asset[1]/@content_version"/></td>
                          </tr>
                        </xsl:if>
                      </table>
                    </td>
                  </tr>
                </table>
              </html>
            </xsl:if>
          </xsl:template>

          <!-- Get display name of given party id or display the id in case the user/group is inactive -->
           <xsl:function name="my:DisplayNameOrID">
            <xsl:param name="party_id" />
            <xsl:variable name="display_name" select="cs:master-data('party')[@id=$party_id]/@display_name"/>
            <xsl:choose>
              <xsl:when test="not($display_name)">
                <xsl:value-of select="if ($party_id=1) then '${system-user}' else concat('User ID ', $party_id)" />
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="$display_name"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:function>

          <!-- Get name of variant type of given asset relation type -->
          <xsl:function name="my:getVariantTypeName" as="xs:string">
            <xsl:param name="assetRelType" as="xs:string"/>
            <xsl:variable name="value" select="cs:cachelookup('asset_rel_typedef', '@key', $assetRelType)/@name"/>
            <xsl:choose>
              <xsl:when test="$value"><xsl:copy-of select="$value"/></xsl:when>
              <xsl:otherwise><xsl:value-of select="$assetRelType"/></xsl:otherwise>
            </xsl:choose>
          </xsl:function>

          <!-- Get string presentation of given file size as number -->
          <xsl:function name="my:getFileSizeString" as="xs:string">
            <xsl:param name="fileSize" as="xs:double"/>
            <xsl:choose>
              <xsl:when test="$fileSize &lt; 1024"><xsl:value-of select="cs:format-number($fileSize, '#,##0 Bytes')"/></xsl:when>
              <xsl:when test="$fileSize &lt; 1048576"><xsl:value-of select="cs:format-number($fileSize div 1024, '#,##0.0 KB')"/></xsl:when>
              <xsl:when test="$fileSize &lt; 1073741824"><xsl:value-of select="cs:format-number($fileSize div 1048576, '#,##0.0 MB')"/></xsl:when>
              <xsl:otherwise><xsl:value-of select="cs:format-number($fileSize div 1073741824, '#,##0.0 GB')"/></xsl:otherwise>
            </xsl:choose>
          </xsl:function>

          <!-- Get string presentation (e.g. '2:30' or '1:02:30') of given duration as number of seconds -->
          <xsl:function name="my:getDurationString" as="xs:string">
            <xsl:param name="duration" as="xs:double"/>
            <xsl:variable name="hourPart" select="string(xs:integer(floor($duration div 3600)))"/>
            <xsl:variable name="minutePart" select="string(xs:integer(floor(($duration mod 3600) div 60)))"/>
            <xsl:variable name="secondPart" select="string(round($duration mod 60))"/>
            <xsl:copy-of select="concat(if ($hourPart != '0') then concat($hourPart, ':', if (string-length($minutePart) = 1) then '0' else()) else (), $minutePart, ':', if (string-length($secondPart) = 1) then '0' else (), $secondPart)"/>
          </xsl:function>

          <!-- Creates preview of party of given $by and text of given $by and $date -->
          <xsl:template name="previewDateAndBy">
            <xsl:param name="date"/>
            <xsl:param name="by"/>
            <xsl:variable name="byAssetID" select="cs:cachelookup('party', '@id', $by)/@party_asset_id"/>
            <xsl:variable name="byAsset" select="cs:get-asset($byAssetID, 0, 0)"/>
            <xsl:variable name="thumbnailStorage" select="$byAsset/storage_item[@key='thumbnail'][1]"/>
            <xsl:choose>
              <xsl:when test="$thumbnailStorage">
                <table cellpadding="0">
                  <tr>
                    <td class="asset-info-label">
                      <img hspace="1" vspace="2">
                        <xsl:attribute name="src" select="concat($urlPrefix, 'assets/asset/id/', $thumbnailStorage/@asset_id, '/element/actual/', $thumbnailStorage/@element_idx, '/storage/', $thumbnailStorage/@key, '/file/', tokenize($thumbnailStorage/@relpath,'/')[last()])"/>
                        <xsl:variable name="imageFactor" select="if ($thumbnailStorage/@width_px > $thumbnailStorage/@height_px) then ($maxPreviewSize div $thumbnailStorage/@width_px) else ($maxPreviewSize div $thumbnailStorage/@height_px)"/>
                        <xsl:attribute name="width" select="if ($thumbnailStorage/@width_px) then round($thumbnailStorage/@width_px * $imageFactor) else $maxPreviewSize"/>
                        <xsl:attribute name="height" select="if ($thumbnailStorage/@height_px) then round($thumbnailStorage/@height_px * $imageFactor) else $maxPreviewSize"/>
                        <xsl:attribute name="title" select="cs:cachelookup('party', '@id', $by)/@display_name"/>
                      </img>
                    </td>
                    <td class="asset-info-value">
                      <xsl:value-of select="if ($date) then cs:format-date($date, 'relative-short', 'short') else '${multiple-values}'"/>
                      <br/>
                      <span class="asset-info-label-inline"> ${by} </span>
                      <xsl:value-of select="if ($by) then (if ($by=1) then '${system-user}' else if ($by=$partyID) then '${myself}' else my:DisplayNameOrID($by)) else '${multiple-values}'"/>
                    </td>
                  </tr>
                </table>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="if ($date) then cs:format-date($date, 'relative-short', 'short') else '${multiple-values}'"/>
                <span class="asset-info-label-inline"> ${by} </span>
                <xsl:value-of select="if ($by) then (if ($by=1) then '${system-user}' else if ($by=$partyID) then '${myself}' else my:DisplayNameOrID($by)) else '${multiple-values}'"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:template>

          <!-- Get localized name of given feature element -->
          <xsl:function name="my:getFeatureName" as="xs:string">
            <xsl:param name="featureElement" as="element(asset_feature)"/>
            <xsl:variable name="featureDefinition" select ="cs:master-data('feature')[@key=$featureElement/@feature]"/>
            <xsl:value-of select="if ($featureDefinition/@label) then $featureDefinition/@label else $featureDefinition/@name"/>
          </xsl:function>

          <!-- Get localized name of given month (integer) -->
          <xsl:function name="my:getMonthName" as="xs:string">
            <xsl:param name="month" as="xs:integer"/>
            <xsl:choose>
              <xsl:when test="$month=1">${january}</xsl:when>
              <xsl:when test="$month=2">${february}</xsl:when>
              <xsl:when test="$month=3">${march}</xsl:when>
              <xsl:when test="$month=4">${april}</xsl:when>
              <xsl:when test="$month=5">${may}</xsl:when>
              <xsl:when test="$month=6">${june}</xsl:when>
              <xsl:when test="$month=7">${july}</xsl:when>
              <xsl:when test="$month=8">${august}</xsl:when>
              <xsl:when test="$month=9">${september}</xsl:when>
              <xsl:when test="$month=10">${october}</xsl:when>
              <xsl:when test="$month=11">${november}</xsl:when>
              <xsl:when test="$month=12">${december}</xsl:when>
            </xsl:choose>
          </xsl:function>

          <!-- Get localized name of a given dot separated value -->
          <xsl:function name="my:getLocalizedValueHierarchical" as="xs:string">
            <xsl:param name="value" as="xs:string"/>
            <xsl:param name="cachedTableName" as="xs:string"/>
            <xsl:param name="cachedTableAttribute" as="xs:string"/>
            <xsl:param name="delimiter" as="xs:string"/>
            <xsl:param name="hideRoot" as="xs:boolean"/>
            <xsl:variable name="items" select="tokenize($value, '\.')"/>
            <xsl:variable name="startItem" select="if ($hideRoot) then 2 else 1"/>
            <xsl:value-of select="string-join(for $x in ($startItem to xs:long(count($items))) return cs:cachelookup($cachedTableName, $cachedTableAttribute, concat(string-join(subsequence($items, 1, $x), '.'), '.'))/@name, $delimiter)"/>
          </xsl:function>

          <!-- Get localized name of a asset feature with a hierarchical value type -->
          <xsl:function name="my:getFeatureValueHierarchical" as="xs:string">
            <xsl:param name="featureElement" as="element(asset_feature)"/>
            <xsl:param name="delimiter" as="xs:string"/>
            <xsl:param name="hideRoot" as="xs:boolean"/>
            <xsl:variable name="items" select="tokenize($featureElement/@value_key, '\.')"/>
            <xsl:variable name="startItem" select="if ($hideRoot) then 2 else 1"/>
            <xsl:value-of select="string-join(for $x in ($startItem to xs:long(count($items))) return cs:cachelookup('feature_value', '@feature', $featureElement/@feature, '@value_key', concat(string-join(subsequence($items, 1, $x), '.'), '.'))/@name, $delimiter)"/>
          </xsl:function>

          <!-- Get localized value of given feature element -->
          <xsl:function name="my:getFeatureValue">
            <xsl:param name="featureElement" as="element(asset_feature)"/>
            <xsl:variable name="feature" select="cs:cachelookup('feature', '@key', $featureElement/@feature)"/>
            <xsl:variable name="type" select="$feature/@value_type"/>
            <xsl:choose>
              <!-- 0: No value -->
              <xsl:when test="$type='0'">
                <xsl:value-of select="''"/>
              </xsl:when>
              <!-- 1: Hierarchical attribute (string) -->
              <xsl:when test="$type='1'">
                <xsl:value-of select="cs:cachelookup('feature_value', '@feature', $featureElement/@feature, '@value_key', $featureElement/@value_key)/@name"/>
              </xsl:when>
              <!-- 2: Enumeration (string) -->
              <xsl:when test="$type='2'">
                <xsl:value-of select="cs:cachelookup('feature_value', '@feature', $featureElement/@feature, '@value_key', $featureElement/@value_key)/@name"/>
              </xsl:when>
              <!-- 3: Integer (long) -->
              <xsl:when test="$type='3'">
                <xsl:choose>
                  <xsl:when test="$feature/@value_list_resource_key">
                    <xsl:value-of select="doc(concat('censhare:///service/assets/asset/id/', $featureElement/@asset_id, '/transform;key=censhare:value-list.product-feature;value=', $featureElement/@value_long))/options/option/@display_value"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="string-join((cs:format-number($featureElement/@value_long, '#,###'), my:getFeatureUnitString($featureElement)), ' ')"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <!-- 4: String -->
              <xsl:when test="$type='4'">
                <xsl:choose>
                  <!-- censhare URL -->
                  <xsl:when test="$featureElement/@feature='censhare:url'">
                    <a class="asset-info-link" target="_blank">
                      <xsl:attribute name="href" select="$featureElement/@value_string"/>
                      <xsl:value-of select="$featureElement/@value_string"/>
                    </a>
                  </xsl:when>
                  <!-- String -->
                  <xsl:otherwise>
                    <xsl:choose>
                      <xsl:when test="$feature/@value_list_resource_key">
                        <xsl:value-of select="doc(concat('censhare:///service/assets/asset/id/', $featureElement/@asset_id, '/transform;key=censhare:value-list.product-feature;value=', $featureElement/@value_string))/options/option/@display_value"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="$featureElement/@value_string"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <!-- 5: Timestamp -->
              <xsl:when test="$type='5'">
                <xsl:value-of select="cs:format-date($featureElement/@value_timestamp, 'relative-short', 'short')"/>
              </xsl:when>
              <!-- 6: Boolean -->
              <xsl:when test="$type='6'">
                <xsl:value-of select="if ($featureElement/@value_long='1') then '${yes}' else '${no}'"/>
              </xsl:when>
              <!-- 7: Double -->
              <xsl:when test="$type='7'">
                <xsl:value-of select="string-join((cs:format-number($featureElement/@value_double, '#,###.###'), my:getFeatureUnitString($featureElement)), ' ')"/>
              </xsl:when>
              <!-- 8: Integer pair -->
              <xsl:when test="$type='8'">
                <xsl:value-of select="string-join((concat(cs:format-number($featureElement/@value_long, '#,###'), '-', cs:format-number($featureElement/@value_long2, '#,###')), my:getFeatureUnitString($featureElement)), ' ')"/>
              </xsl:when>
              <!-- 9: Timestamp pair -->
              <xsl:when test="$type='9'">
                <xsl:value-of select="concat(cs:format-date($featureElement/@value_timestamp, 'relative-short', 'short'), '-', cs:format-date($featureElement/@value_timestamp2, 'relative-short', 'short'))"/>
              </xsl:when>
              <!-- 10: Asset reference -->
              <xsl:when test="$type='10'">
                <xsl:choose>
                  <xsl:when test="$feature/@value_list_resource_key">
                    <xsl:value-of select="doc(concat('censhare:///service/assets/asset/id/', $featureElement/@asset_id, '/transform;key=', $feature/@value_list_resource_key, ';value=', $featureElement/@value_asset_id))/options/option/@display_value"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:variable name="refAsset" select="cs:get-asset($featureElement/@value_asset_id)"/>
                    <xsl:choose>
                      <xsl:when test="exists($refAsset)">
                        <xsl:value-of select="if ($refAsset/asset_feature[@feature='censhare:name' and @language=$uiLocale]) then $refAsset/asset_feature[@feature='censhare:name' and @language=$uiLocale]/@value_string else $refAsset/@name"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="concat('ID: ', $featureElement/@value_asset_id)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <!-- 11: XML -->
              <xsl:when test="$type='11'">
                <xsl:value-of select="''"/>
              </xsl:when>
              <!-- 12: Double pair -->
              <xsl:when test="$type='12'">
                <xsl:value-of select="string-join((concat(cs:format-number($featureElement/@value_double, '#,###.###'), '-', cs:format-number($featureElement/@value_double2, '#,###.###')), my:getFeatureUnitString($featureElement)), ' ')"/>
              </xsl:when>
              <!-- 13: Date -->
              <xsl:when test="$type='13'">
                <xsl:value-of select="cs:format-date($featureElement/@value_timestamp, 'relative-short', 'none')"/>
              </xsl:when>
              <!-- 14: Date pair -->
              <xsl:when test="$type='14'">
                <xsl:value-of select="concat(cs:format-date($featureElement/@value_timestamp, 'relative-short', 'none'), '-', cs:format-date($featureElement/@value_timestamp2, 'relative-short', 'none'))"/>
              </xsl:when>
              <!-- 15: Time -->
              <xsl:when test="$type='15'">
                <xsl:value-of select="cs:format-date($featureElement/@value_timestamp, 'none', 'short')"/>
              </xsl:when>
              <!-- 16: Time pair -->
              <xsl:when test="$type='16'">
                <xsl:value-of select="concat(cs:format-date($featureElement/@value_timestamp, 'none', 'short'), '-', cs:format-date($featureElement/@value_timestamp2, 'none', 'short'))"/>
              </xsl:when>
              <!-- 17: Year -->
              <xsl:when test="$type='17'">
                <xsl:value-of select="year-from-dateTime($featureElement/@value_timestamp)"/>
              </xsl:when>
              <!-- 18: Year pair -->
              <xsl:when test="$type='18'">
                <xsl:value-of select="concat(year-from-dateTime($featureElement/@value_timestamp), '-', year-from-dateTime($featureElement/@value_timestamp2))"/>
              </xsl:when>
              <!-- 19: Year/month -->
              <xsl:when test="$type='19'">
                <xsl:value-of select="concat(my:getMonthName(month-from-dateTime($featureElement/@value_timestamp)), ' ', year-from-dateTime($featureElement/@value_timestamp))"/>
              </xsl:when>
              <!-- 20: Year/month pair -->
              <xsl:when test="$type='20'">
                <xsl:value-of select="concat(my:getMonthName(month-from-dateTime($featureElement/@value_timestamp)), ' ', year-from-dateTime($featureElement/@value_timestamp), '-', my:getMonthName(month-from-dateTime($featureElement/@value_timestamp2)), ' ', year-from-dateTime($featureElement/@value_timestamp2))"/>
              </xsl:when>
              <!-- 21: Month -->
              <xsl:when test="$type='21'">
                <xsl:value-of select="my:getMonthName(month-from-dateTime($featureElement/@value_timestamp))"/>
              </xsl:when>
              <!-- 22: Month pair -->
              <xsl:when test="$type='22'">
                <xsl:value-of select="concat(my:getMonthName(month-from-dateTime($featureElement/@value_timestamp)), '-', my:getMonthName(month-from-dateTime($featureElement/@value_timestamp2)))"/>
              </xsl:when>
              <!-- 23: Month/day -->
              <xsl:when test="$type='23'">
                <xsl:value-of select="concat(day-from-dateTime($featureElement/@value_timestamp), '. ', my:getMonthName(month-from-dateTime($featureElement/@value_timestamp)))"/>
              </xsl:when>
              <!-- 24: Month/day pair -->
              <xsl:when test="$type='24'">
                <xsl:value-of select="concat(day-from-dateTime($featureElement/@value_timestamp), '. ', my:getMonthName(month-from-dateTime($featureElement/@value_timestamp)), '-', day-from-dateTime($featureElement/@value_timestamp2), '. ', my:getMonthName(month-from-dateTime($featureElement/@value_timestamp2)))"/>
              </xsl:when>
              <!-- 25: Day -->
              <xsl:when test="$type='25'">
                <xsl:value-of select="concat(day-from-dateTime($featureElement/@value_timestamp), '.')"/>
              </xsl:when>
              <!-- 26: Day pair -->
              <xsl:when test="$type='26'">
                <xsl:value-of select="concat(day-from-dateTime($featureElement/@value_timestamp), '.-', day-from-dateTime($featureElement/@value_timestamp2), '.')"/>
              </xsl:when>
              <!-- 27: Duration -->
              <!-- 28: Asset Key -->
              <!-- 29: Asset key ref -->
              <xsl:when test="$type='29'">
                <xsl:choose>
                  <xsl:when test="$feature/@value_list_resource_key">
                    <xsl:value-of select="doc(concat('censhare:///service/assets/asset/id/', $featureElement/@asset_id, '/transform;key=', $feature/@value_list_resource_key, ';value=', $featureElement/@value_asset_key_ref))/options/option/@display_value"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:variable name="refAsset" select="cs:asset()[@censhare:resource-key=$featureElement/@value_asset_key_ref]"/>
                    <xsl:choose>
                      <xsl:when test="exists($refAsset)">
                        <xsl:value-of select="if ($refAsset/asset_feature[@feature='censhare:name' and @language=$uiLocale]) then $refAsset/asset_feature[@feature='censhare:name' and @language=$uiLocale]/@value_string else $refAsset/@name"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="concat('Resource key: ', $featureElement/@value_asset_key_ref)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="'${none}'"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:function>

          <!-- Get localized value of given feature element -->
          <xsl:function name="my:getFeatureUnitString" as="xs:string">
            <xsl:param name="featureElement" as="element(asset_feature)"/>
            <xsl:value-of select="if ($featureElement/@value_unit) then cs:cachelookup('unit_set_rel', '@unit', $featureElement/@value_unit)/@unit else ()"/>
          </xsl:function>

          <!-- Creates line breaks '<br/>' elements of line feed, line separator and paragraph separator at given text parameter -->
          <xsl:template name="lineBreak">
            <xsl:param name="text" select="."/>
            <xsl:variable name="lines" select="tokenize($text, '\n|\u2028|\u2029')"/> <!-- delimiters: line feed, line separator and paragraph separator -->
            <xsl:for-each select="tokenize($text, '\n|\u2028|\u2029')">
              <xsl:value-of select="."/>
              <xsl:if test="position() != last()">
                <br/>
              </xsl:if>
            </xsl:for-each>
          </xsl:template>

          <!-- Creates icon 'img' element with given key -->
          <xsl:template name="iconImage">
            <xsl:param name="key" select="."/>
            <img width="16" height="16">
              <xsl:attribute name="src" select="concat($urlPrefix, 'resources/icon/', $key, '/iconset/', $lafIconset, '/background/', $lafBackground, '/file')"/>
            </img>
          </xsl:template>

          <!-- "and" or "or" (copy of expression "edit-query") -->
          <xsl:template match="and | or">
            <xsl:variable name="multipleConditions" select="count(*) > 1"/>
            <xsl:value-of select="if ($multipleConditions) then '(' else ''"/>
            <xsl:call-template name="query">
              <xsl:with-param name="type" select="node-name(.)"/>
              <xsl:with-param name="element" select="."/>
            </xsl:call-template>
            <xsl:value-of select="if ($multipleConditions) then ')' else ''"/>
          </xsl:template>

          <!-- "not" (copy of expression "edit-query") -->
          <xsl:template match="not">
            <xsl:variable name="multipleConditions" select="count(*) > 1"/>
            <xsl:text>${without-(lowercase)} </xsl:text>
            <xsl:value-of select="if ($multipleConditions) then '(' else ''"/>
            <xsl:call-template name="query">
              <xsl:with-param name="type" select="'and'"/>
              <xsl:with-param name="element" select="."/>
            </xsl:call-template>
            <xsl:value-of select="if ($multipleConditions) then ')' else ''"/>
          </xsl:template>

          <!-- Query (copy of expression "edit-query") -->
          <xsl:template name="query">
            <xsl:param name="type"/>
            <xsl:param name="element"/>
            <xsl:for-each select="$element/(condition | and | or | not)">
              <xsl:apply-templates select="."/>
              <xsl:if test="position() != last()">
                <xsl:value-of select="concat(' ', if ($type='and') then '${and-(lowercase)}' else '${or-(lowercase)}', ' ')"/>
              </xsl:if>
            </xsl:for-each>
          </xsl:template>

          <!-- Condition (copy of expression "edit-query") -->
          <xsl:template match="condition">
            <xsl:text>(</xsl:text>
            <xsl:variable name="feature" select="cs:cachelookup('feature', '@key', @name)"/>
            <xsl:variable name="type" select="$feature/@value_type"/>
            <xsl:variable name="isAdmin" select="$system/system/client/@type = 'javaadmin'"/>
            <!-- name of feature -->
            <xsl:value-of select="if ($isAdmin) then (cs:cachelookup('feature', '@key', @name)/@name${localized-attr-suffix}) else (cs:cachelookup('feature', '@key', @name)/@name)"/>
            <!-- op (if feature is a pair data type (data types 8, 9, 12, 14, 16, 18, 20, 22, 24, 26), then use 'includes') -->
            <xsl:value-of select="if (index-of((8, 9, 12, 14, 16, 18, 20, 22, 24, 26), $type)) then ' ${includes-(lowercase)} ' else if (@op) then concat(' ', @op, ' ') else ' = '"/>
            <!-- value -->
            <xsl:text>${quote-start}</xsl:text>
            <xsl:choose>
              <xsl:when test="$feature/@value_source">
                <xsl:choose>
                  <xsl:when test="@name='censhare:function.workflow-step'">
                    <!-- special hack for workflow/workflow-step logical pair -->
                    <xsl:variable name="workflow" select="../condition[@name='censhare:asset.wf_id']/@value"/>
                    <xsl:variable name="tableElement" select="cs:cachelookup('workflow_step', '@wf_step', @value, '@wf_id', $workflow)"/>
                    <xsl:value-of select="if ($tableElement/@display_name) then $tableElement/@display_name else if ($isAdmin) then $tableElement/@name${localized-attr-suffix} else $tableElement/@name"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:variable name="tableName" select="substring-before($feature/@value_source, '@')"/>
                    <xsl:variable name="tableAttribute" select="concat('@', substring-after($feature/@value_source, '@'))"/>
                    <xsl:variable name="tableValue" select="if ($type='1') then tokenize(@value, '\*')[1] else @value"/>
                    <xsl:variable name="tableElement" select="cs:cachelookup($tableName, $tableAttribute, $tableValue)"/>
                    <xsl:value-of select="if ($tableElement/@display_name) then $tableElement/@display_name else if ($isAdmin) then $tableElement/@name${localized-attr-suffix} else $tableElement/@name"/>
                    <xsl:value-of select="if ($type='1' and ends-with(@value, '*')) then '*' else ''"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:choose>
                  <!-- 0: No value -->
                  <xsl:when test="$type='0'">
                    <xsl:value-of select="''"/>
                  </xsl:when>
                  <!-- 1: Hierarchical attribute (string) -->
                  <xsl:when test="$type='1'">
                    <xsl:variable name="path" select="tokenize(@value, '\*')[1]"/>
                    <xsl:value-of select="concat('path=', $path, ', ')"/>
                    <xsl:value-of select="if ($isAdmin) then cs:cachelookup('feature_value', '@feature', @name, '@value_key', $path)/@name${localized-attr-suffix} else cs:cachelookup('feature_value', '@feature', @name, '@value_key', $path)/@name"/>
                    <xsl:value-of select="if (contains(@value, '*')) then '*' else ''"/>
                  </xsl:when>
                  <!-- 2: Enumeration (string) -->
                  <xsl:when test="$type='2'">
                    <xsl:value-of select="if ($isAdmin) then cs:cachelookup('feature_value', '@feature', @name, '@value_key', @value)/@name${localized-attr-suffix} else cs:cachelookup('feature_value', '@feature', @name, '@value_key', @value)/@name"/>
                  </xsl:when>
                  <!-- 3: Integer (long) -->
                  <xsl:when test="$type='3'">
                    <xsl:value-of select="cs:format-number(@value, '#,###')"/>
                  </xsl:when>
                  <!-- 4: String -->
                  <xsl:when test="$type='4'">
                    <xsl:value-of select="@value"/>
                  </xsl:when>
                  <!-- 5: Timestamp -->
                  <xsl:when test="$type='5'">
                    <xsl:value-of select="cs:format-date(@value, 'relative-short', 'short')"/>
                  </xsl:when>
                  <!-- 6: Boolean -->
                  <xsl:when test="$type='6'">
                    <xsl:value-of select="if (@value='1') then '${yes}' else '${no}'"/>
                  </xsl:when>
                  <!-- 7: Double -->
                  <xsl:when test="$type='7'">
                    <xsl:value-of select="cs:format-number(@value, '#,###.###')"/>
                  </xsl:when>
                  <!-- 8: Integer pair -->
                  <xsl:when test="$type='8'">
                    <xsl:value-of select="cs:format-number(@value, '#,###')"/>
                  </xsl:when>
                  <!-- 9: Timestamp pair -->
                  <xsl:when test="$type='9'">
                    <xsl:value-of select="cs:format-date(@value, 'relative-short', 'short')"/>
                  </xsl:when>
                  <!-- 10: Asset reference -->
                  <xsl:when test="$type='10'">
                    <xsl:variable name="refAsset" select="cs:get-asset(@value_asset_id)"/>
                    <xsl:choose>
                      <xsl:when test="exists($refAsset)">
                        <xsl:value-of select="if ($refAsset/asset_feature[@feature='censhare:name' and @language=$uiLocale]) then $refAsset/asset_feature[@feature='censhare:name' and @language=$uiLocale]/@value_string else $refAsset/@name"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="concat('ID: ', @value_asset_id)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <!-- 11: XML -->
                  <xsl:when test="$type='11'">
                    <xsl:value-of select="''"/>
                  </xsl:when>
                  <!-- 12: Double pair -->
                  <xsl:when test="$type='12'">
                    <xsl:value-of select="cs:format-number(@value, '#,###.###')"/>
                  </xsl:when>
                  <!-- 13: Date -->
                  <xsl:when test="$type='13'">
                    <xsl:value-of select="cs:format-date(xs:dateTime(concat(substring(@value, 1, 10), 'T00:00:00')), 'relative-short', 'none')"/>
                  </xsl:when>
                  <!-- 14: Date pair -->
                  <xsl:when test="$type='14'">
                    <xsl:value-of select="cs:format-date(xs:dateTime(concat(substring(@value, 1, 10), 'T00:00:00')), 'relative-short', 'none')"/>
                  </xsl:when>
                  <!-- 15: Time -->
                  <xsl:when test="$type='15'">
                    <xsl:value-of select="cs:format-date(xs:dateTime(concat('1970-01-01T', @value)), 'none', 'short')"/>
                  </xsl:when>
                  <!-- 16: Time pair -->
                  <xsl:when test="$type='16'">
                    <xsl:value-of select="cs:format-date(xs:dateTime(concat('1970-01-01T', @value)), 'none', 'short')"/>
                  </xsl:when>
                  <!-- 17: Year -->
                  <xsl:when test="$type='17'">
                    <xsl:value-of select="cs:format-number(number(@value), '#')"/>
                  </xsl:when>
                  <!-- 18: Year pair -->
                  <xsl:when test="$type='18'">
                    <xsl:value-of select="cs:format-number(number(@value), '#')"/>
                  </xsl:when>
                  <!-- 19: Year/month -->
                  <xsl:when test="$type='19'">
                    <xsl:value-of select="concat(my:getMonthName(number(substring(@value, 6, 2))), ' ', cs:format-number(number(substring(@value, 1, 4)), '#'))"/>
                  </xsl:when>
                  <!-- 20: Year/month pair -->
                  <xsl:when test="$type='20'">
                    <xsl:value-of select="concat(my:getMonthName(number(substring(@value, 6, 2))), ' ', cs:format-number(number(substring(@value, 1, 4)), '#'))"/>
                  </xsl:when>
                  <!-- 21: Month -->
                  <xsl:when test="$type='21'">
                    <xsl:value-of select="my:getMonthName(number(substring(@value, 3, 2)))"/>
                  </xsl:when>
                  <!-- 22: Month pair -->
                  <xsl:when test="$type='22'">
                    <xsl:value-of select="my:getMonthName(number(substring(@value, 3, 2)))"/>
                  </xsl:when>
                  <!-- 23: Month/day -->
                  <xsl:when test="$type='23'">
                    <xsl:value-of select="concat(cs:format-number(number(substring(@value, 6, 2)), '#'), '. ', my:getMonthName(number(substring(@value, 3, 2))))"/>
                  </xsl:when>
                  <!-- 24: Month/day pair -->
                  <xsl:when test="$type='24'">
                    <xsl:value-of select="concat(cs:format-number(number(substring(@value, 6, 2)), '#'), '. ', my:getMonthName(number(substring(@value, 3, 2))))"/>
                  </xsl:when>
                  <!-- 25: Day -->
                  <xsl:when test="$type='25'">
                    <xsl:value-of select="concat(cs:format-number(number(substring(@value, 4, 2)), '#'), '.')"/>
                  </xsl:when>
                  <!-- 26: Day pair -->
                  <xsl:when test="$type='26'">
                    <xsl:value-of select="concat(cs:format-number(number(substring(@value, 4, 2)), '#'), '.')"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="@value"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
            <xsl:text>${quote-end})</xsl:text>
          </xsl:template>

        </xsl:stylesheet>

    </expression>

    <!-- Description for asset info -->
    <expression id="asset-info">

      <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:my="http://www.censhare.com" version="2.0">
        <xsl:param name="system"/>
        <xsl:variable name="maxPreviewSize" select="32"/>
        <xsl:variable name="assetCount" select="count(asset)"/>
        <xsl:variable name="partyID" select="$system/system/party/@id"/>
        <xsl:variable name="uiLocale" select="$system/system/@locale"/>
        <xsl:variable name="urlPrefix" select="$system/system/@censhare-url-prefix"/>
        <xsl:variable name="lafBackground" select="$system/system/laf/@background"/>
        <xsl:variable name="lafIconset" select="$system/system/laf/@icon-set"/>

        <xsl:template match="/">
          <xsl:if test="$assetCount > 0">
            <html>
              <table cellpadding="1" valign="top" class="asset-info-table">
                <tr>
                  <!-- Asset name or count of assets -->
                  <td class="asset-info-title">
                    <xsl:value-of select="if (cs:equal-values(asset/@name)) then asset/@name else concat($assetCount, ' ', '${assets}')"/>
                  </td>
                </tr>
                <tr>
                  <td>
                    <table cellpadding="0">
                      <!-- Asset type -->
                      <tr >
                        <td class="asset-info-label">${type}:</td>
                        <td class="asset-info-value"><xsl:value-of select="cs:equal-values(asset/@type, my:getLocalizedValueHierarchical(asset[1]/@type, 'asset_typedef', '@asset_type', '/', false()), '${multiple-values}')"/></td>
                      </tr>
                      <!-- Address (show only, if one asset is selected) -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="address" select="asset[1]/asset_feature[@feature='censhare:address'][1]"/>
                        <xsl:variable name="personalDatas" select="$address/asset_feature[@feature='censhare:address.personal-data']"/>
                        <xsl:variable name="comTelTypes" select="$address/asset_feature[@feature='censhare:address.com-tel-type']"/>
                        <xsl:variable name="comEmailTypes" select="$address/asset_feature[@feature='censhare:address.com-email-type']"/>
                        <xsl:variable name="comOtherTypes" select="$address/asset_feature[@feature='censhare:address.com-other-type']"/>
                        <xsl:variable name="postAddresses" select="$address/asset_feature[@feature='censhare:address.type']"/>
                        <xsl:if test="$address or $personalDatas or $comTelTypes or $comEmailTypes or $comOtherTypes or $postAddresses">
                          <xsl:for-each select="asset[1]/asset_feature[@feature='censhare:address']">
                            <xsl:if test="$comTelTypes">
                              <tr>
                                <td class="asset-info-label">${phone}:</td>
                                <td class="asset-info-value">
                                  <table cellpadding="0">
                                    <xsl:for-each select="$comTelTypes">
                                      <xsl:sort select="cs:master-data('feature_value')[@feature=current()/@feature and @value_key=current()/@value_key]/@sorting" data-type="number" order="ascending"/>
                                      <tr>
                                        <td class="asset-info-value2" width="60"><xsl:value-of select="my:getFeatureValue(.)"/>:&#x00A0;&#x00A0;</td>
                                        <td class="asset-info-value"><xsl:value-of select="asset_feature[@feature='censhare:address.uri-tel']/@value_string"/></td>
                                      </tr>
                                    </xsl:for-each>
                                  </table>
                                </td>
                              </tr>
                            </xsl:if>
                            <xsl:if test="$comEmailTypes">
                              <tr>
                                <td class="asset-info-label">${e-mail}:</td>
                                <td class="asset-info-value">
                                  <table cellpadding="0">
                                    <xsl:for-each select="$comEmailTypes">
                                      <xsl:sort select="cs:master-data('feature_value')[@feature=current()/@feature and @value_key=current()/@value_key]/@sorting" data-type="number" order="ascending"/>
                                      <tr>
                                        <td class="asset-info-value2" width="60"><xsl:value-of select="my:getFeatureValue(.)"/>:&#x00A0;&#x00A0;</td>
                                        <td class="asset-info-value">
                                          <a class="asset-info-link">
                                            <xsl:attribute name="href" select="concat('mailto:', asset_feature[@feature='censhare:address.uri-mailto']/@value_string)"/>
                                            <xsl:value-of select="asset_feature[@feature='censhare:address.uri-mailto']/@value_string"/>
                                          </a>
                                        </td>
                                      </tr>
                                    </xsl:for-each>
                                  </table>
                                </td>
                              </tr>
                            </xsl:if>
                            <xsl:if test="$comOtherTypes">
                              <tr>
                                <td class="asset-info-label">${other}:</td>
                                <td class="asset-info-value">
                                  <table cellpadding="0">
                                    <xsl:for-each select="$comOtherTypes">
                                      <xsl:sort select="cs:master-data('feature_value')[@feature=current()/@feature and @value_key=current()/@value_key]/@sorting" data-type="number" order="ascending"/>
                                      <tr>
                                        <td class="asset-info-value2" width="60"><xsl:value-of select="my:getFeatureValue(.)"/>:&#x00A0;&#x00A0;</td>
                                        <td class="asset-info-value">
                                          <xsl:variable name="uri" select="asset_feature[@feature='censhare:address.uri-generic']/@value_string"/>
                                          <xsl:choose>
                                            <xsl:when test="@value_key='website'">
                                              <a class="asset-info-link" target="_blank">
                                                <xsl:attribute name="href" select="concat(if (starts-with($uri, 'http')) then '' else 'http://',$uri)"/>
                                                <xsl:value-of select="asset_feature[@feature='censhare:address.uri-generic']/@value_string"/>
                                              </a>
                                            </xsl:when>
                                            <xsl:when test="@value_key='twitter'">
                                              <a class="asset-info-link" target="_blank">
                                                <xsl:attribute name="href" select="concat('http://twitter.com/', $uri)"/>
                                                <xsl:value-of select="asset_feature[@feature='censhare:address.uri-generic']/@value_string"/>
                                              </a>
                                            </xsl:when>
                                            <xsl:when test="@value_key='skype'">
                                              <a class="asset-info-link" target="_blank">
                                                <xsl:attribute name="href" select="concat('skype:', $uri, '?chat')"/>
                                                <xsl:value-of select="asset_feature[@feature='censhare:address.uri-generic']/@value_string"/>
                                              </a>
                                            </xsl:when>
                                            <xsl:when test="@value_key='facebook'">
                                              <a class="asset-info-link" target="_blank">
                                                <xsl:attribute name="href" select="concat('http://www.facebook.com/', $uri)"/>
                                                <xsl:value-of select="asset_feature[@feature='censhare:address.uri-generic']/@value_string"/>
                                              </a>
                                            </xsl:when>
                                            <xsl:when test="@value_key='xing'">
                                              <a class="asset-info-link" target="_blank">
                                                <xsl:attribute name="href" select="concat('http://www.xing.com/profile/', $uri)"/>
                                                <xsl:value-of select="asset_feature[@feature='censhare:address.uri-generic']/@value_string"/>
                                              </a>
                                            </xsl:when>
                                            <xsl:otherwise>
                                              <xsl:value-of select="$uri"/>
                                            </xsl:otherwise>
                                          </xsl:choose>
                                        </td>
                                      </tr>
                                    </xsl:for-each>
                                  </table>
                                </td>
                              </tr>
                            </xsl:if>
                            <xsl:if test="$postAddresses">
                              <tr>
                                <td class="asset-info-label">${address}:</td>
                                <td class="asset-info-value">
                                  <table cellpadding="0">
                                    <xsl:for-each select="$postAddresses">
                                      <xsl:sort select="cs:master-data('feature_value')[@feature=current()/@feature and @value_key=current()/@value_key]/@sorting" data-type="number" order="ascending"/>
                                      <tr>
                                        <td class="asset-info-value2" width="60"><xsl:value-of select="my:getFeatureValue(.)"/>:&#x00A0;&#x00A0;</td>
                                        <xsl:variable name="lines" select="(string-join((asset_feature[@feature='censhare:address.street'][1]/@value_string, asset_feature[@feature='censhare:address.street-number'][1]/@value_string), ' '), asset_feature[@feature='censhare:address.additional'][1]/@value_string, asset_feature[@feature='censhare:address.po-box'][1]/@value_string, string-join((asset_feature[@feature='censhare:address.zip-code'][1]/@value_string, asset_feature[@feature='censhare:address.city'][1]/@value_string), ' '), asset_feature[@feature='censhare:address.region'][1]/@value_string, if (asset_feature[@feature='censhare:address.country-code']) then my:getFeatureValue(asset_feature[@feature='censhare:address.country-code']) else '')"/>
                                        <td class="asset-info-value">
                                          <xsl:for-each select="$lines">
                                            <xsl:value-of select="."/>
                                            <br/>
                                          </xsl:for-each>
                                        </td>
                                      </tr>
                                    </xsl:for-each>
                                  </table>
                                </td>
                              </tr>
                            </xsl:if>
                          </xsl:for-each>
                        </xsl:if>
                      </xsl:if>
                      <!-- YouTube (show only, if one asset is selected) -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="youtubeID" select="asset[1]/asset_feature[@feature='censhare:youtube.id']/@value_string"/>
                        <xsl:variable name="youtubeTitle" select="asset[1]/asset_feature[@feature='censhare:youtube.title']/@value_string"/>
                        <xsl:variable name="youtubeDescription" select="asset[1]/asset_feature[@feature='censhare:youtube.description']/@value_string"/>
                        <xsl:variable name="youtubeKeywords" select="asset[1]/asset_feature[@feature='censhare:youtube.keywords']/@value_string"/>
                        <xsl:variable name="youtubeCategory" select="asset[1]/asset_feature[@feature='censhare:youtube.category']"/>
                        <xsl:variable name="youtubeOAuth" select="asset[1]/asset_feature[@feature='censhare:youtube.oauth-token']"/>
                        <xsl:if test="$youtubeID or $youtubeTitle or $youtubeDescription or $youtubeKeywords or $youtubeCategory or $youtubeOAuth">
                          <tr>
                            <td class="asset-info-label">YouTube:</td>
                            <td class="asset-info-value">
                              <table cellpadding="0">
                                <xsl:if test="$youtubeID">
                                  <tr>
                                    <td class="asset-info-value2">${url}:&#x00A0;&#x00A0;</td>
                                    <td class="asset-info-value">
                                      <a class="asset-info-link" target="_blank">
                                        <xsl:attribute name="href" select="concat('http://www.youtube.com/watch?v=', $youtubeID)"/>
                                        <xsl:value-of select="concat('www.youtube.com/watch?v=', $youtubeID)"/>
                                      </a>
                                    </td>
                                  </tr>
                                </xsl:if>
                                <xsl:if test="$youtubeTitle">
                                  <tr>
                                    <td class="asset-info-value2">${title}:&#x00A0;&#x00A0;</td>
                                    <td class="asset-info-value">
                                      <xsl:value-of select="$youtubeTitle"/>
                                    </td>
                                  </tr>
                                </xsl:if>
                                <xsl:if test="$youtubeDescription">
                                  <tr>
                                    <td class="asset-info-value2">${description}:&#x00A0;&#x00A0;</td>
                                    <td class="asset-info-value">
                                      <xsl:value-of select="$youtubeDescription"/>
                                    </td>
                                  </tr>
                                </xsl:if>
                                <xsl:if test="$youtubeKeywords">
                                  <tr>
                                    <td class="asset-info-value2">${keywords}:&#x00A0;&#x00A0;</td>
                                    <td class="asset-info-value">
                                      <xsl:value-of select="$youtubeKeywords"/>
                                    </td>
                                  </tr>
                                </xsl:if>
                                <xsl:if test="$youtubeCategory">
                                  <tr>
                                    <td class="asset-info-value2">${category}:&#x00A0;&#x00A0;</td>
                                    <td class="asset-info-value">
                                      <xsl:value-of select="my:getFeatureValue($youtubeCategory)"/>
                                    </td>
                                  </tr>
                                </xsl:if>
                                <xsl:if test="$youtubeOAuth">
                                  <tr>
                                    <td class="asset-info-value2">${authentication}:&#x00A0;&#x00A0;</td>
                                    <td class="asset-info-value">
                                      <xsl:value-of select="concat('${created} ', cs:format-date($youtubeOAuth/@timestamp, 'relative-short', 'short'))"/>
                                    </td>
                                  </tr>
                                </xsl:if>
                              </table>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Facebook (show only, if one asset is selected) -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="facebookID" select="asset[1]/asset_feature[@feature='censhare:facebook.id']/@value_string"/>
                        <xsl:variable name="facebookMessage" select="asset[1]/asset_feature[@feature='censhare:facebook.message']/@value_string"/>
                        <xsl:variable name="facebookOAuth" select="asset[1]/asset_feature[@feature='censhare:facebook.oauth-token']"/>
                        <xsl:if test="$facebookID or $facebookMessage or $facebookOAuth">
                          <tr>
                            <td class="asset-info-label">Facebook:</td>
                            <td class="asset-info-value">
                              <table cellpadding="0">
                                <xsl:if test="$facebookID">
                                  <tr>
                                    <td class="asset-info-value2">${url}:&#x00A0;&#x00A0;</td>
                                    <td class="asset-info-value">
                                      <a class="asset-info-link" target="_blank">
                                        <xsl:attribute name="href" select="concat('http://www.facebook.com/', $facebookID)"/>
                                        <xsl:value-of select="concat('www.facebook.com/', $facebookID)"/>
                                      </a>
                                    </td>
                                  </tr>
                                </xsl:if>
                                <xsl:if test="$facebookMessage">
                                  <tr>
                                    <td class="asset-info-value2">${message}:&#x00A0;&#x00A0;</td>
                                    <td class="asset-info-value">
                                      <xsl:value-of select="$facebookMessage"/>
                                    </td>
                                  </tr>
                                </xsl:if>
                                <xsl:if test="$facebookOAuth">
                                  <tr>
                                    <td class="asset-info-value2">${authentication}:&#x00A0;&#x00A0;</td>
                                    <td class="asset-info-value">
                                      <xsl:value-of select="concat('${created} ', cs:format-date($facebookOAuth/@timestamp, 'relative-short', 'short'))"/>
                                    </td>
                                  </tr>
                                </xsl:if>
                              </table>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Twitter (show only, if one asset is selected) -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="twitterID" select="asset[1]/asset_feature[@feature='censhare:twitter.id']/@value_string"/>
                        <xsl:variable name="twitterScreenName" select="asset[1]/asset_feature[@feature='censhare:twitter.screen-name']/@value_string"/>
                        <xsl:variable name="twitterMessage" select="asset[1]/asset_feature[@feature='censhare:twitter.message']/@value_string"/>
                        <xsl:variable name="twitterOAuth" select="asset[1]/asset_feature[@feature='censhare:twitter.oauth-token']"/>
                        <xsl:if test="($twitterID and $twitterScreenName) or $twitterMessage or $twitterOAuth">
                          <tr>
                            <td class="asset-info-label">Twitter:</td>
                            <td class="asset-info-value">
                              <table cellpadding="0">
                                <xsl:if test="$twitterID and $twitterScreenName">
                                  <tr>
                                    <td class="asset-info-value2">${url}:&#x00A0;&#x00A0;</td>
                                    <td class="asset-info-value">
                                      <a class="asset-info-link" target="_blank">
                                        <xsl:attribute name="href" select="concat('https://twitter.com/', $twitterScreenName, '/status/', $twitterID)"/>
                                        <xsl:value-of select="concat('twitter.com/', $twitterScreenName, '/status/', $twitterID)"/>
                                      </a>
                                    </td>
                                  </tr>
                                </xsl:if>
                                <xsl:if test="$twitterMessage">
                                  <tr>
                                    <td class="asset-info-value2">${message}:&#x00A0;&#x00A0;</td>
                                    <td class="asset-info-value">
                                      <xsl:value-of select="$twitterMessage"/>
                                    </td>
                                  </tr>
                                </xsl:if>
                                <xsl:if test="$twitterOAuth">
                                  <tr>
                                    <td class="asset-info-value2">${authentication}:&#x00A0;&#x00A0;</td>
                                    <td class="asset-info-value">
                                      <xsl:value-of select="concat('${created} ', cs:format-date($twitterOAuth/@timestamp, 'relative-short', 'short'))"/>
                                    </td>
                                  </tr>
                                </xsl:if>
                              </table>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Resource (show only, if one asset is selected) -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="resourceKey" select="asset[1]/asset_feature[@feature='censhare:resource-key']"/>
                        <xsl:if test="$resourceKey">
                          <xsl:variable name="resourceMeta" select="asset[1]/asset_feature[@feature='censhare:resource-meta']"/>
                          <tr>
                            <td class="asset-info-label">${resource}:</td>
                            <td class="asset-info-value">${quote-start}<xsl:value-of select="$resourceKey/@value_string"/>${quote-end} - <xsl:value-of select="upper-case(string-join($resourceMeta/xmldata/target-formats/format/@key, ', '))"/></td>
                          </tr>
                        </xsl:if>
                        <xsl:variable name="moduleSource" select="asset[1]/asset_feature[@feature='censhare:module-asset-source']"/>
                        <xsl:if test="$moduleSource">
                          <tr>
                            <td class="asset-info-label">${source}:</td>
                            <td class="asset-info-value"><xsl:value-of select="$moduleSource/@value_string"/></td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Download (show only, if one asset is selected) -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="downloadHash" select="asset[1]/asset_feature[@feature='censhare:download-hash']"/>
                        <xsl:if test="$downloadHash">
                          <xsl:variable name="expiryDate" select="asset[1]/asset_feature[@feature='censhare:expiry-date']"/>
                          <tr>
                            <td class="asset-info-label">${download}:</td>
                            <td class="asset-info-value">
                              <xsl:value-of select="concat('/tempDownload/', $downloadHash/@value_string)"/>
                              <span class="asset-info-label-inline"> ${until-(lowercase)} </span>
                              <xsl:value-of select="cs:format-date($expiryDate/@value_timestamp, 'relative-short', 'short')"/>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Fonts (show only, if one asset is selected) -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="fontAssetFeatures" select="asset[1]/asset_feature[@feature='censhare:font.name']"/>
                        <xsl:if test="$fontAssetFeatures">
                          <tr>
                            <td class="asset-info-label">${fonts}:</td>
                            <td class="asset-info-value">
                              <xsl:for-each select="$fontAssetFeatures">
                                <xsl:variable name="fontFamily" select="asset_feature[@feature='censhare:font.family']/@value_string"/>
                                <xsl:variable name="fontFace" select="asset_feature[@feature='censhare:font.face']/@value_string"/>
                                <xsl:value-of select="string-join(($fontFamily, if (ends-with($fontFamily, $fontFace)) then () else $fontFace), ' ')"/>
                                <br/>
                              </xsl:for-each>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Pages (show only, if target or actual child asset elements exists) -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="rootTargetElement" select="asset[1]/asset_element[@key='target.' and not(@parent_idx)]"/>
                        <xsl:variable name="childTargetElements" select="asset[1]/asset_element[@key='target.' and @parent_idx = $rootTargetElement/@idx]"/>
                        <xsl:variable name="rootActualElement" select="asset[1]/asset_element[@key='actual.' and not(@parent_idx)]"/>
                        <xsl:variable name="childActualElements" select="asset[1]/asset_element[@key='actual.' and @parent_idx = $rootActualElement/@idx]"/>
                        <xsl:if test="$childTargetElements or $childActualElements">
                          <tr>
                            <td class="asset-info-label">${pages}:</td>
                            <td class="asset-info-value">
                              <xsl:if test="$childActualElements">
                                <xsl:variable name="countActualElements" select="count($childActualElements)"/>
                                <xsl:value-of select="if ($countActualElements = 1) then '1 ${page}' else concat($countActualElements, ' ${pages}')"/>
                              </xsl:if>
                              <xsl:if test="$childTargetElements">
                                <xsl:variable name="countTargetElements" select="count($childTargetElements)"/>
                                <xsl:value-of select="concat(if ($childActualElements) then ', ' else '', if ($countTargetElements = 1) then '1 ${planned-page}' else concat($countTargetElements, ' ${planned-pages}'))"/>
                              </xsl:if>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Search (show only, if one asset is selected) -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="query" select="asset[1]/search_xml/query"/>
                        <xsl:if test="$query">
                          <tr>
                            <td class="asset-info-label">${search}:</td>
                            <td class="asset-info-value">
                              <xsl:call-template name="query">
                                <xsl:with-param name="type" select="'and'"/>
                                <xsl:with-param name="element" select="$query"/>
                              </xsl:call-template>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Variant info (show only, if one asset is selected) -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="parentRelations" select="asset[1]/parent_asset_rel[starts-with(@key, 'variant.')]"/>
                        <xsl:variable name="childRelations" select="asset[1]/child_asset_rel[starts-with(@key, 'variant.')]"/>
                        <xsl:if test="$parentRelations or $childRelations">
                          <tr>
                            <td class="asset-info-label">${variant}:</td>
                            <td class="asset-info-value">
                              <table cellpadding="0">
                                <xsl:if test="$parentRelations">
                                  <tr>
                                    <td class="asset-info-label">⬆</td>
                                    <td class="asset-info-value">
                                      <xsl:value-of select="my:getVariantTypeName($parentRelations[1]/@key)"/>
                                      <xsl:variable name="transformationAssetKey" select="$parentRelations[1]/asset_rel_feature[@feature='censhare:transformation-asset-key'][1]/@value_string"/>
                                      <xsl:variable name="isAutomatic" select="$parentRelations[1]/@variant_automatic='1'"/>
                                      <xsl:variable name="isUpdateFlag" select="$parentRelations[1]/@variant_update_flag='1'"/>
                                      <xsl:if test="$transformationAssetKey or $isAutomatic or $isUpdateFlag">
                                        <xsl:text> (</xsl:text>
                                        <xsl:variable name="transformationAsset" select="cs:get-asset(cs:cachelookup('resource_asset', '@key', $transformationAssetKey)/@asset_id)"/>
                                        <xsl:if test="$transformationAsset">
                                          <img width="12" height="12">
                                            <xsl:attribute name="src" select="concat($urlPrefix, 'assets/asset/id/', $transformationAsset/@id, '/icon/iconset/', $lafIconset, '/background/', $lafBackground, '/file')"/>
                                          </img>
                                          <xsl:value-of select="concat('&#160;', $transformationAsset/@name)"/>
                                        </xsl:if>
                                        <xsl:if test="$isAutomatic">
                                          <xsl:value-of select="concat(if ($transformationAsset) then ', ' else '', '${automatic}')"/>
                                        </xsl:if>
                                        <xsl:if test="$isUpdateFlag">
                                          <xsl:value-of select="concat(if ($transformationAsset or $isAutomatic) then ', ' else '', '${update-flag}')"/>
                                        </xsl:if>
                                        <xsl:text>)</xsl:text>
                                      </xsl:if>
                                    </td>
                                  </tr>
                                </xsl:if>
                                <xsl:if test="$childRelations">
                                  <xsl:variable name="variantKeys" select="distinct-values($childRelations/@key)"/>
                                  <tr>
                                    <td class="asset-info-label">⬇</td>
                                    <td class="asset-info-value">
                                      <xsl:for-each select="$variantKeys">
                                        <xsl:variable name="key" select="."/>
                                        <xsl:value-of select="concat(count($childRelations[@key=$key]), 'x ', my:getVariantTypeName($key))"/>
                                        <br/>
                                      </xsl:for-each>
                                    </td>
                                  </tr>
                                </xsl:if>
                              </table>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Placements info (show only, if one asset is selected) -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="parentRelations" select="asset[1]/parent_asset_rel[starts-with(@key, 'actual.') and @parent_currversion='0']"/>
                        <xsl:variable name="childRelations" select="asset[1]/child_asset_rel[starts-with(@key, 'actual.') and @child_currversion='0']"/>
                        <xsl:if test="$parentRelations or $childRelations">
                          <tr>
                            <td class="asset-info-label">${placements}:</td>
                            <td class="asset-info-value">
                              <table cellpadding="0">
                                <xsl:if test="$parentRelations">
                                  <tr>
                                    <td class="asset-info-label">⬆</td>
                                    <td class="asset-info-value">
                                      <xsl:value-of select="concat(count($parentRelations), ' ', if (count($parentRelations) > 1) then '${assets}' else '${asset}')"/>
                                    </td>
                                  </tr>
                                </xsl:if>
                                <xsl:if test="$childRelations">
                                  <tr>
                                    <td class="asset-info-label">⬇</td>
                                    <td class="asset-info-value">
                                      <xsl:value-of select="concat(count($childRelations), ' ', if (count($childRelations) > 1) then '${assets}' else '${asset}')"/>
                                    </td>
                                  </tr>
                                </xsl:if>
                              </table>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Costs -->
                      <xsl:variable name="plannedCostsFeatures" select="asset/asset_feature[@feature='censhare:costs-type' and @value_key='censhare:costs-planned']"/>
                      <xsl:variable name="actualCostsFeatures" select="asset/asset_feature[@feature='censhare:costs-type' and @value_key='censhare:costs-actual']"/>
                      <xsl:if test="$plannedCostsFeatures or $actualCostsFeatures">
                        <tr>
                          <td class="asset-info-label">${costs}:</td>
                          <td class="asset-info-value">
                            <table cellpadding="0">
                              <xsl:variable name="plannedCosts" select="my:getCostsOfAssetFeatures($plannedCostsFeatures)"/>
                              <xsl:if test="$plannedCosts">
                                <tr>
                                  <td><span class="asset-info-label-inline">${planned}:</span></td>
                                  <td><xsl:value-of select="'&#160;€&#160;'"/></td>
                                  <td class="asset-info-value" align="right">
                                    <xsl:value-of select="cs:format-number($plannedCosts, '#,##0.00')"/><br/>
                                  </td>
                                </tr>
                              </xsl:if>
                              <xsl:variable name="actualCosts" select="my:getCostsOfAssetFeatures($actualCostsFeatures)"/>
                              <xsl:if test="$actualCosts">
                                <tr>
                                  <td><span class="asset-info-label-inline">${actual}:</span></td>
                                  <td><xsl:value-of select="'&#160;€&#160;'"/></td>
                                  <td class="asset-info-value" align="right">
                                    <xsl:value-of select="cs:format-number($actualCosts, '#,##0.00')"/><br/>
                                  </td>
                                </tr>
                              </xsl:if>
                              <xsl:if test="$plannedCosts and $actualCosts">
                                <tr>
                                  <xsl:variable name="isOverPlanned" select="$plannedCosts - $actualCosts lt 0"/>
                                  <xsl:if test="$isOverPlanned">
                                    <xsl:attribute name="style" select="'color:red;'"/>
                                  </xsl:if>
                                  <td><span class="asset-info-label-inline"><xsl:value-of select="concat(if ($isOverPlanned) then '${above}' else '${below}', ':')"/></span></td>
                                  <td><xsl:value-of select="'&#160;€&#160;'"/></td>
                                  <td class="asset-info-value" align="right">
                                    <xsl:value-of select="cs:format-number(abs($plannedCosts - $actualCosts), '#,##0.00')"/><br/>
                                  </td>
                                </tr>
                              </xsl:if>
                            </table>
                          </td>
                        </tr>
                      </xsl:if>
                      <!-- Language (show only, if all assets have same value) -->
                      <xsl:variable name="values" select="asset/@language"/>
                      <xsl:if test="count($values)=$assetCount and cs:equal-values($values)">
                        <tr>
                          <td class="asset-info-label">${language}:</td>
                          <td class="asset-info-value"><xsl:value-of select="cs:cachelookup('language_def', '@id', $values[1])/@name"/></td>
                        </tr>
                      </xsl:if>
                      <!-- Author (show only, if all assets have same value) -->
                      <xsl:variable name="values" select="asset/@author"/>
                      <xsl:if test="count($values)=$assetCount and cs:equal-values($values)">
                        <tr>
                          <td class="asset-info-label">${author}:</td>
                          <td class="asset-info-value"><xsl:value-of select="$values[1]"/></td>
                        </tr>
                      </xsl:if>
                      <!-- Keywords (show only, if all assets have same value) -->
                      <xsl:variable name="values" select="asset/@keywords"/>
                      <xsl:if test="count($values)=$assetCount and cs:equal-values($values)">
                        <tr>
                          <td class="asset-info-label">${keywords}:</td>
                          <td class="asset-info-value"><xsl:value-of select="$values[1]"/></td>
                        </tr>
                      </xsl:if>
                      <!-- Keyword features (show only, if one asset is selected) -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="featureList" select="asset[1]/asset_feature[@feature='censhare:keyword']"/>
                        <xsl:if test="$featureList">
                          <tr>
                            <td class="asset-info-label">${keywords}:</td>
                            <td class="asset-info-value">
                              <xsl:value-of select="string-join(for $x in $featureList return my:getFeatureValueHierarchical($x, '/', true()), ', ')"/>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Annotation (show only, if all assets have same value) -->
                      <xsl:variable name="values" select="asset/@annotation"/>
                      <xsl:if test="count($values)=$assetCount and cs:equal-values($values)">
                        <tr>
                          <td class="asset-info-label">${annotation}:</td>
                          <td class="asset-info-value">
                            <xsl:call-template name="lineBreak">
                              <xsl:with-param name="text" select="$values[1]"/>
                            </xsl:call-template>
                          </td>
                        </tr>
                      </xsl:if>
                      <!-- Description (show only, if all assets have same value) -->
                      <xsl:variable name="values" select="asset/@description"/>
                      <xsl:if test="count($values)=$assetCount and cs:equal-values($values)">
                        <tr>
                          <td class="asset-info-label">${description}:</td>
                          <td class="asset-info-value">
                            <xsl:call-template name="lineBreak">
                              <xsl:with-param name="text" select="$values[1]"/>
                            </xsl:call-template>
                          </td>
                        </tr>
                      </xsl:if>
                      <!-- Deadline (show only, if all assets have same value) -->
                      <xsl:variable name="values" select="asset/@deadline_actual"/>
                      <xsl:if test="count($values)=$assetCount and cs:equal-values($values)">
                        <tr>
                          <td class="asset-info-label">${deadline}:</td>
                          <td class="asset-info-value"><xsl:value-of select="cs:format-date($values[1], 'relative-short', 'short')"/></td>
                        </tr>
                      </xsl:if>
                      <!-- Cancellation (show only, if all assets have same value) -->
                      <xsl:variable name="values" select="asset/@cancelled"/>
                      <xsl:if test="count($values)=$assetCount and cs:equal-values($values)">
                        <tr>
                          <td class="asset-info-label">${cancellation}:</td>
                          <td class="asset-info-value"><xsl:value-of select="if ($values[1]='1') then '${cancelled}' else ''"/></td>
                        </tr>
                      </xsl:if>
                      <!-- Archive (show only, if all assets have values > 0 and same value) -->
                      <xsl:variable name="values" select="asset/@storage_state"/>
                      <xsl:if test="count($values)=$assetCount and $values[1]>0 and cs:equal-values($values)">
                        <tr>
                          <td class="asset-info-label">${archive}:</td>
                          <td class="asset-info-value">
                            <xsl:variable name="x" select="$values[1]"/>
                            <xsl:choose>
                              <xsl:when test="$x='1'">${archived}</xsl:when>
                              <xsl:when test="$x='2'">${proposed-for-archiving}</xsl:when>
                              <xsl:when test="$x='3'">${marked-for-archiving}</xsl:when>
                              <xsl:when test="$x='4'">${archiving-in-progress}</xsl:when>
                              <xsl:when test="$x='5'">${proposed-for-dearchiving}</xsl:when>
                              <xsl:when test="$x='6'">${marked-for-dearchiving}</xsl:when>
                              <xsl:when test="$x='7'">${dearchiving-in-progress}</xsl:when>
                            </xsl:choose>
                          </td>
                        </tr>
                      </xsl:if>
                      <!-- Deletion (show only, if all assets have values > 0 and same value) -->
                      <xsl:variable name="values" select="asset/@deletion"/>
                      <xsl:if test="count($values)=$assetCount and $values[1]>0 and cs:equal-values($values)">
                        <tr>
                          <td class="asset-info-label">${deletion}:</td>
                          <td class="asset-info-value">
                            <xsl:variable name="x" select="$values[1]"/>
                            <xsl:choose>
                              <xsl:when test="$x='1'">${marked-for-deletion}</xsl:when>
                              <xsl:when test="$x='2'">${cannot-delete}</xsl:when>
                              <xsl:when test="$x='3'">${delete-physically}</xsl:when>
                              <xsl:when test="$x='4'">${proposed-for-deletion}</xsl:when>
                            </xsl:choose>
                          </td>
                        </tr>
                      </xsl:if>
                      <!-- Planning mode  -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="planningMode" select="asset/asset_feature[@feature='censhare:planning-mode']/@value_key"/>
                        <xsl:if test="$planningMode">
                          <tr>
                            <td class="asset-info-label">${planning-mode}:</td>
                            <td class="asset-info-value">
                              <xsl:value-of select="cs:cachelookup('feature_value', '@feature', 'censhare:planning-mode', '@value_key', $planningMode)/@name"/>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Workflow (show only, if all assets have same value) -->
                      <xsl:variable name="values" select="asset/@wf_id"/>
                      <xsl:if test="count($values)=$assetCount and cs:equal-values($values)">
                        <tr>
                          <td class="asset-info-label">${workflow}:</td>
                          <td class="asset-info-value">
                            <xsl:value-of select="cs:cachelookup('workflow', '@id', $values[1])/@name"/>
                            <xsl:variable name="steps" select="asset/@wf_step"/>
                            <xsl:if test="count($steps)=$assetCount and cs:equal-values($steps)">
                              <span class="asset-info-label-inline"> ${step}: </span>
                              <xsl:value-of select="cs:cachelookup('workflow_step', '@wf_id', $values[1], '@wf_step', $steps[1])/@name"/>
                            </xsl:if>
                            <xsl:variable name="targets" select="asset/@wf_target"/>
                            <xsl:if test="count($targets)=$assetCount and cs:equal-values($targets)">
                              <span class="asset-info-label-inline"> ${assigned-to}: </span>
                              <xsl:value-of select="my:DisplayNameOrID($targets[1])"/>
                            </xsl:if>
                          </td>
                        </tr>
                      </xsl:if>
                      <!-- Notes  (show count of notes of all selected assets) -->
                      <xsl:variable name="notes" select="asset/actual_notes/note"/>
                      <xsl:if test="$notes">
                        <tr>
                          <td class="asset-info-label">${notes}:</td>
                          <td class="asset-info-value"><xsl:value-of select="concat(count($notes), ' ', if (count($notes) = 1) then '${note}' else '${notes}')"/></td>
                        </tr>
                      </xsl:if>
                      <!-- Files -->
                      <xsl:variable name="storageItems" select="asset/storage_item"/>
                      <xsl:variable name="masterStorageItems" select="$storageItems[@key='master']"/>
                      <xsl:variable name="defaultStorageKeys" select="('master', 'preview', 'thumbnail', 'text-preview', 'content')"/>
                      <xsl:variable name="additionalStorageItems" select="$storageItems[empty(index-of($defaultStorageKeys, @key))]"/>
                      <xsl:if test="$masterStorageItems or $additionalStorageItems">
                        <tr>
                          <td class="asset-info-label">${files}:</td>
                          <td class="asset-info-value">
                            <!-- Master storage items -->
                            <xsl:choose>
                              <xsl:when test="$masterStorageItems">
                                <xsl:if test="$assetCount = 1">
                                  <xsl:for-each select="$masterStorageItems">
                                    <xsl:value-of select="cs:cachelookup('mimetype', '@mimetype', @mimetype)/@name"/>
                                    <xsl:value-of select="if (@mimetype = 'application/indesign' and @app_version) then (for $x in @app_version return (substring-after(cs:master-data('indesign_version')[app_versions/app_version/@version=$x and @edition='standard']/applications/indesign/@name, 'Adobe InDesign'))) else ''"/>
                                    <xsl:value-of select="if (@filelength > 0) then concat(', ', my:getFileSizeString(@filelength)) else ''"/>
                                    <xsl:variable name="elementIDx" select="@element_idx"/>
                                    <xsl:variable name="assetElement" select="../asset_element[@idx=$elementIDx and @key='actual.']"/>
                                    <xsl:value-of select="if ($assetElement/@width_mm and $assetElement/@height_mm) then concat(', ', cs:format-number($assetElement/@width_mm, '#,##0.0'), 'x', cs:format-number($assetElement/@height_mm, '#,##0.0'), ' mm') else ''"/>
                                    <xsl:value-of select="if (@width_px and @height_px) then concat(', ', cs:format-number(@width_px, '#,###'), 'x', cs:format-number(@height_px, '#,###'), ' ${pixels}') else ''"/>
                                    <xsl:value-of select="if (@dpi) then concat(', ', cs:format-number(@dpi, '#,###'), ' ${dpi}') else ''"/>
                                    <xsl:value-of select="if (@duration_sec) then concat(', ${duration} ', my:getDurationString(@duration_sec)) else ''"/>
                                    <xsl:value-of select="if (@audio_format) then concat(', ', @audio_format) else ''"/>
                                    <xsl:value-of select="if (@video_format) then concat(', ', @video_format) else ''"/>
                                    <xsl:value-of select="if (@frames_per_second) then concat(', ', round(@frames_per_second), ' fps') else ''"/>
                                    <xsl:value-of select="if (@bitrate_mbps) then concat(', ', cs:format-number(@bitrate_mbps, '#,##0.0##'), ' Mbit/s') else ''"/>
                                    <xsl:value-of select="if (@color) then concat(', ', for $x in @color return if ($x='bw') then '${bitmap}' else if ($x='gs') then '${grey}' else if ($x='idx') then '${indexed}' else if ($x='rgb') then '${rgb}' else if ($x='lab') then '${lab}' else if ($x='cmyk') then '${cmyk}' else '$x') else ''"/>
                                    <xsl:value-of select="if (@charcount) then concat(', ', cs:format-number(@charcount, '#,###'), ' ${chars}') else ''"/>
                                    <xsl:value-of select="if (@wordcount) then concat(', ', cs:format-number(@wordcount, '#,###'), ' ${words}') else ''"/>
                                    <xsl:value-of select="if (@linecount) then concat(', ', cs:format-number(@linecount, '#,###'), ' ${lines}') else ''"/>
                                    <br/>
                                  </xsl:for-each>
                                </xsl:if>
                                <xsl:if test="$assetCount > 1 or count($masterStorageItems) > 1">
                                  <xsl:if test="$assetCount = 1">
                                    <span class="asset-info-label-inline">${sum}: </span>
                                  </xsl:if>
                                  <xsl:variable name="fileCount" select="count($masterStorageItems)"/>
                                  <xsl:variable name="charCount" select="sum($masterStorageItems/@charcount)"/>
                                  <xsl:variable name="wordCount" select="sum($masterStorageItems/@wordcount)"/>
                                  <xsl:variable name="lineCount" select="sum($masterStorageItems/@linecount)"/>
                                  <xsl:value-of select="concat(if ($fileCount=1) then '1 ${file}' else concat($fileCount, ' ${files}'), ', ', my:getFileSizeString(sum($masterStorageItems/@filelength)), if ($charCount > 0) then concat(', ', cs:format-number($charCount, '#,###'), ' ${chars}') else '', if ($wordCount > 0) then concat(', ', cs:format-number($wordCount, '#,###'), ' ${words}') else '', if ($lineCount > 0) then concat(', ', cs:format-number($lineCount, '#,###'), ' ${lines}') else '')"/>
                                  <br/>
                               </xsl:if>
                              </xsl:when>
                              <xsl:otherwise>${no-master-file}<br/></xsl:otherwise>
                            </xsl:choose>
                            <!-- Additional storage items -->
                            <xsl:for-each select="distinct-values($additionalStorageItems/@key)">
                              <xsl:variable name="storageKey" select="."/>
                              <xsl:variable name="storageItems" select="$additionalStorageItems[@key=$storageKey]"/>
                              <xsl:value-of select="concat(count($storageItems),'x ', cs:cachelookup('storage_keydef', '@key', $storageKey)/@name, ', ', my:getFileSizeString(sum($storageItems/@filelength)))"/>
                              <br/>
                            </xsl:for-each>
                          </td>
                        </tr>
                      </xsl:if>
                      <!-- Production flags -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="featureList" select="asset/asset_feature[@feature='censhare:asset-flag']"/>
                        <xsl:if test="$featureList">
                          <tr>
                            <td class="asset-info-label">${production-flags}:</td>
                            <td class="asset-info-value"><xsl:value-of select="string-join(for $x in $featureList return my:getFeatureValue($x), ', ')"/></td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Categories -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="featureList" select="asset/asset_feature[@feature='censhare:category']"/>
                        <xsl:if test="$featureList">
                          <tr>
                            <td class="asset-info-label">${categories}:</td>
                            <td class="asset-info-value"><xsl:value-of select="string-join(for $x in $featureList return my:getFeatureValue($x), ', ')"/></td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Category features -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="featureList" select="asset/asset_feature[cs:cachelookup('feature', '@key', @feature, '@type', 'censhare:category-feature')]"/>
                        <xsl:if test="$featureList">
                          <tr>
                            <td class="asset-info-label">${category-features}:</td>
                            <td class="asset-info-value">
                              <xsl:for-each select="$featureList">
                                <span class="asset-info-label-inline"><xsl:value-of select="my:getFeatureName(.)"/>: </span>
                                <xsl:copy-of select="my:getFeatureValue(.)"/>
                                <br/>
                              </xsl:for-each>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Features -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="assetFeatures" select="asset//asset_feature[cs:cachelookup('feature', '@key', @feature)/@isassetinfo!=0]"/>
                        <xsl:if test="$assetFeatures">
                          <xsl:for-each select="$assetFeatures">
                             <xsl:sort select="cs:master-data('feature')[@key=current()/@feature]/@assetinfo_sorting" data-type="number"/>
                            <xsl:variable name="assetFeature" select="."/>
                            <tr>
                              <td class="asset-info-label"><xsl:value-of select="my:getFeatureName(.)"/>:</td>
                              <td class="asset-info-value">
                                <xsl:copy-of select="my:getFeatureValue(.)"/>
                                <xsl:variable name="feature" select="cs:master-data('feature')[@key=$assetFeature/@feature]"/>
                                <xsl:if test="$feature/@has_relevance='1' and $assetFeature/@relevance_percentage">
                                  <span class="asset-info-label-inline">&#160;➔<xsl:value-of select="cs:format-number($assetFeature/@relevance_percentage, '0.0')"/>%</span>
                                </xsl:if>
                                <br/>
                              </td>
                            </tr>
                          </xsl:for-each>
                        </xsl:if>
                      </xsl:if>
                      <!-- QuickTime infos -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="featureList" select="asset/asset_feature[@feature='censhare:quicktime']/asset_feature"/>
                        <xsl:if test="$featureList">
                          <tr>
                            <td class="asset-info-label">${features}:</td>
                            <td class="asset-info-value">
                              <xsl:for-each select="$featureList">
                                <span class="asset-info-label-inline"><xsl:value-of select="my:getFeatureName(.)"/>: </span>
                                <xsl:copy-of select="my:getFeatureValue(.)"/>
                                <br/>
                              </xsl:for-each>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Exif infos -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="exif" select="asset/asset_feature[@feature='censhare:exif']"/>
                        <xsl:if test="$exif">
                          <xsl:variable name="model" select="$exif/asset_feature[@feature='censhare:exif.model']"/>
                          <xsl:variable name="lens" select="$exif/asset_feature[@feature='censhare:exif.lens']"/>
                          <xsl:variable name="iso" select="$exif/asset_feature[@feature='censhare:exif.iso']"/>
                          <xsl:variable name="focalLength" select="$exif/asset_feature[@feature='censhare:exif.focal-length']"/>
                          <xsl:variable name="exposureCompensation" select="$exif/asset_feature[@feature='censhare:exif.exposure-compensation']"/>
                          <xsl:variable name="aperture" select="$exif/asset_feature[@feature='censhare:exif.aperture']"/>
                          <xsl:variable name="shutterSpeed" select="$exif/asset_feature[@feature='censhare:exif.shutter-speed']"/>
                          <xsl:variable name="whiteBalance" select="$exif/asset_feature[@feature='censhare:exif.white-balance']"/>
                          <xsl:variable name="meteringMode" select="$exif/asset_feature[@feature='censhare:exif.metering-mode']"/>
                          <xsl:variable name="flash" select="$exif/asset_feature[@feature='censhare:exif.flash']/@value_long = 1"/>
                          <xsl:if test="$model or $lens or $iso or $focalLength or $aperture or $shutterSpeed or $whiteBalance or $meteringMode or $flash">
                            <tr>
                              <td class="asset-info-label">${camera}:</td>
                              <td class="asset-info-value">
                                <!-- Exif: camera model -->
                                <xsl:if test="$model">
                                  <table cellpadding="0">
                                    <tr>
                                      <td class="asset-info-value">
                                        <xsl:call-template name="iconImage">
                                          <xsl:with-param name="key" select="'camera'"/>
                                        </xsl:call-template>
                                      </td>
                                      <td class="asset-info-value">
                                        <nobr><xsl:value-of select="concat('&#160;', $model/@value_string)"/></nobr>
                                      </td>
                                    </tr>
                                  </table>
                                </xsl:if>
                                <!-- Exif: lens -->
                                <xsl:if test="$lens">
                                  <table cellpadding="0">
                                    <tr>
                                      <td class="asset-info-value">
                                        <xsl:call-template name="iconImage">
                                          <xsl:with-param name="key" select="'lens'"/>
                                        </xsl:call-template>
                                      </td>
                                      <td class="asset-info-value">
                                        <nobr><xsl:value-of select="concat('&#160;', $lens/@value_string)"/></nobr>
                                      </td>
                                    </tr>
                                  </table>
                                </xsl:if>
                                <!-- Exif: iso, focal length, aperture and shutter speed -->
                                <xsl:if test="$iso or $focalLength or $aperture or $shutterSpeed">
                                  <table cellpadding="0">
                                    <tr>
                                      <xsl:if test="$iso">
                                        <td class="asset-info-value">
                                          <xsl:call-template name="iconImage">
                                            <xsl:with-param name="key" select="'iso'"/>
                                          </xsl:call-template>
                                        </td>
                                        <td class="asset-info-value">
                                          <nobr><xsl:value-of select="concat('&#160;', $iso/@value_long, '&#8195;')"/></nobr>
                                        </td>
                                      </xsl:if>
                                      <xsl:if test="$focalLength">
                                        <td class="asset-info-value">
                                          <xsl:call-template name="iconImage">
                                            <xsl:with-param name="key" select="'focal-length'"/>
                                          </xsl:call-template>
                                        </td>
                                        <td class="asset-info-value">
                                          <nobr><xsl:value-of select="concat('&#160;', $focalLength/@value_double, 'mm&#8195;')"/></nobr>
                                        </td>
                                      </xsl:if>
                                      <xsl:if test="$exposureCompensation">
                                        <td class="asset-info-value">
                                          <xsl:call-template name="iconImage">
                                            <xsl:with-param name="key" select="'exposure-compensation'"/>
                                          </xsl:call-template>
                                        </td>
                                        <td class="asset-info-value">
                                          <nobr><xsl:value-of select="concat('&#160;', $exposureCompensation/@value_long, ' EV&#8195;')"/></nobr>
                                        </td>
                                      </xsl:if>
                                      <xsl:if test="$aperture">
                                        <td class="asset-info-value">
                                          <xsl:call-template name="iconImage">
                                            <xsl:with-param name="key" select="'aperture'"/>
                                          </xsl:call-template>
                                        </td>
                                        <td class="asset-info-value">
                                          <nobr><xsl:value-of select="concat('&#160;', 'ƒ/', $aperture/@value_double, '&#8195;')"/></nobr>
                                        </td>
                                      </xsl:if>
                                      <xsl:if test="$shutterSpeed">
                                        <td class="asset-info-value">
                                          <xsl:call-template name="iconImage">
                                            <xsl:with-param name="key" select="'stop-watch'"/>
                                          </xsl:call-template>
                                        </td>
                                        <td class="asset-info-value">
                                          <nobr><xsl:value-of select="concat('&#160;', $shutterSpeed/@value_string, '&#8195;')"/></nobr>
                                        </td>
                                      </xsl:if>
                                    </tr>
                                  </table>
                                </xsl:if>
                                <!-- Exif: white balance, metering mode and flash -->
                                <xsl:if test="$whiteBalance or $meteringMode or $flash">
                                  <table cellpadding="0">
                                    <tr>
                                      <xsl:if test="$whiteBalance">
                                        <td class="asset-info-value">
                                          <xsl:call-template name="iconImage">
                                            <xsl:with-param name="key" select="'white-balance'"/>
                                          </xsl:call-template>
                                        </td>
                                        <td class="asset-info-value">
                                          <xsl:value-of select="concat('&#160;', my:getFeatureValue($whiteBalance), '&#8195;')"/>
                                        </td>
                                      </xsl:if>
                                      <xsl:if test="$meteringMode">
                                        <td class="asset-info-value">
                                          <xsl:call-template name="iconImage">
                                            <xsl:with-param name="key" select="'metering-mode'"/>
                                          </xsl:call-template>
                                        </td>
                                        <td class="asset-info-value">
                                          <xsl:value-of select="concat('&#160;', my:getFeatureValue($meteringMode), '&#8195;')"/>
                                        </td>
                                      </xsl:if>
                                      <xsl:if test="$flash">
                                        <td class="asset-info-value">
                                          <xsl:call-template name="iconImage">
                                            <xsl:with-param name="key" select="'flash'"/>
                                          </xsl:call-template>
                                        </td>
                                        <td class="asset-info-value">
                                          <xsl:value-of select="'&#160;${flash}&#8195;'"/>
                                        </td>
                                      </xsl:if>
                                    </tr>
                                  </table>
                                </xsl:if>
                              </td>
                            </tr>
                          </xsl:if>
                        </xsl:if>
                      </xsl:if>
                      <!-- Coordinates -->
                      <xsl:variable name="elements" select="asset//asset_feature[@feature='censhare:geo-coord']"/>
                      <xsl:if test="exists($elements)">
                        <tr>
                          <td class="asset-info-label">${coordinates}:</td>
                          <td class="asset-info-value">
                            <xsl:value-of select="if (count($elements) = 1) then concat(cs:format-number($elements[1]/@value_double, '#,##0.000'), '° ${latitude}, ', cs:format-number($elements[1]/@value_double2, '#,##0.000'), '° ${longitude}') else concat(count($elements), ' ${positions}')"/>
                          </td>
                        </tr>
                      </xsl:if>
                      <!-- Rating -->
                      <xsl:variable name="featureList" select="(asset/asset_feature[@feature='censhare:rating'], asset/asset_feature[@feature='censhare:xmp']/asset_feature[@feature='censhare:xmp.rating' and @value_double &gt; 0.0])"/>
                      <xsl:if test="$featureList">
                        <tr>
                          <td class="asset-info-label">${rating}:</td>
                          <td class="asset-info-value">
                            <table cellpadding="0">
                              <tr>
                                <td class="asset-info-value">
                                  <nobr><xsl:value-of select="for $x in avg($featureList/@value_double) return if ($x&lt;5.5) then concat(if ($x&lt;0.5) then '${0-star}' else if ($x&lt;1.5) then '${1-star}' else if ($x&lt;2.5) then '${2-star}' else if ($x&lt;3.5) then '${3-star}' else if ($x&lt;4.5) then '${4-star}' else if ($x&lt;5.5) then '${5-star}' else '', ' ∅', cs:format-number($x, '#,##0.0')) else ''"/></nobr>
                                  <xsl:text>&#8195;</xsl:text>
                                </td>
                                <td class="asset-info-value">
                                  <xsl:variable name="myRating" select="if ($assetCount = 1) then asset/asset_feature[@feature='censhare:rating' and @party=$partyID] else ()"/>
                                  <xsl:variable name="xmpRating" select="if ($assetCount = 1) then asset/asset_feature[@feature='censhare:xmp']/asset_feature[@feature='censhare:xmp.rating'] else ()"/>
                                  <nobr><xsl:value-of select="concat('${5-star}', ' (', count($featureList[@value_double='5.0']), ')', if($myRating and $myRating/@value_double='5.0') then ('&#8195;${my}') else if($xmpRating and $xmpRating/@value_double='5.0') then ('&#8195;XMP') else ())"/></nobr><br/>
                                  <nobr><xsl:value-of select="concat('${4-star}', ' (', count($featureList[@value_double='4.0']), ')', if($myRating and $myRating/@value_double='4.0') then ('&#8195;${my}') else if($xmpRating and $xmpRating/@value_double='4.0') then ('&#8195;XMP') else ())"/></nobr><br/>
                                  <nobr><xsl:value-of select="concat('${3-star}', ' (', count($featureList[@value_double='3.0']), ')', if($myRating and $myRating/@value_double='3.0') then ('&#8195;${my}') else if($xmpRating and $xmpRating/@value_double='3.0') then ('&#8195;XMP') else ())"/></nobr><br/>
                                  <nobr><xsl:value-of select="concat('${2-star}', ' (', count($featureList[@value_double='2.0']), ')', if($myRating and $myRating/@value_double='2.0') then ('&#8195;${my}') else if($xmpRating and $xmpRating/@value_double='2.0') then ('&#8195;XMP') else ())"/></nobr><br/>
                                  <nobr><xsl:value-of select="concat('${1-star}', ' (', count($featureList[@value_double='1.0']), ')', if($myRating and $myRating/@value_double='1.0') then ('&#8195;${my}') else if($xmpRating and $xmpRating/@value_double='1.0') then ('&#8195;XMP') else ())"/></nobr>
                                </td>
                              </tr>
                            </table>
                          </td>
                        </tr>
                      </xsl:if>
                      <!-- Period -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="featureList" select="asset/asset_feature[@feature='censhare:period']"/>
                        <xsl:if test="$featureList">
                          <tr>
                            <td class="asset-info-label">${periods}:</td>
                            <td class="asset-info-value"><xsl:value-of select="string-join(for $x in $featureList return concat(cs:format-date($x/@value_timestamp, 'relative-short', 'short'), '-', cs:format-date($x/@value_timestamp2, 'relative-short', 'short')), ', ')"/></td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Output channel -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="featureList" select="asset/asset_feature[@feature='censhare:output-channel']"/>
                        <xsl:if test="$featureList">
                          <tr>
                            <td class="asset-info-label">${channels}:</td>
                            <td class="asset-info-value">
                              <xsl:value-of select="string-join(for $x in $featureList return my:getFeatureValueHierarchical($x, '/', true()), ', ')"/>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Domains -->
                      <xsl:variable name="domain1" select="cs:equal-values(asset/@domain, asset[1]/@domain, false())"/>
                      <xsl:variable name="domain2" select="cs:equal-values(asset/@domain2, asset[1]/@domain2, false())"/>
                      <xsl:if test="($domain1 or $domain2) and ($domain1!='root.' or $domain2!='root.')">
                        <tr>
                          <td class="asset-info-label">${domain}:</td>
                          <td class="asset-info-value">
                            <xsl:if test="$domain1 and $domain1!='root.'">
                              <span class="asset-info-label-inline">${1st}: </span>
                              <xsl:value-of select="my:getLocalizedValueHierarchical($domain1, 'domain', '@pathid', '/', true())"/>
                              <xsl:text> </xsl:text>
                            </xsl:if>
                            <xsl:if test="$domain2 and $domain2!='root.'">
                              <span class="asset-info-label-inline">${2nd}: </span>
                              <xsl:value-of select="my:getLocalizedValueHierarchical($domain2, 'domain2', '@pathid', '/', true())"/>
                            </xsl:if>
                          </td>
                        </tr>
                      </xsl:if>
                      <!-- Created -->
                      <xsl:variable name="date" select="cs:equal-values(asset/@creation_date, asset[1]/@creation_date, false())"/>
                      <xsl:variable name="by" select="cs:equal-values(asset/@created_by, asset[1]/@created_by, false())"/>
                      <xsl:if test="$date or $by">
                        <tr>
                          <td class="asset-info-label">${created}:</td>
                          <td class="asset-info-value">
                            <xsl:call-template name="previewDateAndBy">
                              <xsl:with-param name="date" select="$date"/>
                              <xsl:with-param name="by" select="$by"/>
                            </xsl:call-template>
                          </td>
                        </tr>
                      </xsl:if>
                      <!-- Modified -->
                      <xsl:variable name="date" select="cs:equal-values(asset/@modified_date, asset[1]/@modified_date, false())"/>
                      <xsl:variable name="by" select="cs:equal-values(asset/@modified_by, asset[1]/@modified_by, false())"/>
                      <xsl:if test="$date or $by">
                        <tr>
                          <td class="asset-info-label">${modified}:</td>
                          <td class="asset-info-value">
                            <xsl:call-template name="previewDateAndBy">
                              <xsl:with-param name="date" select="$date"/>
                              <xsl:with-param name="by" select="$by"/>
                            </xsl:call-template>
                          </td>
                        </tr>
                      </xsl:if>
                      <!-- Opened -->
                      <xsl:variable name="by" select="cs:equal-values(asset/@checked_out_by, asset[1]/@checked_out_by, false())"/>
                      <xsl:if test="$by">
                        <xsl:variable name="date" select="cs:equal-values(asset/@checked_out_date, asset[1]/@checked_out_date, false())"/>
                        <tr>
                          <td class="asset-info-label">${opened}:</td>
                          <td class="asset-info-value">
                            <xsl:call-template name="previewDateAndBy">
                              <xsl:with-param name="date" select="$date"/>
                              <xsl:with-param name="by" select="$by"/>
                            </xsl:call-template>
                          </td>
                        </tr>
                      </xsl:if>
                      <!-- Owners (show only, if one asset is selected) -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="featureList" select="asset/asset_feature[@feature='censhare:owner']"/>
                        <xsl:if test="$featureList">
                          <tr>
                            <td class="asset-info-label">${owners}:</td>
                            <td class="asset-info-value">
                              <xsl:for-each select="$featureList">
                                <xsl:value-of select="my:DisplayNameOrID(@value_long)"/>
                                <br/>
                              </xsl:for-each>
                            </td>
                          </tr>
                          <tr>
                            <td class="asset-info-label">${non-owner}:</td>
                            <td class="asset-info-value">
                              <xsl:variable name="nonOwnerAccess" select="cs:equal-values(asset/@non_owner_access, asset[1]/@non_owner_access, false)"/>
                              <xsl:value-of select="if ($nonOwnerAccess=0) then '${unrestricted-access}' else if ($nonOwnerAccess=1) then '${read-only-access}' else if ($nonOwnerAccess=2) then '${no-access}' else ''"/>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                      <!-- Info -->
                      <tr>
                        <td class="asset-info-label">${info}:</td>
                        <td class="asset-info-value2">
                          <xsl:value-of select="concat('${application}: ', if (cs:equal-values(asset/@application)) then cs:cachelookup('asset_application', '@id', asset[1]/@application)/@name else '${multiple-values}')"/>
                          <xsl:if test="$assetCount=1">
                            <xsl:value-of select="concat(', ${id}: ', asset[1]/@id, ', ${version}: ', asset[1]/@version)"/>
                          </xsl:if>
                        </td>
                      </tr>
                      <!-- uuid’s -->
                      <xsl:if test="$assetCount=1">
                        <xsl:variable name="uuids" select="asset[1]/asset_feature[@feature='censhare:uuid']"/>
                        <xsl:if test="$uuids">
                          <tr>
                            <td class="asset-info-label">${uuids}:</td>
                            <td class="asset-info-value2">
                              <xsl:for-each select="$uuids">
                                <nobr><xsl:value-of select="@value_string"/></nobr>
                                <xsl:if test="position() != last()"><br/></xsl:if>
                              </xsl:for-each>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:if>
                    </table>
                  </td>
                </tr>
              </table>
            </html>
          </xsl:if>
        </xsl:template>

        <!-- Get display name of given party id or display the id in case the user/group is inactive -->
        <xsl:function name="my:DisplayNameOrID">
          <xsl:param name="party_id" />
          <xsl:variable name="display_name" select="cs:master-data('party')[@id=$party_id]/@display_name" />
          <xsl:choose>
            <xsl:when test="not($display_name)">
              <xsl:value-of select="if ($party_id=1) then '${system-user}' else concat('User ID ', $party_id)" />
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="$display_name" />
            </xsl:otherwise>
          </xsl:choose>
        </xsl:function>

        <!-- Get name of variant type of given asset relation type -->
        <xsl:function name="my:getVariantTypeName" as="xs:string">
          <xsl:param name="assetRelType" as="xs:string"/>
          <xsl:variable name="value" select="cs:cachelookup('asset_rel_typedef', '@key', $assetRelType)/@name"/>
          <xsl:choose>
            <xsl:when test="$value"><xsl:copy-of select="$value"/></xsl:when>
            <xsl:otherwise><xsl:value-of select="$assetRelType"/></xsl:otherwise>
          </xsl:choose>
        </xsl:function>

        <!-- Get string presentation of given file size as number -->
        <xsl:function name="my:getFileSizeString" as="xs:string">
          <xsl:param name="fileSize" as="xs:double"/>
          <xsl:choose>
            <xsl:when test="$fileSize &lt; 1024"><xsl:value-of select="cs:format-number($fileSize, '#,##0 Bytes')"/></xsl:when>
            <xsl:when test="$fileSize &lt; 1048576"><xsl:value-of select="cs:format-number($fileSize div 1024, '#,##0.0 KB')"/></xsl:when>
            <xsl:when test="$fileSize &lt; 1073741824"><xsl:value-of select="cs:format-number($fileSize div 1048576, '#,##0.0 MB')"/></xsl:when>
            <xsl:otherwise><xsl:value-of select="cs:format-number($fileSize div 1073741824, '#,##0.0 GB')"/></xsl:otherwise>
          </xsl:choose>
        </xsl:function>

        <!-- Get string presentation (e.g. '2:30' or '1:02:30') of given duration as number of seconds -->
        <xsl:function name="my:getDurationString" as="xs:string">
          <xsl:param name="duration" as="xs:double"/>
          <xsl:variable name="hourPart" select="string(xs:integer(floor($duration div 3600)))"/>
          <xsl:variable name="minutePart" select="string(xs:integer(floor(($duration mod 3600) div 60)))"/>
          <xsl:variable name="secondPart" select="string(round($duration mod 60))"/>
          <xsl:copy-of select="concat(if ($hourPart != '0') then concat($hourPart, ':', if (string-length($minutePart) = 1) then '0' else()) else (), $minutePart, ':', if (string-length($secondPart) = 1) then '0' else (), $secondPart)"/>
        </xsl:function>

        <!-- Get character info -->
        <xsl:function name="my:getCharacterInfo" as="xs:string">
          <xsl:param name="charCount" as="xs:double"/>
          <xsl:param name="wordCount" as="xs:double"/>
          <xsl:param name="lineCount" as="xs:double"/>
          <xsl:if test="$charCount">
            <xsl:value-of select="concat(cs:format-number($charCount, '#,###'), if ($charCount > 1) then '${characters}' else '${character}')"/>
          </xsl:if>
          <xsl:if test="$wordCount">
            <xsl:value-of select="concat(cs:format-number($wordCount, '#,###'), if ($wordCount > 1) then '${words}' else '${word}')"/>
          </xsl:if>
          <xsl:if test="$lineCount">
            <xsl:value-of select="concat(cs:format-number($lineCount, '#,###'), if ($lineCount > 1) then '${lines}' else '${line}')"/>
          </xsl:if>
        </xsl:function>

        <!-- Get costs of given asset features -->
        <xsl:function name="my:getCostsOfAssetFeatures" as="xs:double">
          <xsl:param name="parentAssetFeatures" as="element(asset_feature)*"/>
          <xsl:variable name="values" as="xs:double*">
            <xsl:for-each select="$parentAssetFeatures">
              <xsl:variable name="amountFeature" select="asset_feature[@feature='censhare:costs-amount']"/>
              <xsl:variable name="unitKey" select="asset_feature[@feature='censhare:costs-unit-key']/@value_string"/>
              <xsl:choose>
                <xsl:when test="$amountFeature">
                  <xsl:sequence select="$amountFeature/@value_double"/>
                </xsl:when>
                <xsl:when test="$unitKey">
                  <xsl:variable name="unitCount" select="asset_feature[@feature='censhare:costs-unit-count']/@value_double"/>
                  <xsl:variable name="resourceAssetID" select="asset_feature[@feature='censhare:costs-resource']/@value_asset_id"/>
                  <xsl:variable name="resourceCostsFeature" select="cs:get-asset($resourceAssetID)/asset_feature[@feature='censhare:resource-cost-unit' and @value_key=$unitKey]/asset_feature[@feature='censhare:resource-costs']"/>
                  <xsl:sequence select="$unitCount * $resourceCostsFeature/@value_double"/>
                </xsl:when>
              </xsl:choose>
            </xsl:for-each>
          </xsl:variable>
          <xsl:value-of select="sum($values)"/>
        </xsl:function>

        <!-- Creates preview of party of given $by and text of given $by and $date -->
        <xsl:template name="previewDateAndBy">
          <xsl:param name="date"/>
          <xsl:param name="by"/>
          <xsl:variable name="byAssetID" select="cs:cachelookup('party', '@id', $by)/@party_asset_id"/>
          <xsl:variable name="byAsset" select="cs:get-asset($byAssetID, 0, 0)"/>
          <xsl:variable name="thumbnailStorage" select="$byAsset/storage_item[@key='thumbnail'][1]"/>
          <xsl:choose>
            <xsl:when test="$thumbnailStorage">
              <table cellpadding="0">
                <tr>
                  <td class="asset-info-label">
                    <img hspace="1" vspace="2">
                      <xsl:attribute name="src" select="concat($urlPrefix, 'assets/asset/id/', $thumbnailStorage/@asset_id, '/element/actual/', $thumbnailStorage/@element_idx, '/storage/', $thumbnailStorage/@key, '/file/', tokenize($thumbnailStorage/@relpath,'/')[last()])"/>
                      <xsl:variable name="imageFactor" select="if ($thumbnailStorage/@width_px > $thumbnailStorage/@height_px) then ($maxPreviewSize div $thumbnailStorage/@width_px) else ($maxPreviewSize div $thumbnailStorage/@height_px)"/>
                      <xsl:attribute name="width" select="if ($thumbnailStorage/@width_px) then round($thumbnailStorage/@width_px * $imageFactor) else $maxPreviewSize"/>
                      <xsl:attribute name="height" select="if ($thumbnailStorage/@height_px) then round($thumbnailStorage/@height_px * $imageFactor) else $maxPreviewSize"/>
                      <xsl:attribute name="title" select="cs:cachelookup('party', '@id', $by)/@display_name"/>
                    </img>
                  </td>
                  <td class="asset-info-value">
                    <xsl:value-of select="if ($date) then cs:format-date($date, 'relative-short', 'short') else '${multiple-values}'"/>
                    <br/>
                    <span class="asset-info-label-inline"> ${by} </span>
                    <xsl:value-of select="if ($by) then (if ($by=1) then '${system-user}' else if ($by=$partyID) then '${myself}' else my:DisplayNameOrID($by)) else '${multiple-values}'"/>
                  </td>
                </tr>
              </table>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="if ($date) then cs:format-date($date, 'relative-short', 'short') else '${multiple-values}'"/>
              <span class="asset-info-label-inline"> ${by} </span>
              <xsl:value-of select="if ($by) then (if ($by=1) then '${system-user}' else if ($by=$partyID) then '${myself}' else my:DisplayNameOrID($by)) else '${multiple-values}'"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:template>

        <!-- Get localized name of given feature element -->
        <xsl:function name="my:getFeatureName" as="xs:string">
          <xsl:param name="featureElement" as="element(asset_feature)"/>
          <xsl:variable name="featureDefinition" select ="cs:master-data('feature')[@key=$featureElement/@feature]"/>
          <xsl:value-of select="if ($featureDefinition/@label) then $featureDefinition/@label else $featureDefinition/@name"/>
        </xsl:function>

        <!-- Get localized name of given month (integer) -->
        <xsl:function name="my:getMonthName" as="xs:string">
          <xsl:param name="month" as="xs:integer"/>
          <xsl:choose>
            <xsl:when test="$month=1">${january}</xsl:when>
            <xsl:when test="$month=2">${february}</xsl:when>
            <xsl:when test="$month=3">${march}</xsl:when>
            <xsl:when test="$month=4">${april}</xsl:when>
            <xsl:when test="$month=5">${may}</xsl:when>
            <xsl:when test="$month=6">${june}</xsl:when>
            <xsl:when test="$month=7">${july}</xsl:when>
            <xsl:when test="$month=8">${august}</xsl:when>
            <xsl:when test="$month=9">${september}</xsl:when>
            <xsl:when test="$month=10">${october}</xsl:when>
            <xsl:when test="$month=11">${november}</xsl:when>
            <xsl:when test="$month=12">${december}</xsl:when>
          </xsl:choose>
        </xsl:function>

        <!-- Get localized name of a given dot separated value -->
        <xsl:function name="my:getLocalizedValueHierarchical" as="xs:string">
          <xsl:param name="value" as="xs:string"/>
          <xsl:param name="cachedTableName" as="xs:string"/>
          <xsl:param name="cachedTableAttribute" as="xs:string"/>
          <xsl:param name="delimiter" as="xs:string"/>
          <xsl:param name="hideRoot" as="xs:boolean"/>
          <xsl:variable name="items" select="tokenize($value, '\.')"/>
          <xsl:variable name="startItem" select="if ($hideRoot) then 2 else 1"/>
          <xsl:value-of select="string-join(for $x in ($startItem to xs:long(count($items))) return cs:cachelookup($cachedTableName, $cachedTableAttribute, concat(string-join(subsequence($items, 1, $x), '.'), '.'))/@name, $delimiter)"/>
        </xsl:function>

        <!-- Get localized name of a asset feature with a hierarchical value type -->
        <xsl:function name="my:getFeatureValueHierarchical" as="xs:string">
          <xsl:param name="featureElement" as="element(asset_feature)"/>
          <xsl:param name="delimiter" as="xs:string"/>
          <xsl:param name="hideRoot" as="xs:boolean"/>
          <xsl:variable name="items" select="tokenize($featureElement/@value_key, '\.')"/>
          <xsl:variable name="startItem" select="if ($hideRoot) then 2 else 1"/>
          <xsl:value-of select="string-join(for $x in ($startItem to xs:long(count($items))) return cs:cachelookup('feature_value', '@feature', $featureElement/@feature, '@value_key', concat(string-join(subsequence($items, 1, $x), '.'), '.'))/@name, $delimiter)"/>
        </xsl:function>

        <!-- Get localized value of given feature element -->
        <xsl:function name="my:getFeatureValue">
          <xsl:param name="featureElement" as="element(asset_feature)"/>
          <xsl:variable name="feature" select="cs:cachelookup('feature', '@key', $featureElement/@feature)"/>
          <xsl:variable name="type" select="$feature/@value_type"/>
          <xsl:choose>
            <!-- 0: No value -->
            <xsl:when test="$type='0'">
              <xsl:value-of select="''"/>
            </xsl:when>
            <!-- 1: Hierarchical attribute (string) -->
            <xsl:when test="$type='1'">
              <xsl:value-of select="cs:cachelookup('feature_value', '@feature', $featureElement/@feature, '@value_key', $featureElement/@value_key)/@name"/>
            </xsl:when>
            <!-- 2: Enumeration (string) -->
            <xsl:when test="$type='2'">
              <xsl:value-of select="cs:cachelookup('feature_value', '@feature', $featureElement/@feature, '@value_key', $featureElement/@value_key)/@name"/>
            </xsl:when>
            <!-- 3: Integer (long) -->
            <xsl:when test="$type='3'">
              <xsl:choose>
                <xsl:when test="$feature/@value_list_resource_key">
                  <xsl:value-of select="doc(concat('censhare:///service/assets/asset/id/', $featureElement/@asset_id, '/transform;key=censhare:value-list.product-feature;value=', $featureElement/@value_long))/options/option/@display_value"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="string-join((cs:format-number($featureElement/@value_long, '#,###'), my:getFeatureUnitString($featureElement)), ' ')"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <!-- 4: String -->
            <xsl:when test="$type='4'">
              <xsl:choose>
                <!-- censhare URL -->
                <xsl:when test="$featureElement/@feature='censhare:url'">
                  <a class="asset-info-link" target="_blank">
                    <xsl:attribute name="href" select="$featureElement/@value_string"/>
                    <xsl:value-of select="$featureElement/@value_string"/>
                  </a>
                </xsl:when>
                <!-- String -->
                <xsl:otherwise>
                  <xsl:choose>
                    <xsl:when test="$feature/@value_list_resource_key">
                      <xsl:value-of select="doc(concat('censhare:///service/assets/asset/id/', $featureElement/@asset_id, '/transform;key=censhare:value-list.product-feature;value=', $featureElement/@value_string))/options/option/@display_value"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="$featureElement/@value_string"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <!-- 5: Timestamp -->
            <xsl:when test="$type='5'">
              <xsl:value-of select="cs:format-date($featureElement/@value_timestamp, 'relative-short', 'short')"/>
            </xsl:when>
            <!-- 6: Boolean -->
            <xsl:when test="$type='6'">
              <xsl:value-of select="if ($featureElement/@value_long='1') then '${yes}' else '${no}'"/>
            </xsl:when>
            <!-- 7: Double -->
            <xsl:when test="$type='7'">
              <xsl:value-of select="string-join((cs:format-number($featureElement/@value_double, '#,###.###'), my:getFeatureUnitString($featureElement)), ' ')"/>
            </xsl:when>
            <!-- 8: Integer pair -->
            <xsl:when test="$type='8'">
              <xsl:value-of select="string-join((concat(cs:format-number($featureElement/@value_long, '#,###'), '-', cs:format-number($featureElement/@value_long2, '#,###')), my:getFeatureUnitString($featureElement)), ' ')"/>
            </xsl:when>
            <!-- 9: Timestamp pair -->
            <xsl:when test="$type='9'">
              <xsl:value-of select="concat(cs:format-date($featureElement/@value_timestamp, 'relative-short', 'short'), '-', cs:format-date($featureElement/@value_timestamp2, 'relative-short', 'short'))"/>
            </xsl:when>
            <!-- 10: Asset reference -->
            <xsl:when test="$type='10'">
              <xsl:choose>
                <xsl:when test="$feature/@value_list_resource_key">
                  <xsl:value-of select="doc(concat('censhare:///service/assets/asset/id/', $featureElement/@asset_id, '/transform;key=', $feature/@value_list_resource_key, ';value=', $featureElement/@value_asset_id))/options/option/@display_value"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="refAsset" select="cs:get-asset($featureElement/@value_asset_id)"/>
                  <xsl:choose>
                    <xsl:when test="exists($refAsset)">
                      <xsl:value-of select="if ($refAsset/asset_feature[@feature='censhare:name' and @language=$uiLocale]) then $refAsset/asset_feature[@feature='censhare:name' and @language=$uiLocale]/@value_string else $refAsset/@name"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="concat('ID: ', $featureElement/@value_asset_id)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <!-- 11: XML -->
            <xsl:when test="$type='11'">
              <xsl:value-of select="''"/>
            </xsl:when>
            <!-- 12: Double pair -->
            <xsl:when test="$type='12'">
              <xsl:value-of select="string-join((concat(cs:format-number($featureElement/@value_double, '#,###.###'), '-', cs:format-number($featureElement/@value_double2, '#,###.###')), my:getFeatureUnitString($featureElement)), ' ')"/>
            </xsl:when>
            <!-- 13: Date -->
            <xsl:when test="$type='13'">
              <xsl:value-of select="cs:format-date($featureElement/@value_timestamp, 'relative-short', 'none')"/>
            </xsl:when>
            <!-- 14: Date pair -->
            <xsl:when test="$type='14'">
              <xsl:value-of select="concat(cs:format-date($featureElement/@value_timestamp, 'relative-short', 'none'), '-', cs:format-date($featureElement/@value_timestamp2, 'relative-short', 'none'))"/>
            </xsl:when>
            <!-- 15: Time -->
            <xsl:when test="$type='15'">
              <xsl:value-of select="cs:format-date($featureElement/@value_timestamp, 'none', 'short')"/>
            </xsl:when>
            <!-- 16: Time pair -->
            <xsl:when test="$type='16'">
              <xsl:value-of select="concat(cs:format-date($featureElement/@value_timestamp, 'none', 'short'), '-', cs:format-date($featureElement/@value_timestamp2, 'none', 'short'))"/>
            </xsl:when>
            <!-- 17: Year -->
            <xsl:when test="$type='17'">
              <xsl:value-of select="year-from-dateTime($featureElement/@value_timestamp)"/>
            </xsl:when>
            <!-- 18: Year pair -->
            <xsl:when test="$type='18'">
              <xsl:value-of select="concat(year-from-dateTime($featureElement/@value_timestamp), '-', year-from-dateTime($featureElement/@value_timestamp2))"/>
            </xsl:when>
            <!-- 19: Year/month -->
            <xsl:when test="$type='19'">
              <xsl:value-of select="concat(my:getMonthName(month-from-dateTime($featureElement/@value_timestamp)), ' ', year-from-dateTime($featureElement/@value_timestamp))"/>
            </xsl:when>
            <!-- 20: Year/month pair -->
            <xsl:when test="$type='20'">
              <xsl:value-of select="concat(my:getMonthName(month-from-dateTime($featureElement/@value_timestamp)), ' ', year-from-dateTime($featureElement/@value_timestamp), '-', my:getMonthName(month-from-dateTime($featureElement/@value_timestamp2)), ' ', year-from-dateTime($featureElement/@value_timestamp2))"/>
            </xsl:when>
            <!-- 21: Month -->
            <xsl:when test="$type='21'">
              <xsl:value-of select="my:getMonthName(month-from-dateTime($featureElement/@value_timestamp))"/>
            </xsl:when>
            <!-- 22: Month pair -->
            <xsl:when test="$type='22'">
              <xsl:value-of select="concat(my:getMonthName(month-from-dateTime($featureElement/@value_timestamp)), '-', my:getMonthName(month-from-dateTime($featureElement/@value_timestamp2)))"/>
            </xsl:when>
            <!-- 23: Month/day -->
            <xsl:when test="$type='23'">
              <xsl:value-of select="concat(day-from-dateTime($featureElement/@value_timestamp), '. ', my:getMonthName(month-from-dateTime($featureElement/@value_timestamp)))"/>
            </xsl:when>
            <!-- 24: Month/day pair -->
            <xsl:when test="$type='24'">
              <xsl:value-of select="concat(day-from-dateTime($featureElement/@value_timestamp), '. ', my:getMonthName(month-from-dateTime($featureElement/@value_timestamp)), '-', day-from-dateTime($featureElement/@value_timestamp2), '. ', my:getMonthName(month-from-dateTime($featureElement/@value_timestamp2)))"/>
            </xsl:when>
            <!-- 25: Day -->
            <xsl:when test="$type='25'">
              <xsl:value-of select="concat(day-from-dateTime($featureElement/@value_timestamp), '.')"/>
            </xsl:when>
            <!-- 26: Day pair -->
            <xsl:when test="$type='26'">
              <xsl:value-of select="concat(day-from-dateTime($featureElement/@value_timestamp), '.-', day-from-dateTime($featureElement/@value_timestamp2), '.')"/>
            </xsl:when>
            <!-- 27: Duration -->
            <!-- 28: Asset Key -->
            <!-- 29: Asset key ref -->
            <xsl:when test="$type='29'">
              <xsl:choose>
                <xsl:when test="$feature/@value_list_resource_key">
                  <xsl:value-of select="doc(concat('censhare:///service/assets/asset/id/', $featureElement/@asset_id, '/transform;key=', $feature/@value_list_resource_key, ';value=', $featureElement/@value_asset_key_ref))/options/option/@display_value"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="refAsset" select="cs:asset()[@censhare:resource-key=$featureElement/@value_asset_key_ref]"/>
                  <xsl:choose>
                    <xsl:when test="exists($refAsset)">
                      <xsl:value-of select="if ($refAsset/asset_feature[@feature='censhare:name' and @language=$uiLocale]) then $refAsset/asset_feature[@feature='censhare:name' and @language=$uiLocale]/@value_string else $refAsset/@name"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="concat('Resource key: ', $featureElement/@value_asset_key_ref)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="'${none}'"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:function>

        <!-- Get localized value of given feature element -->
        <xsl:function name="my:getFeatureUnitString" as="xs:string">
          <xsl:param name="featureElement" as="element(asset_feature)"/>
          <xsl:value-of select="if ($featureElement/@value_unit) then cs:cachelookup('unit_set_rel', '@unit', $featureElement/@value_unit)/@unit else ()"/>
        </xsl:function>

        <!-- Creates line breaks '<br/>' elements of line feed, line separator and paragraph separator at given text parameter -->
        <xsl:template name="lineBreak">
          <xsl:param name="text" select="."/>
          <xsl:variable name="lines" select="tokenize($text, '\n|\u2028|\u2029')"/> <!-- delimiters: line feed, line separator and paragraph separator -->
          <xsl:for-each select="tokenize($text, '\n|\u2028|\u2029')">
            <xsl:value-of select="."/>
            <xsl:if test="position() != last()">
              <br/>
            </xsl:if>
          </xsl:for-each>
        </xsl:template>

        <!-- Creates icon 'img' element with given key -->
        <xsl:template name="iconImage">
          <xsl:param name="key" select="."/>
          <img width="16" height="16">
            <xsl:attribute name="src" select="concat($urlPrefix, 'resources/icon/', $key, '/iconset/', $lafIconset, '/background/', $lafBackground, '/file')"/>
          </img>
        </xsl:template>

        <!-- "and" or "or" (copy of expression "edit-query") -->
        <xsl:template match="and | or">
          <xsl:variable name="multipleConditions" select="count(*) > 1"/>
          <xsl:value-of select="if ($multipleConditions) then '(' else ''"/>
          <xsl:call-template name="query">
            <xsl:with-param name="type" select="node-name(.)"/>
            <xsl:with-param name="element" select="."/>
          </xsl:call-template>
          <xsl:value-of select="if ($multipleConditions) then ')' else ''"/>
        </xsl:template>

        <!-- "not" (copy of expression "edit-query") -->
        <xsl:template match="not">
          <xsl:variable name="multipleConditions" select="count(*) > 1"/>
          <xsl:text>${without-(lowercase)} </xsl:text>
          <xsl:value-of select="if ($multipleConditions) then '(' else ''"/>
          <xsl:call-template name="query">
            <xsl:with-param name="type" select="'and'"/>
            <xsl:with-param name="element" select="."/>
          </xsl:call-template>
          <xsl:value-of select="if ($multipleConditions) then ')' else ''"/>
        </xsl:template>

        <!-- Query (copy of expression "edit-query") -->
        <xsl:template name="query">
          <xsl:param name="type"/>
          <xsl:param name="element"/>
          <xsl:for-each select="$element/(condition | and | or | not)">
            <xsl:apply-templates select="."/>
            <xsl:if test="position() != last()">
              <xsl:value-of select="concat(' ', if ($type='and') then '${and-(lowercase)}' else '${or-(lowercase)}', ' ')"/>
            </xsl:if>
          </xsl:for-each>
        </xsl:template>

        <!-- Condition (copy of expression "edit-query") -->
        <xsl:template match="condition">
          <xsl:text>(</xsl:text>
          <xsl:variable name="feature" select="cs:cachelookup('feature', '@key', @name)"/>
          <xsl:variable name="type" select="$feature/@value_type"/>
          <xsl:variable name="isAdmin" select="$system/system/client/@type = 'javaadmin'"/>
          <!-- name of feature -->
          <xsl:value-of select="if ($isAdmin) then (cs:cachelookup('feature', '@key', @name)/@name${localized-attr-suffix}) else (cs:cachelookup('feature', '@key', @name)/@name)"/>
          <!-- op (if feature is a pair data type (data types 8, 9, 12, 14, 16, 18, 20, 22, 24, 26), then use 'includes') -->
          <xsl:value-of select="if (index-of((8, 9, 12, 14, 16, 18, 20, 22, 24, 26), $type)) then ' ${includes-(lowercase)} ' else if (@op) then concat(' ', @op, ' ') else ' = '"/>
          <!-- value -->
          <xsl:text>${quote-start}</xsl:text>
          <xsl:choose>
            <xsl:when test="$feature/@value_source">
              <xsl:choose>
                <xsl:when test="@name='censhare:function.workflow-step'">
                  <!-- special hack for workflow/workflow-step logical pair -->
                  <xsl:variable name="workflow" select="../condition[@name='censhare:asset.wf_id']/@value"/>
                  <xsl:variable name="tableElement" select="cs:cachelookup('workflow_step', '@wf_step', @value, '@wf_id', $workflow)"/>
                  <xsl:value-of select="if ($tableElement/@display_name) then $tableElement/@display_name else if ($isAdmin) then $tableElement/@name${localized-attr-suffix} else $tableElement/@name"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="tableName" select="substring-before($feature/@value_source, '@')"/>
                  <xsl:variable name="tableAttribute" select="concat('@', substring-after($feature/@value_source, '@'))"/>
                  <xsl:variable name="tableValue" select="if ($type='1') then tokenize(@value, '\*')[1] else @value"/>
                  <xsl:variable name="tableElement" select="cs:cachelookup($tableName, $tableAttribute, $tableValue)"/>
                  <xsl:value-of select="if ($tableElement/@display_name) then $tableElement/@display_name else if ($isAdmin) then $tableElement/@name${localized-attr-suffix} else $tableElement/@name"/>
                  <xsl:value-of select="if ($type='1' and ends-with(@value, '*')) then '*' else ''"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:choose>
                <!-- 0: No value -->
                <xsl:when test="$type='0'">
                  <xsl:value-of select="''"/>
                </xsl:when>
                <!-- 1: Hierarchical attribute (string) -->
                <xsl:when test="$type='1'">
                  <xsl:variable name="path" select="tokenize(@value, '\*')[1]"/>
                  <xsl:value-of select="concat('path=', $path, ', ')"/>
                  <xsl:value-of select="if ($isAdmin) then cs:cachelookup('feature_value', '@feature', @name, '@value_key', $path)/@name${localized-attr-suffix} else cs:cachelookup('feature_value', '@feature', @name, '@value_key', $path)/@name"/>
                  <xsl:value-of select="if (contains(@value, '*')) then '*' else ''"/>
                </xsl:when>
                <!-- 2: Enumeration (string) -->
                <xsl:when test="$type='2'">
                  <xsl:value-of select="if ($isAdmin) then cs:cachelookup('feature_value', '@feature', @name, '@value_key', @value)/@name${localized-attr-suffix} else cs:cachelookup('feature_value', '@feature', @name, '@value_key', @value)/@name"/>
                </xsl:when>
                <!-- 3: Integer (long) -->
                <xsl:when test="$type='3'">
                  <xsl:value-of select="cs:format-number(@value, '#,###')"/>
                </xsl:when>
                <!-- 4: String -->
                <xsl:when test="$type='4'">
                  <xsl:value-of select="@value"/>
                </xsl:when>
                <!-- 5: Timestamp -->
                <xsl:when test="$type='5'">
                  <xsl:value-of select="cs:format-date(@value, 'relative-short', 'short')"/>
                </xsl:when>
                <!-- 6: Boolean -->
                <xsl:when test="$type='6'">
                  <xsl:value-of select="if (@value='1') then '${yes}' else '${no}'"/>
                </xsl:when>
                <!-- 7: Double -->
                <xsl:when test="$type='7'">
                  <xsl:value-of select="cs:format-number(@value, '#,###.###')"/>
                </xsl:when>
                <!-- 8: Integer pair -->
                <xsl:when test="$type='8'">
                  <xsl:value-of select="cs:format-number(@value, '#,###')"/>
                </xsl:when>
                <!-- 9: Timestamp pair -->
                <xsl:when test="$type='9'">
                  <xsl:value-of select="cs:format-date(@value, 'relative-short', 'short')"/>
                </xsl:when>
                <!-- 10: Asset reference -->
                <xsl:when test="$type='10'">
                  <xsl:variable name="refAsset" select="cs:get-asset(@value_asset_id)"/>
                  <xsl:choose>
                    <xsl:when test="exists($refAsset)">
                      <xsl:value-of select="if ($refAsset/asset_feature[@feature='censhare:name' and @language=$uiLocale]) then $refAsset/asset_feature[@feature='censhare:name' and @language=$uiLocale]/@value_string else $refAsset/@name"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="concat('ID: ', @value_asset_id)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <!-- 11: XML -->
                <xsl:when test="$type='11'">
                  <xsl:value-of select="''"/>
                </xsl:when>
                <!-- 12: Double pair -->
                <xsl:when test="$type='12'">
                  <xsl:value-of select="cs:format-number(@value, '#,###.###')"/>
                </xsl:when>
                <!-- 13: Date -->
                <xsl:when test="$type='13'">
                  <xsl:value-of select="cs:format-date(xs:dateTime(concat(substring(@value, 1, 10), 'T00:00:00')), 'relative-short', 'none')"/>
                </xsl:when>
                <!-- 14: Date pair -->
                <xsl:when test="$type='14'">
                  <xsl:value-of select="cs:format-date(xs:dateTime(concat(substring(@value, 1, 10), 'T00:00:00')), 'relative-short', 'none')"/>
                </xsl:when>
                <!-- 15: Time -->
                <xsl:when test="$type='15'">
                  <xsl:value-of select="cs:format-date(xs:dateTime(concat('1970-01-01T', @value)), 'none', 'short')"/>
                </xsl:when>
                <!-- 16: Time pair -->
                <xsl:when test="$type='16'">
                  <xsl:value-of select="cs:format-date(xs:dateTime(concat('1970-01-01T', @value)), 'none', 'short')"/>
                </xsl:when>
                <!-- 17: Year -->
                <xsl:when test="$type='17'">
                  <xsl:value-of select="cs:format-number(number(@value), '#')"/>
                </xsl:when>
                <!-- 18: Year pair -->
                <xsl:when test="$type='18'">
                  <xsl:value-of select="cs:format-number(number(@value), '#')"/>
                </xsl:when>
                <!-- 19: Year/month -->
                <xsl:when test="$type='19'">
                  <xsl:value-of select="concat(my:getMonthName(number(substring(@value, 6, 2))), ' ', cs:format-number(number(substring(@value, 1, 4)), '#'))"/>
                </xsl:when>
                <!-- 20: Year/month pair -->
                <xsl:when test="$type='20'">
                  <xsl:value-of select="concat(my:getMonthName(number(substring(@value, 6, 2))), ' ', cs:format-number(number(substring(@value, 1, 4)), '#'))"/>
                </xsl:when>
                <!-- 21: Month -->
                <xsl:when test="$type='21'">
                  <xsl:value-of select="my:getMonthName(number(substring(@value, 3, 2)))"/>
                </xsl:when>
                <!-- 22: Month pair -->
                <xsl:when test="$type='22'">
                  <xsl:value-of select="my:getMonthName(number(substring(@value, 3, 2)))"/>
                </xsl:when>
                <!-- 23: Month/day -->
                <xsl:when test="$type='23'">
                  <xsl:value-of select="concat(cs:format-number(number(substring(@value, 6, 2)), '#'), '. ', my:getMonthName(number(substring(@value, 3, 2))))"/>
                </xsl:when>
                <!-- 24: Month/day pair -->
                <xsl:when test="$type='24'">
                  <xsl:value-of select="concat(cs:format-number(number(substring(@value, 6, 2)), '#'), '. ', my:getMonthName(number(substring(@value, 3, 2))))"/>
                </xsl:when>
                <!-- 25: Day -->
                <xsl:when test="$type='25'">
                  <xsl:value-of select="concat(cs:format-number(number(substring(@value, 4, 2)), '#'), '.')"/>
                </xsl:when>
                <!-- 26: Day pair -->
                <xsl:when test="$type='26'">
                  <xsl:value-of select="concat(cs:format-number(number(substring(@value, 4, 2)), '#'), '.')"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="@value"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:text>${quote-end})</xsl:text>
        </xsl:template>

      </xsl:stylesheet>

    </expression>

    <!-- Description for asset admin info -->
    <expression id="asset-admin-info">

      <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:my="http://www.censhare.com" exclude-result-prefixes="my" version="2.0">
        <xsl:output method="html" encoding="UTF-8"/>
        <xsl:variable name="assetCount" select="count(asset)"/>

        <xsl:template match="/">
          <html>
            <body>
              <xsl:choose>
                <!-- no asset -->
                <xsl:when test="$assetCount = 0">
                  <table cellpadding="1" valign="top" class="asset-info-table">
                    <tr>
                      <td class="asset-info-title">
                        <xsl:value-of select="'${no-asset-selected}'"/>
                      </td>
                    </tr>
                  </table>
                </xsl:when>
                <!-- assets selected -->
                <xsl:otherwise>
                  <xsl:apply-templates/>
                </xsl:otherwise>
              </xsl:choose>
            </body>
          </html>
        </xsl:template>

        <xsl:template match="asset">
          <table cellpadding="1" valign="top" class="asset-info-table">
            <tr>
              <td class="asset-info-title">
                <xsl:value-of select="@name"/>
              </td>
            </tr>
            <tr>
              <table cellpadding="0">
                <tr>
                  <td class="asset-info-label">Attributes:</td>
                  <td class="asset-info-value">
                    <xsl:for-each select="(@id, @id_extern, @version, @content_version, @type, @creation_date, @created_by, @modified_date, @modified_by, @checked_out_date, @checked_out_by, @application, @domain, @domain2, @wf_id, @wf_step, @wf_target, @owner, if (@non_owner_access='0') then () else @non_owner_access)">
                      <xsl:call-template name="drawAttribute">
                        <xsl:with-param name="attr" select="."/>
                      </xsl:call-template>
                      <xsl:text> </xsl:text>
                    </xsl:for-each>
                  </td>
                </tr>
                <xsl:if test="asset_feature">
                  <tr>
                    <td class="asset-info-label">Features:</td>
                    <td class="asset-info-value"><xsl:call-template name="drawFeatures"/></td>
                  </tr>
                </xsl:if>
                <xsl:if test="storage_item">
                  <tr>
                    <td class="asset-info-label">Storage items:</td>
                    <td>
                      <xsl:for-each select="storage_item">
                        <xsl:sort select="@key"/>
                        <xsl:apply-templates select="." mode="value"/>
                      </xsl:for-each>
                    </td>
                  </tr>
                </xsl:if>
                <!-- Actual elements -->
                <xsl:variable name="rootElement" select="asset_element[@key='actual.' and not(@parent_idx)]"/>
                <xsl:if test="$rootElement">
                  <tr>
                    <td class="asset-info-label">Actual elements:</td>
                    <td>
                      <xsl:apply-templates select="$rootElement" mode="value"/>
                    </td>
                  </tr>
                </xsl:if>
                <!-- Target elements -->
                <xsl:variable name="rootElement" select="asset_element[@key='target.' and not(@parent_idx)]"/>
                <xsl:if test="$rootElement">
                  <tr>
                    <td class="asset-info-label">Target elements:</td>
                    <td>
                      <xsl:apply-templates select="$rootElement" mode="value"/>
                    </td>
                  </tr>
                </xsl:if>
                <!-- Parent relations -->
                <xsl:if test="parent_asset_rel">
                  <tr>
                    <td class="asset-info-label">Parent relations:</td>
                    <td>
                      <xsl:for-each select="parent_asset_rel">
                        <xsl:sort select="@type"/>
                        <xsl:apply-templates select="." mode="rel"/>
                      </xsl:for-each>
                    </td>
                  </tr>
                </xsl:if>
                <!-- Child relations -->
                <xsl:if test="child_asset_rel">
                  <tr>
                    <td class="asset-info-label">Child relations:</td>
                    <td>
                      <xsl:for-each select="child_asset_rel">
                        <xsl:sort select="@type"/>
                        <xsl:apply-templates select="." mode="rel"/>
                      </xsl:for-each>
                    </td>
                  </tr>
                </xsl:if>
                <!-- Search -->
                <xsl:if test="search_xml">
                  <tr>
                    <td class="asset-info-label">Search:</td>
                    <td>
                      <xsl:apply-templates select="search_xml" mode="value"/>
                    </td>
                  </tr>
                </xsl:if>
              </table>
            </tr>
          </table>
        </xsl:template>

        <xsl:template name="drawFeatures">
          <xsl:for-each select="asset_feature | asset_element_feature | asset_rel_feature | asset_element_rel_feature">
            <xsl:sort select="@feature"/>
            <xsl:apply-templates select="." mode="value"/>
          </xsl:for-each>
        </xsl:template>

        <xsl:template match="parent_asset_rel | child_asset_rel" mode="rel">
          <xsl:variable name="asset" select="cs:get-asset(if (name(.) = 'parent_asset_rel') then @parent_asset else @child_asset)"/>
          <table>
            <tr>
              <td>
                <xsl:for-each select="(@key, @sorting, $asset/@id)">
                  <xsl:call-template name="drawAttribute">
                    <xsl:with-param name="attr" select="."/>
                  </xsl:call-template>
                  <xsl:text> </xsl:text>
                </xsl:for-each>
                <xsl:text>(</xsl:text>
                <xsl:for-each select="($asset/@name, $asset/@type)">
                  <xsl:call-template name="drawAttribute">
                    <xsl:with-param name="attr" select="."/>
                  </xsl:call-template>
                  <xsl:text> </xsl:text>
                </xsl:for-each>
                <xsl:text>)</xsl:text>
                <xsl:if test="asset_rel_feature">
                  <table>
                    <tr>
                      <td width="15"/>
                      <td><xsl:call-template name="drawFeatures"/></td>
                    </tr>
                  </table>
                </xsl:if>
              </td>
            </tr>
          </table>
        </xsl:template>

        <xsl:template match="asset_feature | asset_element_feature | asset_rel_feature | asset_element_rel_feature" mode="value">
          <xsl:for-each select="@feature, attribute()[starts-with(node-name(.), 'value_')]">
            <xsl:call-template name="drawAttribute">
              <xsl:with-param name="attr" select="."/>
            </xsl:call-template>
            <xsl:text> </xsl:text>
          </xsl:for-each>
          <br/>
          <xsl:if test="asset_feature or asset_rel_feature">
            <table>
              <tr>
                <td width="15"/>
                <td><xsl:call-template name="drawFeatures"/></td>
              </tr>
            </table>
          </xsl:if>
        </xsl:template>

        <xsl:template match="storage_item" mode="value">
          <xsl:for-each select="(@key, @element_idx, @mimetype, @width_px, @height_px, @linecount, @wordcount, @charcount)">
            <xsl:call-template name="drawAttribute">
              <xsl:with-param name="attr" select="."/>
            </xsl:call-template>
            <xsl:text> </xsl:text>
          </xsl:for-each>
          <br/>
        </xsl:template>

        <xsl:template match="asset_element" mode="value">
          <xsl:for-each select="@idx, @paging, @xoffsmm, @yoffsmm, @width_mm, @height_mm">
            <xsl:call-template name="drawAttribute">
              <xsl:with-param name="attr" select="."/>
            </xsl:call-template>
            <xsl:text> </xsl:text>
          </xsl:for-each>
          <br/>
          <xsl:variable name="features" select="for $x in . return asset_element_feature[@asset_elem_sid=$x/@sid]"/>
          <xsl:copy-of select="my:getSubordinateElements($features)"/>
          <xsl:variable name="storageItems" select="if (@key='actual.') then for $x in . return $x/../storage_item[@element_idx=$x/@idx] else ()"/>
          <xsl:copy-of select="my:getSubordinateElements($storageItems)"/>
          <xsl:variable name="parentElementRelations" select="for $x in . return $x/../parent_asset_element_rel[@child_idx=$x/@idx and @key=$x/@key]"/>
          <xsl:copy-of select="my:getSubordinateElements($parentElementRelations)"/>
          <xsl:variable name="childElementRelations" select="for $x in . return $x/../child_asset_element_rel[@parent_idx=$x/@idx and @key=$x/@key]"/>
          <xsl:copy-of select="my:getSubordinateElements($childElementRelations)"/>
          <xsl:variable name="childElements" select="my:getChildAssetElements(.)"/>
          <xsl:copy-of select="my:getSubordinateElements($childElements)"/>
        </xsl:template>

        <xsl:template match="parent_asset_element_rel | child_asset_element_rel" mode="value">
          <xsl:variable name="asset" select="cs:get-asset(if (name(.) = 'parent_asset_rel') then @parent_asset else @child_asset)"/>
          <xsl:for-each select="if (name(.) = 'parent_asset_rel') then @parent_idx else @child_idx, @xoffsmm, @yoffsmm">
            <xsl:call-template name="drawAttribute">
              <xsl:with-param name="attr" select="."/>
            </xsl:call-template>
            <xsl:text> </xsl:text>
          </xsl:for-each>
          <xsl:text>(</xsl:text>
          <xsl:for-each select="($asset/@name, $asset/@type)">
            <xsl:call-template name="drawAttribute">
              <xsl:with-param name="attr" select="."/>
            </xsl:call-template>
            <xsl:text> </xsl:text>
          </xsl:for-each>
          <xsl:text>)</xsl:text>
          <xsl:variable name="features" select="for$x in . return asset_element_rel_feature[@asset_elem_rel_sid=$x/@sid]"/>
          <xsl:copy-of select="my:getSubordinateElements($features)"/>
        </xsl:template>

        <xsl:template match="search_xml" mode="value">
          <xsl:variable name="query" select="query"/>
          <xsl:choose>
            <xsl:when test="$query">
              <xsl:copy-of select="my:toHtml($query)"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>None</xsl:text>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:template>

        <xsl:template name="drawAttribute">
          <xsl:param name="attr"/>
          <xsl:if test="$attr">
            <span class="asset-info-label-inline"><xsl:value-of select="name($attr)"/></span>
            <xsl:text> </xsl:text>
            <xsl:value-of select="$attr"/>
          </xsl:if>
        </xsl:template>

        <!-- get child element sequence -->
        <xsl:function name="my:getChildAssetElements" as="element(asset_element)*">
          <xsl:param name="assetElement" as="element(asset_element)"/>
          <xsl:variable name="childElements" select="$assetElement/../asset_element[@parent_idx=$assetElement/@idx and @key=$assetElement/@key]"/>
          <xsl:variable name="firstChildElements" select="$childElements[not(@idx=$childElements/@next_idx)]"/>
          <xsl:for-each select="$firstChildElements">
            <xsl:sequence select="(., my:getNextAssetElements(., $childElements))"/>
          </xsl:for-each>
        </xsl:function>

        <!-- get next asset element of given assetElement out of given assetElements -->
        <xsl:function name="my:getNextAssetElements" as="element(asset_element)*">
          <xsl:param name="assetElement" as="element(asset_element)"/>
          <xsl:param name="assetElements" as="element(asset_element)*"/>
          <xsl:if test="$assetElement/@next_idx">
            <xsl:variable name="nextElement" select="$assetElements[@idx=$assetElement/@next_idx and @key=$assetElement/@key]"/>
            <xsl:sequence select="($nextElement, my:getNextAssetElements($nextElement, $assetElements))"/>
          </xsl:if>
        </xsl:function>

        <!-- get subordinate elements -->
        <xsl:function name="my:getSubordinateElements">
          <xsl:param name="elements"/>
          <xsl:if test="$elements">
            <div style="padding-left:15">
              <xsl:for-each select="$elements">
                <span class="asset-info-label-inline"><xsl:value-of select="concat(name(.), ' ')"/></span>
                <xsl:apply-templates select="." mode="value"/>
              </xsl:for-each>
            </div>
          </xsl:if>
        </xsl:function>

        <xsl:function name="my:toHtml">
          <xsl:param name="element"/>
          <xsl:choose>
            <xsl:when test="node-name($element)='#document' or node-name($element)='#document-fragment'">
              <xsl:for-each select="$element/element()">
                <xsl:copy-of select="my:toHtml(.)"/>
              </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="concat('&#60;', node-name($element))"/>
              <xsl:for-each select="$element/attribute()">
                <xsl:value-of select="concat(' ', node-name(.), '=&#34;', ., '&#34;')"/>
              </xsl:for-each>
              <xsl:choose>
                <xsl:when test="$element/element()">
                  <xsl:value-of select="'>'"/>
                  <div style="padding-left:15">
                    <xsl:for-each select="$element/element()">
                      <xsl:copy-of select="my:toHtml(.)"/>
                    </xsl:for-each>
                  </div>
                  <xsl:value-of select="concat('&#60;/', node-name($element), '>')"/><br/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="'/>'"/><br/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:function>

      </xsl:stylesheet>

    </expression>

    <!-- Description for planning statistics -->
    <expression id="planning-statistics">

      <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:my="http://www.censhare.com" exclude-result-prefixes="my" version="2.0">

        <!-- output -->
        <xsl:output method="html" encoding="UTF-8"/>

        <!-- asset groups -->
        <xsl:variable name="assetGroups">
          <group id="internal-ads" name="${internal-ads}" xpath="starts-with(asset/@type, 'ad.internal.')"/>
          <group id="ads" name="${ads}" xpath="starts-with(asset/@type, 'ad.')"/>
          <group id="editorial" name="${editorial}" xpath="true()"/>
        </xsl:variable>

        <!-- root match -->
        <xsl:template match="/">
          <html>
            <body>
              <xsl:choose>
                <!-- no asset -->
                <xsl:when test="count(asset) = 0">
                  <table cellpadding="1" valign="top" class="asset-info-table">
                    <tr>
                      <td class="asset-info-title">
                        <xsl:value-of select="'${no-asset-selected}'"/>
                      </td>
                    </tr>
                  </table>
                </xsl:when>
                <!-- assets selected -->
                <xsl:otherwise>
                  <xsl:apply-templates/>
                </xsl:otherwise>
              </xsl:choose>
            </body>
          </html>
        </xsl:template>

        <!-- asset match -->
        <xsl:template match="asset">
          <xsl:variable name="asset" select="."/>
          <table cellpadding="1" valign="top" class="asset-info-table">
            <tr>
              <td class="asset-info-title">
                <xsl:value-of select="concat('${statistics}: ${quote-start}', @name, '${quote-end}')"/>
              </td>
            </tr>
            <tr>
              <table cellpadding="0">
                <!-- issue name -->
                <xsl:if test="@issue_name">
                  <tr>
                    <td class="asset-info-label">
                      <xsl:value-of select="'${name}:'"/>
                    </td>
                    <td class="asset-info-value">
                      <xsl:value-of select="@issue_name"/>
                    </td>
                  </tr>
                </xsl:if>
                <!-- issue number and year -->
                <xsl:if test="@issue_no or @issue_year">
                  <tr>
                    <td class="asset-info-label">
                      <xsl:value-of select="'${issue}:'"/>
                    </td>
                    <td class="asset-info-value">
                      <xsl:value-of select="string-join((@issue_no, @issue_year), '/')"/>
                    </td>
                  </tr>
                </xsl:if>
                <!-- publication date -->
                <xsl:variable name="value" select="asset_feature[@feature='censhare:publication-date']/@value_timestamp"/>
                <xsl:if test="$value">
                  <tr>
                    <td class="asset-info-label">
                      <xsl:value-of select="'${publication-date}:'"/>
                    </td>
                    <td class="asset-info-value">
                      <xsl:value-of select="cs:format-date($value, 'short', 'short')"/>
                    </td>
                  </tr>
                </xsl:if>
                <!-- annotation -->
                <xsl:if test="@annotation">
                  <tr>
                    <td class="asset-info-label">
                      <xsl:value-of select="'${annotation}:'"/>
                    </td>
                    <td class="asset-info-value">
                      <xsl:value-of select="@annotation"/>
                    </td>
                  </tr>
                </xsl:if>
                <!-- pages -->
                <xsl:variable name="pageAssetElements" select="my:getTargetPageAssetElements($asset)"/>
                <xsl:if test="$pageAssetElements">
                  <xsl:variable name="areaElements" select="my:getAreaElements($asset, $pageAssetElements)"/>
                  <xsl:variable name="totalArea" select="sum(for $x in $areaElements/element return ($x/@w * $x/@h))"/>
                  <tr>
                    <td class="asset-info-label">
                      <xsl:value-of select="'${pages}:'"/>
                    </td>
                    <td class="asset-info-value">
                      <xsl:value-of select="count($pageAssetElements)"/>
                    </td>
                  </tr>
                  <tr>
                    <td class="asset-info-label">
                      <xsl:value-of select="'${partition}:'"/>
                    </td>
                    <td class="asset-info-value">
                      <table cellpadding="0">
                        <xsl:variable name="dataModel">
                          <xsl:for-each select="$assetGroups/group">
                            <xsl:variable name="groupID" select="@id"/>
                            <xsl:variable name="groupArea" select="sum(for $x in $areaElements/element/element return my:getAreaGroup($x, $groupID, 0))"/>
                            <xsl:if test="$groupArea gt 0">
                              <group>
                                <xsl:copy-of select="@*"/>
                                <xsl:attribute name="area" select="$groupArea"/>
                              </group>
                            </xsl:if>
                          </xsl:for-each>
                        </xsl:variable>
                        <xsl:for-each select="$dataModel/group">
                          <xsl:variable name="groupName" select="@name"/>
                          <xsl:variable name="groupArea" select="@area"/>
                          <xsl:variable name="groupPages" select="($groupArea * count($pageAssetElements)) div $totalArea"/>
                          <tr>
                            <td class="asset-info-value" width="120"><xsl:value-of select="$groupName"/></td>
                            <td class="asset-info-value" align="right" width="50"><xsl:value-of select="concat(cs:format-number(($groupArea * 100) div $totalArea, '#,##0.0'), '%')"/></td>
                            <td class="asset-info-value" align="right" width="80"><xsl:value-of select="concat(cs:format-number($groupPages, '#,##0.0'), ' ${pages}')"/></td>
                          </tr>
                        </xsl:for-each>
                        <xsl:variable name="unusedArea" select="$totalArea - sum($dataModel/group/@area)"/>
                        <xsl:if test="$unusedArea gt 0">
                        <xsl:variable name="statePages" select="($unusedArea * count($pageAssetElements)) div $totalArea"/>
                        <tr>
                          <td class="asset-info-value" width="120">${unused}</td>
                          <td class="asset-info-value" align="right" width="50"><xsl:value-of select="concat(cs:format-number(($unusedArea * 100) div $totalArea, '#,##0.0'), '%')"/></td>
                          <td class="asset-info-value" align="right" width="80"><xsl:value-of select="concat(cs:format-number($statePages, '#,##0.0'), ' ${pages}')"/></td>
                        </tr>
                        </xsl:if>
                      </table>
                    </td>
                  </tr>
                  <tr>
                    <td class="asset-info-label">
                      <xsl:value-of select="'${workflow-state}:'"/>
                    </td>
                    <td class="asset-info-value">
                      <table cellpadding="0">
                        <xsl:variable name="dataModel">
                          <xsl:for-each select="cs:master-data('workflow_state')">
                            <xsl:sort order="ascending" select="@id"/>
                            <xsl:variable name="stateID" select="@id"/>
                            <xsl:variable name="stateName" select="@name"/>
                            <xsl:variable name="stateColor" select="@color"/>
                            <xsl:variable name="stateArea" select="sum(for $x in $areaElements/element/element return my:getAreaWorkflowState($x, $stateID, 0))"/>
                            <xsl:if test="$stateArea gt 0">
                              <state id="{$stateID}" name="{$stateName}" color="{$stateColor}" area="{$stateArea}"/>
                            </xsl:if>
                          </xsl:for-each>
                        </xsl:variable>
                        <xsl:for-each select="$dataModel/state">
                          <xsl:variable name="stateID" select="@id"/>
                          <xsl:variable name="stateName" select="@name"/>
                          <xsl:variable name="stateArea" select="@area"/>
                          <xsl:if test="$stateArea gt 0">
                            <xsl:variable name="statePages" select="($stateArea * count($pageAssetElements)) div $totalArea"/>
                            <tr>
                              <td class="asset-info-value" width="120"><span color="{my:integerToHex(@color)}">█ </span><xsl:value-of select="$stateName"/></td>
                              <td class="asset-info-value" align="right" width="50"><xsl:value-of select="concat(cs:format-number(($stateArea * 100) div $totalArea, '#,##0.0'), '%')"/></td>
                              <td class="asset-info-value" align="right" width="80"><xsl:value-of select="concat(cs:format-number($statePages, '#,##0.0'), ' ${pages}')"/></td>
                            </tr>
                          </xsl:if>
                        </xsl:for-each>
                        <!-- add elements without workflow state -->
                        <xsl:variable name="stateArea" select="sum(for $x in $areaElements/element/element return my:getAreaWorkflowState($x, (), 0))"/>
                        <xsl:if test="$stateArea">
                          <xsl:variable name="statePages" select="($stateArea * count($pageAssetElements)) div $totalArea"/>
                          <tr>
                            <td><span color="white">█ </span>${none}</td>
                            <td class="asset-info-value" align="right" width="50"><xsl:value-of select="concat(cs:format-number(($stateArea * 100) div $totalArea, '#,##0.0'), '%')"/></td>
                            <td class="asset-info-value" align="right" width="80"><xsl:value-of select="concat(cs:format-number($statePages, '#,##0.0'), ' ${pages}')"/></td>
                          </tr>
                        </xsl:if>
                        <!-- add unused space due to precentage definition of full pages -->
                        <xsl:variable name="stateArea" select="$totalArea - (sum($dataModel/state/@area) + $stateArea)"/>
                        <xsl:if test="$stateArea">
                          <xsl:variable name="statePages" select="($stateArea * count($pageAssetElements)) div $totalArea"/>
                          <tr>
                            <td><span color="black">█ </span>${unused}</td>
                            <td class="asset-info-value" align="right" width="50"><xsl:value-of select="concat(cs:format-number(($stateArea * 100) div $totalArea, '#,##0.0'), '%')"/></td>
                            <td class="asset-info-value" align="right" width="80"><xsl:value-of select="concat(cs:format-number($statePages, '#,##0.0'), ' ${pages}')"/></td>
                          </tr>
                        </xsl:if>
                      </table>
                    </td>
                  </tr>
                </xsl:if>
                <!-- sheets -->
                <xsl:variable name="sheets" select="sheet"/>
                <xsl:if test="$sheets">
                  <tr>
                    <td class="asset-info-label">
                      <xsl:value-of select="'${sheets}:'"/>
                    </td>
                    <td class="asset-info-value">
                      <xsl:for-each select="$sheets">
                        <xsl:sort order="ascending" select="@sorting"/>
                        <xsl:value-of select="string-join((if (@pages) then concat(@pages, ' ${pages}') else (), @name, if (@deadline) then concat('${deadline}: ', cs:format-date(@deadline, 'short', 'short')) else ()), ', ')"/><br/>
                      </xsl:for-each>
                    </td>
                  </tr>
                </xsl:if>
              </table>
            </tr>
          </table>
        </xsl:template>

        <!-- get target page asset elements of given asset in correct order-->
        <xsl:function name="my:getTargetPageAssetElements">
          <xsl:param name="asset" as="element(asset)"/>
          <xsl:variable name="rootElement" select="$asset/asset_element[@key='target.' and not(@parent_idx)]"/>
          <xsl:if test="$rootElement">
            <xsl:variable name="firstChildElements" select="for $x in $asset/asset_element[@parent_idx=$rootElement/@idx and @key='target.'] return if ($asset/asset_element[@next_idx=$x/@idx and @key='target.']) then () else $x"/>
            <xsl:if test="$firstChildElements">
              <xsl:copy-of select="$firstChildElements[1]"/>
              <xsl:copy-of select="my:getNextAssetElements($asset, $firstChildElements[1])"/>
            </xsl:if>
          </xsl:if>
        </xsl:function>

        <!-- get recursivly next asset element of given asset element of given asset -->
        <xsl:function name="my:getNextAssetElements">
          <xsl:param name="asset" as="element(asset)"/>
          <xsl:param name="assetElement" as="element(asset_element)"/>
          <xsl:if test="$assetElement/@next_idx">
            <xsl:variable name="nextElement" select="$asset/asset_element[@idx=$assetElement/@next_idx and @key=$assetElement/@key]"/>
            <xsl:if test="$nextElement">
              <xsl:copy-of select="$nextElement"/>
              <xsl:copy-of select="my:getNextAssetElements($asset, $nextElement)"/>
            </xsl:if>
          </xsl:if>
        </xsl:function>

        <!-- get group ID of given asset -->
        <xsl:function name="my:getGroupID" as="xs:string">
          <xsl:param name="asset" as="element(asset)"/>
          <xsl:variable name="filterAsset">
            <xsl:copy-of select="$asset"/>
          </xsl:variable>
          <xsl:value-of select="(for $x in $assetGroups/group return if ($filterAsset/cs:evaluate($x/@xpath)) then $x/@id else ())[1]"/>
        </xsl:function>

        <!-- get workflow state id -->
        <xsl:function name="my:getWorkflowStateID">
          <xsl:param name="asset" as="element(asset)"/>
          <xsl:value-of select="if ($asset/@wf_id and $asset/@wf_step) then cs:master-data('workflow_step')[@wf_id=$asset/@wf_id and @wf_step=$asset/@wf_step]/@wf_state_id else ()"/>
        </xsl:function>

        <!-- get hex of given integer -->
        <xsl:function name="my:integerToHex" as="xs:string">
          <xsl:param name="in" as="xs:integer"/>
          <xsl:sequence select="if ($in eq 0) then '0' else concat(if ($in gt 16) then my:integerToHex($in idiv 16) else '', substring('0123456789ABCDEF', ($in mod 16) + 1, 1))"/>
        </xsl:function>

        <!-- get area elements of given assetElements of given asset -->
        <xsl:function name="my:getAreaElements" as="element(elements)*">
          <xsl:param name="asset" as="element(asset)"/>
          <xsl:param name="assetElements" as="element(asset_element)*"/>
          <elements>
            <xsl:for-each select="$assetElements">
              <element asset-id="{$asset/@id}" asset-name="{$asset/@name}" asset-type="{$asset/@type}" group-id="{my:getGroupID($asset)}" workflow-state-id="{my:getWorkflowStateID($asset)}" idx="{@idx}" x="0" y="0" w="{@width_mm}" h="{@height_mm}" percentage="{my:getFormatPercentage(.)}">
                <xsl:copy-of select="my:getAreaChildElements($asset, .)"/>
              </element>
            </xsl:for-each>
          </elements>
        </xsl:function>

        <!-- get area child element of given element of given asset -->
        <xsl:function name="my:getAreaChildElements" as="element(element)*">
          <xsl:param name="asset" as="element(asset)"/>
          <xsl:param name="element" as="element(asset_element)"/>
          <xsl:for-each select="$asset/child_asset_element_rel[@key=$element/@key and @parent_idx=$element/@idx]">
            <xsl:variable name="childElementRel" select="."/>
            <xsl:variable name="childAsset" select="cs:get-asset($childElementRel/@child_asset)"/>
            <!-- check access to asset -->
            <xsl:if test="$childAsset">
              <xsl:variable name="placedElement" select="$childAsset/asset_element[@key=$element/@key and @idx=$childElementRel/@child_idx]"/>
              <xsl:variable name="x" select="if ($childElementRel/@xoffsmm) then $childElementRel/@xoffsmm else 0"/>
              <xsl:variable name="y" select="if ($childElementRel/@yoffsmm) then $childElementRel/@yoffsmm else 0"/>
              <xsl:variable name="w" select="$placedElement/@width_mm"/>
              <xsl:variable name="h" select="$placedElement/@height_mm"/>
              <xsl:variable name="percentage" select="my:getFormatPercentage($placedElement)"/>
              <element asset-id="{$childAsset/@id}" asset-name="{$childAsset/@name}" asset-type="{$childAsset/@type}" group-id="{my:getGroupID($childAsset)}" workflow-state-id="{my:getWorkflowStateID($childAsset)}" idx="{$placedElement/@idx}" x="{$x}" y="{$y}" w="{$w}" h="{$h}" percentage="{$percentage}">
                <xsl:copy-of select="my:getAreaChildElements($childAsset, $placedElement)"/>
              </element>
            </xsl:if>
          </xsl:for-each>
        </xsl:function>

        <!-- get format percentage for current element -->
        <xsl:function name="my:getFormatPercentage">
          <xsl:param name="asset_element"/>
          <xsl:variable name="percentage_format" select="if (exists(cs:master-data('asset_format')[@id=$asset_element/@asset_format]/@page_percentage)) then (cs:master-data('asset_format')[@id=$asset_element/@asset_format]/@page_percentage) else ()"/>
          <xsl:variable name="percentage_element" select="if (exists($asset_element/@page_percentage)) then ($asset_element/@page_percentage) else ()"/>
          <xsl:value-of select="if (exists($percentage_element)) then ($percentage_element div 100) else (if (exists($percentage_format)) then ($percentage_format div 100) else (1))"/>
        </xsl:function>

        <!-- get group area of given element and groupID -->
        <xsl:function name="my:getAreaGroup" as="xs:double">
          <xsl:param name="element" as="element(element)"/>
          <xsl:param name="groupID" as="xs:string"/>
          <xsl:param name="parentArea" as="xs:double"/>
          <xsl:variable name="result" as="xs:double*">
            <xsl:variable name="area" select="if ($element/@percentage) then $element/@w * $element/@h * $element/@percentage else $element/@w * $element/@h"/>
            <xsl:variable name="childArea" select="(if ($element/@group-id = $groupID) then $area else (if ($parentArea=0) then 0 else -$area))"/>
            <xsl:sequence select="$childArea"/>
            <xsl:for-each select="$element/element">
              <xsl:sequence select="my:getAreaGroup(., $groupID, $parentArea + $childArea)"/>
            </xsl:for-each>
          </xsl:variable>
          <xsl:sequence select="sum($result)"/>
        </xsl:function>

        <!-- get workflow state area of given element and workflowStateID -->
        <xsl:function name="my:getAreaWorkflowState" as="xs:double">
          <xsl:param name="element" as="element(element)"/>
          <xsl:param name="workflowStateID" as="xs:integer?"/>
          <xsl:param name="parentArea" as="xs:double"/>
          <xsl:variable name="result" as="xs:double*">
            <xsl:variable name="area" select="if ($element/@percentage) then $element/@w * $element/@h * $element/@percentage else $element/@w * $element/@h"/>
            <xsl:variable name="childArea" select="(if ($element/@workflow-state-id = (if ($workflowStateID) then $workflowStateID else '')) then $area else (if ($parentArea=0) then 0 else -$area))"/>
            <xsl:sequence select="$childArea"/>
            <xsl:for-each select="$element/element">
              <xsl:sequence select="my:getAreaWorkflowState(., $workflowStateID, $parentArea + $childArea)"/>
            </xsl:for-each>
          </xsl:variable>
          <xsl:sequence select="sum($result)"/>
        </xsl:function>

      </xsl:stylesheet>

    </expression>

    <!-- Expression used to show asset preview in table column -->
    <expression id="asset-column-preview">
      <xsl:stylesheet version="2.0"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:my="http://www.censhare.com/my">

        <!-- output -->
        <xsl:output method="xhtml" indent="yes" encoding="UTF-8" omit-xml-declaration="yes"/>

        <!-- parameters -->
        <xsl:param name="system"/>
        <xsl:param name="transform"/>
        <xsl:param name="control"/>
        <xsl:param name="temp"/>
        <xsl:variable name="urlPrefix" select="string($system/system/@censhare-url-prefix)"/>
        <xsl:variable name="lafBackground" select="if ($system) then $system/system/laf/@background else 'dark'"/>
        <xsl:variable name="lafIconset" select="if ($system) then $system/system/laf/@icon-set else 'default'"/>

        <xsl:template match="/">
          <xsl:variable name="asset" select="asset[1]"/>
          <xsl:if test="$asset">
            <html>Test</html>
          </xsl:if>
        </xsl:template>

        <!-- get preview asset elements of given asset -->
        <xsl:function name="my:getPreviewAssetElements">
          <xsl:param name="asset" as="element(asset)"/>
          <xsl:param name="storageKey" as="xs:string"/>
          <xsl:variable name="rootElement" select="$asset/asset_element[@key='actual.' and not(@parent_idx)]"/>
          <xsl:if test="$rootElement">
            <xsl:variable name="firstChildElement" select="for $x in $asset/asset_element[@parent_idx='0' and @key='actual.'] return if ($asset/asset_element[@next_idx=$x/@idx and @key='actual.']) then () else $x"/>
            <xsl:choose>
              <xsl:when test="$firstChildElement and $asset/storage_item[@element_idx=$firstChildElement/@idx and @key=$storageKey]">
                <xsl:copy-of select="$firstChildElement"/>
                <xsl:copy-of select="my:getNextAssetElements($asset, $firstChildElement)"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="$asset/storage_item[@element_idx=$rootElement/@idx and @key=$storageKey]">
                  <xsl:copy-of select="$rootElement"/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:if>
        </xsl:function>

        <!-- get recursivly next asset element of given asset element of given asset -->
        <xsl:function name="my:getNextAssetElements">
          <xsl:param name="asset" as="element(asset)"/>
          <xsl:param name="assetElement" as="element(asset_element)"/>
          <xsl:if test="$assetElement/@next_idx">
            <xsl:variable name="nextElement" select="$asset/asset_element[@idx=$assetElement/@next_idx and @key=$assetElement/@key]"/>
            <xsl:if test="$nextElement">
              <xsl:copy-of select="$nextElement"/>
              <xsl:copy-of select="my:getNextAssetElements($asset, $nextElement)"/>
            </xsl:if>
          </xsl:if>
        </xsl:function>

        <!-- Get image with shadow element -->
        <xsl:function name="my:getImageWithShadowElement">
          <xsl:param name="imageStorage"/>
          <xsl:param name="drawFactor"/>
          <xsl:param name="shadowDrawFactor"/>
          <xsl:variable name="imageWidth" select="round($imageStorage/@width_px * $drawFactor)"/>
          <xsl:variable name="imageHeight" select="round($imageStorage/@height_px * $drawFactor)"/>
          <table cellpadding="0" valign="top">
            <tr>
              <td align="right"><xsl:copy-of select="my:getIconImage('shadow-top-left', round(5 * $shadowDrawFactor), round(2 * $shadowDrawFactor))"/></td>
              <td><xsl:copy-of select="my:getIconImage('shadow-top', $imageWidth, round(2 * $shadowDrawFactor))"/></td>
              <td><xsl:copy-of select="my:getIconImage('shadow-top-right', round(5 * $shadowDrawFactor), round(2 * $shadowDrawFactor))"/></td>
            </tr>
            <tr>
              <td align="right"><xsl:copy-of select="my:getIconImage('shadow-left', round(5 * $shadowDrawFactor), $imageHeight)"/></td>
              <td>
                <img>
                  <xsl:attribute name="src" select="concat($urlPrefix, 'assets/asset/id/', $imageStorage/@asset_id, '/element/actual/', $imageStorage/@element_idx, '/storage/preview/file/', tokenize($imageStorage/@relpath,'/')[last()])"/>
                  <xsl:attribute name="width" select="$imageWidth"/>
                  <xsl:attribute name="height" select="$imageHeight"/>
                </img>
              </td>
              <td><xsl:copy-of select="my:getIconImage('shadow-right', round(5 * $shadowDrawFactor), $imageHeight)"/></td>
            </tr>
            <tr>
              <td align="right"><xsl:copy-of select="my:getIconImage('shadow-bottom-left', round(5 * $shadowDrawFactor), round(8 * $shadowDrawFactor))"/></td>
              <td><xsl:copy-of select="my:getIconImage('shadow-bottom', $imageWidth, round(8 * $shadowDrawFactor))"/></td>
              <td><xsl:copy-of select="my:getIconImage('shadow-bottom-right', round(5 * $shadowDrawFactor), round(8 * $shadowDrawFactor))"/></td>
            </tr>
          </table>
        </xsl:function>

        <!-- Get icon image of given key -->
        <xsl:function name="my:getIconImage">
          <xsl:param name="key"/>
          <xsl:param name="width"/>
          <xsl:param name="height"/>
          <img>
            <xsl:attribute name="src" select="concat($urlPrefix, 'resources/icon/', $key, '/iconset/', $lafIconset, '/background/', $lafBackground, '/file')"/>
            <xsl:if test="$width">
              <xsl:attribute name="width" select="$width"/>
            </xsl:if>
            <xsl:if test="$height">
              <xsl:attribute name="height" select="$height"/>
            </xsl:if>
          </img>
        </xsl:function>

      </xsl:stylesheet>
    </expression>

    <!-- Expression used to show asset preview -->
    <expression id="asset-preview">
      <xsl:stylesheet version="2.0"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:my="http://www.censhare.com/my">

        <!-- output -->
        <xsl:output method="xhtml" indent="yes" encoding="UTF-8" omit-xml-declaration="yes"/>

        <!-- parameters -->
        <xsl:param name="system"/>
        <xsl:param name="transform"/>
        <xsl:param name="control"/>
        <xsl:param name="temp"/>
        <xsl:variable name="mode" select="if ($transform and $transform/@mode='html-widget') then 'html-widget' else ''"/>
        <xsl:variable name="urlPrefix" select="if ($system) then string($system/system/@censhare-url-prefix) else if ($mode='html-widget') then 'censhare:///service/' else '/ws/rest/service/'"/>
        <xsl:variable name="lafBackground" select="if ($system) then $system/system/laf/@background else 'dark'"/>
        <xsl:variable name="lafIconset" select="if ($system) then $system/system/laf/@icon-set else 'default'"/>

        <xsl:template match="/">
          <xsl:variable name="asset" select="asset[1]"/>
          <xsl:if test="$asset">
            <html>
              <xsl:variable name="previewAssetElements" select="my:getPreviewAssetElements($asset, 'preview')"/>
              <xsl:variable name="textPreviewAssetElements" select="my:getPreviewAssetElements($asset, 'text-preview')"/>
              <xsl:choose>
                <!-- draw preview -->
                <xsl:when test="$previewAssetElements">
                  <xsl:variable name="scale" select="if ($temp and $temp/temp/@scale) then (if ($temp/temp/@scale='fit') then 0 else xs:double($temp/temp/@scale)) else 1.0"/>
                  <xsl:variable name="drawFactor" select="if ($scale=0) then min((($control/control/@width - 12) div max($asset/storage_item[@key='preview']/@width_px), ($control/control/@height - 12) div max($asset/storage_item[@key='preview']/@height_px))) else $scale"/>
                  <xsl:for-each select="$previewAssetElements">
                    <xsl:variable name="previewStorage" select="for $x in . return $asset/storage_item[@element_idx=$x/@idx and @key='preview']"/>
                    <xsl:copy-of select="my:getImageWithShadowElement($previewStorage, $drawFactor, 1.0)"/>
                  </xsl:for-each>
                </xsl:when>
                <!-- draw text preview -->
                <xsl:when test="$textPreviewAssetElements">
                  <xsl:for-each select="$textPreviewAssetElements">
                    <xsl:variable name="previewStorage" select="for $x in . return $asset/storage_item[@element_idx=$x/@idx and @key='text-preview' and @mimetype='application/xhtml+xml']"/>
                    <xsl:copy-of select="doc(concat($urlPrefix, 'assets/asset/id/', $previewStorage/@asset_id, '/element/actual/', $previewStorage/@element_idx, '/storage/text-preview/file/', tokenize($previewStorage/@relpath,'/')[last()]))/html/body"/>
                    <xsl:if test="position() lt last()">
                      <hr/>
                    </xsl:if>
                  </xsl:for-each>
                </xsl:when>
                <!-- draw asset icon -->
                <xsl:otherwise>
                  <img>
                    <xsl:attribute name="src" select="concat($urlPrefix, 'assets/asset/id/', $asset/@id, '/icon/iconset/', $lafIconset, '/background/', $lafBackground, '/minsize/128/file')"/>
                  </img>
                </xsl:otherwise>
              </xsl:choose>
            </html>
          </xsl:if>
        </xsl:template>

        <!-- get preview asset elements of given asset -->
        <xsl:function name="my:getPreviewAssetElements">
          <xsl:param name="asset" as="element(asset)"/>
          <xsl:param name="storageKey" as="xs:string"/>
          <xsl:variable name="rootElement" select="$asset/asset_element[@key='actual.' and not(@parent_idx)]"/>
          <xsl:if test="$rootElement">
            <xsl:variable name="firstChildElement" select="for $x in $asset/asset_element[@parent_idx='0' and @key='actual.'] return if ($asset/asset_element[@next_idx=$x/@idx and @key='actual.']) then () else $x"/>
            <xsl:choose>
              <xsl:when test="$firstChildElement and $asset/storage_item[@element_idx=$firstChildElement/@idx and @key=$storageKey]">
                <xsl:copy-of select="$firstChildElement"/>
                <xsl:copy-of select="my:getNextAssetElements($asset, $firstChildElement)"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="$asset/storage_item[@element_idx=$rootElement/@idx and @key=$storageKey]">
                  <xsl:copy-of select="$rootElement"/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:if>
        </xsl:function>

        <!-- get recursivly next asset element of given asset element of given asset -->
        <xsl:function name="my:getNextAssetElements">
          <xsl:param name="asset" as="element(asset)"/>
          <xsl:param name="assetElement" as="element(asset_element)"/>
          <xsl:if test="$assetElement/@next_idx">
            <xsl:variable name="nextElement" select="$asset/asset_element[@idx=$assetElement/@next_idx and @key=$assetElement/@key]"/>
            <xsl:if test="$nextElement">
              <xsl:copy-of select="$nextElement"/>
              <xsl:copy-of select="my:getNextAssetElements($asset, $nextElement)"/>
            </xsl:if>
          </xsl:if>
        </xsl:function>

        <!-- Get image with shadow element -->
        <xsl:function name="my:getImageWithShadowElement">
          <xsl:param name="imageStorage"/>
          <xsl:param name="drawFactor"/>
          <xsl:param name="shadowDrawFactor"/>
          <xsl:variable name="imageWidth" select="round($imageStorage/@width_px * $drawFactor)"/>
          <xsl:variable name="imageHeight" select="round($imageStorage/@height_px * $drawFactor)"/>
          <table cellpadding="0" valign="top">
            <tr>
              <td align="right"><xsl:copy-of select="my:getIconImage('shadow-top-left', round(5 * $shadowDrawFactor), round(2 * $shadowDrawFactor))"/></td>
              <td><xsl:copy-of select="my:getIconImage('shadow-top', $imageWidth, round(2 * $shadowDrawFactor))"/></td>
              <td><xsl:copy-of select="my:getIconImage('shadow-top-right', round(5 * $shadowDrawFactor), round(2 * $shadowDrawFactor))"/></td>
            </tr>
            <tr>
              <td align="right"><xsl:copy-of select="my:getIconImage('shadow-left', round(5 * $shadowDrawFactor), $imageHeight)"/></td>
              <td>
                <img>
                  <xsl:attribute name="src" select="concat($urlPrefix, 'assets/asset/id/', $imageStorage/@asset_id, '/element/actual/', $imageStorage/@element_idx, '/storage/preview/file/', tokenize($imageStorage/@relpath,'/')[last()])"/>
                  <xsl:attribute name="width" select="$imageWidth"/>
                  <xsl:attribute name="height" select="$imageHeight"/>
                </img>
              </td>
              <td><xsl:copy-of select="my:getIconImage('shadow-right', round(5 * $shadowDrawFactor), $imageHeight)"/></td>
            </tr>
            <tr>
              <td align="right"><xsl:copy-of select="my:getIconImage('shadow-bottom-left', round(5 * $shadowDrawFactor), round(8 * $shadowDrawFactor))"/></td>
              <td><xsl:copy-of select="my:getIconImage('shadow-bottom', $imageWidth, round(8 * $shadowDrawFactor))"/></td>
              <td><xsl:copy-of select="my:getIconImage('shadow-bottom-right', round(5 * $shadowDrawFactor), round(8 * $shadowDrawFactor))"/></td>
            </tr>
          </table>
        </xsl:function>

        <!-- Get icon image of given key -->
        <xsl:function name="my:getIconImage">
          <xsl:param name="key"/>
          <xsl:param name="width"/>
          <xsl:param name="height"/>
          <img>
            <xsl:attribute name="src" select="concat($urlPrefix, 'resources/icon/', $key, '/iconset/', $lafIconset, '/background/', $lafBackground, '/file')"/>
            <xsl:if test="$width">
              <xsl:attribute name="width" select="$width"/>
            </xsl:if>
            <xsl:if test="$height">
              <xsl:attribute name="height" select="$height"/>
            </xsl:if>
          </img>
        </xsl:function>

      </xsl:stylesheet>
    </expression>

    <!-- Expression used to construct tooltips for the assetref XMLEditor widget -->
    <expression id="asset-version-changes">
      <xsl:stylesheet version="2.0"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:my="http://www.censhare.com/my">

        <!-- best results at url test window with this url:
            censhare:///service/assets/asset/id/${asset-id}/transform;key=transform:asset-versions;mode=html-widget
        -->

        <!-- output -->
        <xsl:output method="xhtml" indent="yes" encoding="UTF-8" omit-xml-declaration="yes"/>

        <!-- parameters -->
        <xsl:param name="system"/>
        <xsl:param name="transform"/>
        <xsl:variable name="mode" select="if ($transform and $transform/@mode='html-widget') then 'html-widget' else ''"/>
        <xsl:variable name="urlPrefix" select="if ($system) then string($system/system/@censhare-url-prefix) else if ($mode='html-widget') then 'censhare:///service/' else '/ws/rest/service/'"/>
        <xsl:variable name="lafBackground" select="if ($system) then $system/system/laf/@background else 'dark'"/>
        <xsl:variable name="lafIconset" select="if ($system) then $system/system/laf/@icon-set else 'default'"/>
        <xsl:variable name="loggedInUserID" select="$system/system/party/@id"/>
        <xsl:variable name="uiLocale" select="$system/system/@locale"/>
        <xsl:variable name="excludeFeatureKeys">
          <feature key="censhare:uuid"/>
          <feature key="censhare:asset.application"/>
          <feature key="censhare:asset.checked_out_by"/>
          <feature key="censhare:asset.checked_out_date"/>
          <feature key="censhare:asset.checked_out_inside_id"/>
          <feature key="censhare:asset.created_by"/>
          <feature key="censhare:asset.creation_date"/>
          <feature key="censhare:asset.currversion"/>
          <feature key="censhare:asset.deadline_actual"/>
          <feature key="censhare:asset.deadline_calc"/>
          <feature key="censhare:asset.deletion"/>
          <feature key="censhare:asset.edit-permission-key"/>
          <feature key="censhare:asset.first_actual_paging"/>
          <feature key="censhare:asset.first_paging"/>
          <feature key="censhare:asset.first_target_paging"/>
          <feature key="censhare:asset.id"/>
          <feature key="censhare:asset.id_extern"/>
          <feature key="censhare:asset.iscancellation"/>
          <feature key="censhare:asset.modified_by"/>
          <feature key="censhare:asset.modified_date"/>
          <feature key="censhare:asset.state"/>
          <feature key="censhare:asset.storage_state"/>
          <feature key="censhare:asset.wf_worst_state_id"/>
          <feature key="censhare:input-form"/>
        </xsl:variable>
        <xsl:variable name="useFeatures">
          <xsl:copy-of select="for $x in cs:cachelookup('feature')/feature return if ($excludeFeatureKeys/feature[@key=$x/@key]) then () else if ($x/@attribute_mapping) then (if (starts-with($x/@attribute_mapping, '@')) then $x else ()) else $x"/>
        </xsl:variable>

        <xsl:template match="/">

          <xsl:variable name="asset" select="asset[1]"/>
          <xsl:if test="$asset">
            <html>
              <table width="800" cellpadding="1" valign="top" class="asset-info-table">

                <!-- Info asset -->
                <td class="asset-info-title" colspan="2">
                  <xsl:value-of select="concat('Version info of ${quote-start}', $asset/@name, '${quote-end}')"/>
                </td>
                <tr>
                  <td class="asset-info-label" width="200"></td>
                  <td class="asset-info-value" width="600"></td>
                </tr>

                <!-- Get asset versions -->
                <xsl:variable name="assets"><xsl:copy-of select="cs:get-asset-versions($asset/@id)"/></xsl:variable>
                <xsl:for-each select="$assets/asset">
                  <xsl:variable name="currentAsset" select="."/>
                  <xsl:variable name="currentAssetIndex" select="index-of($assets/asset/@version, string($currentAsset/@version))"/>
                  <xsl:variable name="previousAsset" select="if ($currentAssetIndex>1) then $assets/asset[$currentAssetIndex - 1] else ()"/>

                  <!-- Info version -->
                  <tr color="white" bgcolor="#666666">
                    <td colspan="2"><b>${version}: <xsl:value-of select="$currentAsset/@version"/></b></td>
                  </tr>
                  <tr>
                    <td class="asset-info-label">${modified}:</td>
                    <td><xsl:copy-of select="my:getChangedInfo($currentAsset/@modified_date, $currentAsset/@modified_by)"/></td>
                  </tr>
                  <!-- Info changed attributes (don't show at first version) -->
                  <xsl:if test="$previousAsset">
                    <xsl:variable name="changedAssetFeatures"><xsl:copy-of select="my:getChangedAssetAttributes($previousAsset, $currentAsset)"/></xsl:variable>
                    <xsl:if test="$changedAssetFeatures/feature">
                      <xsl:for-each select="$changedAssetFeatures/feature">
                        <tr>
                          <td class="asset-info-label"><xsl:value-of select="@name"/>:</td>
                          <xsl:choose>
                            <xsl:when test="@modification='added'">
                              <table cellpadding="0">
                                <tr>
                                  <td width="20"><xsl:copy-of select="my:getIconImage('add')"/></td>
                                  <td class="asset-info-value"><xsl:value-of select="@current-value"/></td>
                                </tr>
                              </table>
                            </xsl:when>
                            <xsl:when test="@modification='removed'">
                              <table cellpadding="0">
                                <tr>
                                  <td width="20"><xsl:copy-of select="my:getIconImage('delete')"/></td>
                                  <td class="asset-info-value"><xsl:value-of select="@previous-value"/></td>
                                </tr>
                              </table>
                            </xsl:when>
                            <xsl:when test="@modification='changed'">
                              <table cellpadding="0">
                                <tr>
                                  <td width="20"><xsl:copy-of select="my:getIconImage('edit')"/></td>
                                  <td class="asset-info-value">
                                    <span style="text-decoration:line-through"><xsl:value-of select="@previous-value"/></span>
                                    <xsl:text> </xsl:text>
                                    <xsl:value-of select="@current-value"/>
                                  </td>
                                </tr>
                              </table>
                            </xsl:when>
                          </xsl:choose>
                        </tr>
                      </xsl:for-each>
                    </xsl:if>
                  </xsl:if>
                  <!-- Info changed features -->
                  <xsl:variable name="changedFeatures"><xsl:copy-of select="my:getChangedFeatures($previousAsset, $currentAsset)"/></xsl:variable>
                  <xsl:for-each select="$changedFeatures/feature">
                    <xsl:variable name="changedFeatureElements"><xsl:copy-of select="my:getChangedFeatureElements($previousAsset, $currentAsset, @key)"/></xsl:variable>
                    <xsl:if test="$changedFeatureElements/feature">
                      <tr>
                        <td class="asset-info-label"><xsl:value-of select="@name"/>:</td>
                        <td>
                          <xsl:for-each select="$changedFeatureElements/feature">
                            <table cellpadding="0">
                              <tr>
                                <xsl:choose>
                                  <xsl:when test="@modification='added'">
                                    <td width="20"><xsl:copy-of select="my:getIconImage('add')"/></td>
                                    <td class="asset-info-value">
                                      <xsl:value-of select="if (@current-value!='') then @current-value else @name"/>
                                      <xsl:copy-of select="my:getChildFeatures(.)"/>
                                    </td>
                                  </xsl:when>
                                  <xsl:when test="@modification='removed'">
                                    <td width="20"><xsl:copy-of select="my:getIconImage('delete')"/></td>
                                    <td class="asset-info-value">
                                      <xsl:value-of select="if (@previous-value!='') then @previous-value else @name"/>
                                      <xsl:copy-of select="my:getChildFeatures(.)"/>
                                    </td>
                                  </xsl:when>
                                  <xsl:when test="@modification='modified'">
                                    <td width="20"><xsl:copy-of select="my:getIconImage('edit')"/></td>
                                    <td class="asset-info-value">
                                      <span style="text-decoration:line-through"><xsl:value-of select="if (@previous-value!='') then @previous-value else @name"/></span>
                                      <xsl:text> </xsl:text>
                                      <xsl:value-of select="@current-value"/>
                                      <xsl:copy-of select="my:getChildFeatures(.)"/>
                                    </td>
                                  </xsl:when>
                                  <xsl:when test="@modification='equals'">
                                    <td width="20">•</td>
                                    <td class="asset-info-value">
                                      <xsl:value-of select="if (@current-value!='') then @current-value else @name"/>
                                      <xsl:copy-of select="my:getChildFeatures(.)"/>
                                    </td>
                                  </xsl:when>
                                </xsl:choose>
                              </tr>
                            </table>
                          </xsl:for-each>
                        </td>
                      </tr>
                    </xsl:if>
                  </xsl:for-each>
                  <!-- Info changed master files -->
                  <xsl:variable name="changedStorages"><xsl:copy-of select="my:getChangedMasterStorages($previousAsset, $currentAsset)"/></xsl:variable>
                  <xsl:if test="$changedStorages/storage">
                    <tr>
                      <td class="asset-info-label">${master-file}:</td>
                      <td>
                        <xsl:for-each select="$changedStorages/storage">
                          <table cellpadding="0">
                            <tr>
                              <xsl:choose>
                                <xsl:when test="@modification='removed'">
                                  <td width="20"><xsl:copy-of select="my:getIconImage('delete')"/></td>
                                  <td class="asset-info-value">
                                    <xsl:copy-of select="my:getPreviewElement($previousAsset, storage_item, 200, 200)"/>
                                  </td>
                                </xsl:when>
                                <xsl:when test="@modification='added'">
                                  <td width="20"><xsl:copy-of select="my:getIconImage('add')"/></td>
                                  <td class="asset-info-value">
                                    <xsl:copy-of select="my:getPreviewElement($currentAsset, storage_item, 200, 200)"/>
                                  </td>
                                </xsl:when>
                                <xsl:when test="@modification='modified'">
                                  <td width="20"><xsl:copy-of select="my:getIconImage('edit')"/></td>
                                  <td class="asset-info-value">
                                    <xsl:copy-of select="my:getPreviewElement($currentAsset, storage_item, 200, 200)"/>
                                  </td>
                                </xsl:when>
                              </xsl:choose>
                            </tr>
                          </table>
                        </xsl:for-each>
                      </td>
                    </tr>
                  </xsl:if>
                  <!-- Empty row -->
                  <tr/>
                </xsl:for-each>
              </table>
            </html>
          </xsl:if>
        </xsl:template>

        <!-- Get changed asset attributes -->
        <xsl:function name="my:getChangedAssetAttributes">
          <xsl:param name="previousAsset" as="element(asset)"/>
          <xsl:param name="currentAsset" as="element(asset)"/>
          <xsl:variable name="usedAssetAttributeNames" select="distinct-values((for $x in $previousAsset/@* return node-name($x), for $x in $currentAsset/@* return node-name($x)))"/>
          <xsl:variable name="assetFeatures" select="for $x in $useFeatures/feature return if ($x/@attribute_mapping and $usedAssetAttributeNames=substring($x/@attribute_mapping, 2)) then $x else ()"/>
          <xsl:for-each select="$assetFeatures">
            <xsl:sort order="ascending" select="cs:cachelookup('feature', '@key', .)/@name"/>
            <xsl:variable name="previousValue" select="my:getFeatureAttribute($previousAsset, @attribute_mapping)"/>
            <xsl:variable name="currentValue" select="my:getFeatureAttribute($currentAsset, @attribute_mapping)"/>
            <xsl:choose>
              <xsl:when test="$previousValue and not($currentValue)">
                <!-- Feature removed -->
                <feature key="{@key}" name="{@name}" previous-value="{$previousValue}" attribute_mapping="{@attribute_mapping}" modification="removed"/>
              </xsl:when>
              <xsl:when test="not($previousValue) and $currentValue">
                <!-- Feature added -->
                <feature key="{@key}" name="{@name}" current-value="{$currentValue}" attribute_mapping="{@attribute_mapping}" modification="added"/>
              </xsl:when>
              <xsl:when test="$previousValue and $currentValue and ($previousValue != $currentValue)">
                <!-- Feature changed -->
                <feature key="{@key}" name="{@name}" previous-value="{$previousValue}" current-value="{$currentValue}" attribute_mapping="{@attribute_mapping}" modification="changed"/>
              </xsl:when>
            </xsl:choose>
          </xsl:for-each>
        </xsl:function>

        <!-- Get changed features of given previousParentNode and given currentParentNode -->
        <xsl:function name="my:getChangedFeatures">
          <xsl:param name="previousParentNode"/>
          <xsl:param name="currentParentNode"/>
          <xsl:variable name="usedAssetFeatureKeys" select="distinct-values(($previousParentNode/asset_feature/@feature, $currentParentNode/asset_feature/@feature))"/>
          <xsl:variable name="assetFeatures"><xsl:copy-of select="for $x in $useFeatures/feature return if ($x/@attribute_mapping) then () else if ($usedAssetFeatureKeys=$x/@key) then $x else ()"/></xsl:variable>
          <xsl:for-each select="$assetFeatures/feature">
            <xsl:sort order="ascending" select="cs:cachelookup('feature', '@key', .)/@name"/>
            <xsl:copy-of select="."/>
          </xsl:for-each>
        </xsl:function>

        <!-- Get changed feature elements -->
        <xsl:function name="my:getChangedFeatureElements">
          <xsl:param name="previousParentNode"/>
          <xsl:param name="currentParentNode"/>
          <xsl:param name="key" as="xs:string"/>
          <xsl:variable name="previousFeatureElements"><xsl:copy-of select="my:getChildFeatureElements($previousParentNode, $key)"/></xsl:variable>
          <xsl:variable name="currentFeatureElements"><xsl:copy-of select="my:getChildFeatureElements($currentParentNode, $key)"/></xsl:variable>
          <xsl:variable name="values" select="distinct-values(($previousFeatureElements/feature/@value, $currentFeatureElements/feature/@value))"/>
          <xsl:for-each select="$values">
            <xsl:sort order="ascending" select="."/>
            <xsl:variable name="value" select="."/>
            <xsl:variable name="previousFeatureElement" select="$previousFeatureElements/feature[@value=$value][1]"/>
            <xsl:variable name="currentFeatureElement" select="$currentFeatureElements/feature[@value=$value][1]"/>
            <xsl:variable name="previousAssetFeature" select="$previousParentNode/asset_feature[@sid=$previousFeatureElement/@sid]"/>
            <xsl:variable name="currentAssetFeature" select="$currentParentNode/asset_feature[@sid=$currentFeatureElement/@sid]"/>
            <xsl:variable name="childFeatureElements">
              <xsl:variable name="changedFeatures"><xsl:copy-of select="my:getChangedFeatures($previousAssetFeature, $currentAssetFeature)"/></xsl:variable>
              <xsl:for-each select="$changedFeatures/feature">
                <xsl:copy-of select="my:getChangedFeatureElements($previousAssetFeature, $currentAssetFeature, @key)"/>
              </xsl:for-each>
            </xsl:variable>
            <xsl:variable name="modification" select="."/>
            <xsl:choose>
              <!-- Check removed -->
              <xsl:when test="$previousFeatureElement and empty($currentFeatureElement)">
                <feature key="{$previousFeatureElement/@key}" name="{$previousFeatureElement/@name}" previous-value="{$value}" previous-sid="{$previousFeatureElement/@sid}" modification="removed">
                  <xsl:copy-of select="$childFeatureElements/feature"/>
                </feature>
              </xsl:when>
              <!-- Check added -->
              <xsl:when test="empty($previousFeatureElement) and $currentFeatureElement">
                <feature key="{$currentFeatureElement/@key}" name="{$currentFeatureElement/@name}" current-value="{$value}" current-sid="{$currentFeatureElement/@sid}" modification="added">
                  <xsl:copy-of select="$childFeatureElements/feature"/>
                </feature>
              </xsl:when>
              <!-- Check modified -->
              <xsl:when test="$previousFeatureElement and $currentFeatureElement">
                <xsl:if test="$childFeatureElements/feature">
                  <feature key="{$currentFeatureElement/@key}" name="{$currentFeatureElement/@name}" previous-value="{$value}" previous-sid="{$previousFeatureElement/@sid}" current-value="{$value}" current-sid="{$currentFeatureElement/@sid}" modification="equals">
                    <xsl:copy-of select="$childFeatureElements/feature"/>
                  </feature>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:for-each>
        </xsl:function>

        <!-- Get child feature elements of given parentNode with given key -->
        <xsl:function name="my:getChildFeatureElements">
          <xsl:param name="parentNode"/>
          <xsl:param name="key" as="xs:string"/>
          <xsl:variable name="assetFeatures" select="if ($key) then $parentNode/asset_feature[@feature=$key] else $parentNode/asset_feature"/>
          <xsl:for-each select="$assetFeatures">
            <feature key="{@feature}" name="{my:getFeatureName(.)}" value="{my:getFeatureValue(.)}" sid="{@sid}"/>
          </xsl:for-each>
        </xsl:function>

        <!-- Get changed master storages -->
        <xsl:function name="my:getChangedMasterStorages">
          <xsl:param name="previousAsset" as="element(asset)"/>
          <xsl:param name="currentAsset" as="element(asset)"/>
          <xsl:variable name="previousMasterStorages" select="$previousAsset/storage_item[@key='master']"/>
          <xsl:variable name="currentMasterStorages" select="$currentAsset/storage_item[@key='master']"/>
          <xsl:variable name="removedStorages" select="for $x in $previousMasterStorages return if ($currentMasterStorages/@element_idx = $x/@element_idx) then () else $x"/>
          <xsl:variable name="addedStorages" select="for $x in $currentMasterStorages return if ($previousMasterStorages/@element_idx = $x/@element_idx) then () else $x"/>
          <xsl:variable name="modifiedStorages" select="for $x in $currentMasterStorages return if ($previousMasterStorages/@element_idx = $x/@element_idx and $previousMasterStorages/@relpath != $x/@relpath) then $x else ()"/>
          <xsl:if test="$removedStorages">
            <xsl:for-each select="$removedStorages">
              <storage modification="removed">
                <xsl:copy-of select="."/>
              </storage>
            </xsl:for-each>
          </xsl:if>
          <xsl:if test="$addedStorages">
            <xsl:for-each select="$addedStorages">
              <storage modification="added">
                <xsl:copy-of select="."/>
              </storage>
            </xsl:for-each>
          </xsl:if>
          <xsl:if test="$modifiedStorages">
            <xsl:for-each select="$modifiedStorages">
              <xsl:variable name="currentStorage" select="."/>
              <xsl:variable name="previousStorage" select="$previousMasterStorages[@element_idx=$currentStorage/@element_idx]"/>
              <!-- Check differences of text-previews -->
              <xsl:variable name="currentTextPreviewStorage" select="my:getTextPreviewStorageItem($currentAsset, $currentStorage)"/>
              <xsl:variable name="previousTextPreviewStorage" select="my:getTextPreviewStorageItem($previousAsset, $previousStorage)"/>
              <xsl:choose>
                <xsl:when test="$previousTextPreviewStorage and $currentTextPreviewStorage">
                  <xsl:variable name="currentContent"><xsl:value-of select="doc(concat($urlPrefix, 'assets/asset/id/', $currentTextPreviewStorage/@asset_id, if ($currentAsset/@currversion='0') then '' else concat('/version/', $currentAsset/@version), '/element/actual/', $currentTextPreviewStorage/@element_idx, '/storage/text-preview/file/', tokenize($currentTextPreviewStorage/@relpath,'/')[last()]))/html/body"/></xsl:variable>
                  <xsl:variable name="previousContent"><xsl:value-of select="doc(concat($urlPrefix, 'assets/asset/id/', $previousTextPreviewStorage/@asset_id, if ($previousAsset/@currversion='0') then '' else concat('/version/', $previousAsset/@version), '/element/actual/', $previousTextPreviewStorage/@element_idx, '/storage/text-preview/file/', tokenize($previousTextPreviewStorage/@relpath,'/')[last()]))/html/body"/></xsl:variable>
                  <xsl:if test="$currentContent!=$previousContent">
                    <storage modification="modified">
                      <xsl:copy-of select="."/>
                    </storage>
                  </xsl:if>
                </xsl:when>
                <xsl:otherwise>
                  <storage modification="modified">
                    <xsl:copy-of select="."/>
                  </storage>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:for-each>
          </xsl:if>
        </xsl:function>

        <!-- Get icon image of given key -->
        <xsl:function name="my:getIconImage">
          <xsl:param name="key"/>
          <img>
            <xsl:attribute name="src" select="concat($urlPrefix, 'resources/icon/', $key, '/iconset/', $lafIconset, '/background/', $lafBackground, '/file')"/>
          </img>
        </xsl:function>

        <!-- Get preview element of given asset and given masterStorageItem -->
        <xsl:function name="my:getPreviewElement">
          <xsl:param name="asset" as="element(asset)"/>
          <xsl:param name="masterStorageItem" as="element(storage_item)"/>
          <xsl:param name="maxWidth" as="xs:integer"/>
          <xsl:param name="maxHeight" as="xs:integer"/>
          <xsl:variable name="previewStorage" select="my:getAnyPreviewStorageItem($asset, $masterStorageItem)"/>
          <xsl:choose>
            <!-- Check preview storage -->
            <xsl:when test="$previewStorage[@key='thumbnail']">
              <img>
                <xsl:variable name="imageFactor" select="if ($maxWidth div $previewStorage/@width_px lt $maxHeight div $previewStorage/@height_px) then ($maxWidth div $previewStorage/@width_px) else ($maxHeight div $previewStorage/@height_px)"/>
                <xsl:if test="$previewStorage/@width_px">
                  <xsl:attribute name="width" select="round($previewStorage/@width_px * $imageFactor)"/>
                </xsl:if>
                <xsl:if test="$previewStorage/@height_px">
                  <xsl:attribute name="height" select="round($previewStorage/@height_px * $imageFactor)"/>
                </xsl:if>
                <xsl:attribute name="src" select="concat($urlPrefix, 'assets/asset/id/', $previewStorage/@asset_id, if ($asset/@currversion='0') then '' else concat('/version/', $asset/@version), '/element/actual/page/0/storage/thumbnail/file/', tokenize($previewStorage/@relpath,'/')[last()])"/>
              </img>
            </xsl:when>
            <!-- Check text preview storage -->
            <xsl:when test="$previewStorage[@key='text-preview' and @mimetype='application/xhtml+xml']">
              <xsl:copy-of select="doc(concat($urlPrefix, 'assets/asset/id/', $previewStorage/@asset_id, if ($asset/@currversion='0') then '' else concat('/version/', $asset/@version), '/element/actual/', $previewStorage/@element_idx, '/storage/text-preview/file/', tokenize($previewStorage/@relpath,'/')[last()]))/html/body"/>
            </xsl:when>
            <!-- Otherwise relpath output -->
            <xsl:otherwise>
              <xsl:value-of select="$asset/storage_item[@key='master']/@relpath"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:function>

        <!-- Get any (thumbnail and text-preview) storageItem of given asset and given masterStorageItem -->
        <xsl:function name="my:getAnyPreviewStorageItem">
          <xsl:param name="asset" as="element(asset)"/>
          <xsl:param name="masterStorageItem" as="element(storage_item)"/>
          <!-- Check thumbnail storage with same element index -->
          <xsl:variable name="thumbnailStorage" select="$asset/storage_item[@key='thumbnail' and @element_idx=$masterStorageItem/@element_idx][1]"/>
          <xsl:choose>
            <xsl:when test="$thumbnailStorage">
              <xsl:copy-of select="$thumbnailStorage"/>
            </xsl:when>
            <xsl:otherwise>
              <!-- Check text-preview storage with same element index -->
              <xsl:variable name="thumbnailStorage" select="$asset/storage_item[@key='text-preview' and @element_idx=$masterStorageItem/@element_idx][1]"/>
              <xsl:choose>
                <xsl:when test="$thumbnailStorage">
                  <xsl:copy-of select="$thumbnailStorage"/>
                </xsl:when>
                <xsl:otherwise>
                  <!-- Check preview storage of child elements -->
                  <xsl:variable name="firstChildElement" select="for $x in $asset/asset_element return if ($x/@key='actual.' and $x/@parent_idx=$masterStorageItem/@element_idx and empty($asset/asset_element[@key='actual.' and @next_idx=$x/@idx])) then $x else ()"/>
                  <xsl:variable name="thumbnailStorage" select="if ($firstChildElement) then $asset/storage_item[@key='thumbnail' and @element_idx=$firstChildElement/@idx][1] else ()"/>
                  <xsl:choose>
                    <xsl:when test="$thumbnailStorage">
                      <xsl:copy-of select="$thumbnailStorage[1]"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:copy-of select="()"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:function>

        <!-- Get text-preview storageItem of given asset and given masterStorageItem -->
        <xsl:function name="my:getTextPreviewStorageItem">
          <xsl:param name="asset" as="element(asset)"/>
          <xsl:param name="masterStorageItem" as="element(storage_item)"/>
          <xsl:copy-of select="$asset/storage_item[@key='text-preview' and @element_idx=$masterStorageItem/@element_idx][1]"/>
        </xsl:function>

        <!-- Get child features -->
        <xsl:function name="my:getChildFeatures">
          <xsl:param name="featureElement" as="element(feature)"/>
          <xsl:variable name="childFeatureElements" select="$featureElement/feature"/>
          <xsl:if test="$childFeatureElements">
            <xsl:for-each select="$childFeatureElements">
              <table cellpadding="0">
                <tr>
                  <xsl:choose>
                    <xsl:when test="@modification='added'">
                      <td width="20"><xsl:copy-of select="my:getIconImage('add')"/></td>
                      <td class="asset-info-value">
                        <span class="asset-info-label-inline"><xsl:value-of select="@name"/>: </span>
                        <xsl:value-of select="if (@current-value!='') then @current-value else @name"/>
                        <xsl:copy-of select="my:getChildFeatures(.)"/>
                      </td>
                    </xsl:when>
                    <xsl:when test="@modification='removed'">
                      <td width="20"><xsl:copy-of select="my:getIconImage('delete')"/></td>
                      <td class="asset-info-value">
                        <span class="asset-info-label-inline"><xsl:value-of select="@name"/>: </span>
                        <xsl:value-of select="if (@previous-value!='') then @previous-value else @name"/>
                        <xsl:copy-of select="my:getChildFeatures(.)"/>
                      </td>
                    </xsl:when>
                    <xsl:when test="@modification='modified'">
                      <td width="20"><xsl:copy-of select="my:getIconImage('edit')"/></td>
                      <td class="asset-info-value">
                        <span class="asset-info-label-inline"><xsl:value-of select="@name"/>: </span>
                        <span style="text-decoration:line-through"><xsl:value-of select="if (@previous-value!='') then @previous-value else @name"/></span>
                        <xsl:text> </xsl:text>
                        <xsl:value-of select="@current-value"/>
                        <xsl:copy-of select="my:getChildFeatures(.)"/>
                      </td>
                  </xsl:when>
                  <xsl:when test="@modification='equals'">
                      <td width="20">•</td>
                      <td class="asset-info-value">
                        <span class="asset-info-label-inline"><xsl:value-of select="@name"/>: </span>
                        <xsl:value-of select="if (@current-value!='') then @current-value else @name"/>
                        <xsl:copy-of select="my:getChildFeatures(.)"/>
                      </td>
                    </xsl:when>
                  </xsl:choose>
                </tr>
              </table>
            </xsl:for-each>
          </xsl:if>
        </xsl:function>

        <!-- Creates preview of party of given $by and text of given $modifiedUserID and $modifiedDate -->
        <xsl:function name="my:getChangedInfo">
          <xsl:param name="modifiedDate"/>
          <xsl:param name="modifiedUserID"/>
          <xsl:variable name="maxPreviewSize" select="32"/>
          <xsl:variable name="byAssetID" select="cs:cachelookup('party', '@id', $modifiedUserID)/@party_asset_id"/>
          <xsl:variable name="byAsset" select="cs:get-asset($byAssetID, 0, 0)"/>
          <xsl:variable name="thumbnailStorage" select="$byAsset/storage_item[@key='thumbnail'][1]"/>
          <xsl:choose>
            <xsl:when test="$thumbnailStorage">
              <table cellpadding="0">
                <tr>
                  <td class="asset-info-label">
                    <img hspace="1" vspace="2">
                      <xsl:attribute name="src" select="concat($urlPrefix, 'assets/asset/id/', $thumbnailStorage/@asset_id, '/element/actual/', $thumbnailStorage/@element_idx, '/storage/', $thumbnailStorage/@key, '/file/', tokenize($thumbnailStorage/@relpath,'/')[last()])"/>
                      <xsl:variable name="imageFactor" select="if ($thumbnailStorage/@width_px > $thumbnailStorage/@height_px) then ($maxPreviewSize div $thumbnailStorage/@width_px) else ($maxPreviewSize div $thumbnailStorage/@height_px)"/>
                      <xsl:attribute name="width" select="round($thumbnailStorage/@width_px * $imageFactor)"/>
                      <xsl:attribute name="height" select="round($thumbnailStorage/@height_px * $imageFactor)"/>
                      <xsl:attribute name="title" select="cs:cachelookup('party', '@id', $modifiedUserID)/@display_name"/>
                    </img>
                  </td>
                  <td class="asset-info-value">
                    <xsl:value-of select="if ($modifiedDate) then cs:format-date($modifiedDate, 'relative-short', 'short') else '${multiple-values}'"/>
                    <span class="asset-info-label-inline"> ${by} </span>
                    <xsl:value-of select="if ($modifiedUserID) then (if ($modifiedUserID=$loggedInUserID) then '${myself}' else cs:cachelookup('party', '@id', $modifiedUserID)/@display_name) else '${multiple-values}'"/>
                  </td>
                </tr>
              </table>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="if ($modifiedDate) then cs:format-date($modifiedDate, 'relative-short', 'short') else '${multiple-values}'"/>
              <span class="asset-info-label-inline"> ${by} </span>
              <xsl:value-of select="if ($modifiedUserID) then (if ($modifiedUserID=$loggedInUserID) then '${myself}' else cs:cachelookup('party', '@id', $modifiedUserID)/@display_name) else '${multiple-values}'"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:function>

        <!-- Get localized name of given feature element -->
        <xsl:function name="my:getFeatureName" as="xs:string">
          <xsl:param name="featureElement" as="element(asset_feature)"/>
          <xsl:variable name="featureDefinition" select ="cs:master-data('feature')[@key=$featureElement/@feature]"/>
          <xsl:value-of select="if ($featureDefinition/@label) then $featureDefinition/@label else $featureDefinition/@name"/>
        </xsl:function>

        <!-- Get localized value of given feature element -->
        <xsl:function name="my:getFeatureAttribute" as="xs:string">
          <xsl:param name="asset" as="element(asset)"/>
          <xsl:param name="attributeMapping" as="xs:string"/>
          <xsl:variable name="name" select="tokenize($attributeMapping, '@')[last()]"/>
          <xsl:variable name="value" select="$asset/attribute()[node-name(.)=$name]"/>
          <xsl:choose>
            <xsl:when test="$name='domain'">
              <xsl:value-of select="my:getLocalizedValueHierarchical($value, 'domain', '@pathid', '/', false())"/>
            </xsl:when>
            <xsl:when test="$name='domain2'">
              <xsl:value-of select="my:getLocalizedValueHierarchical($value, 'domain2', '@pathid', '/', false())"/>
            </xsl:when>
            <xsl:when test="$name='type'">
              <xsl:value-of select="my:getLocalizedValueHierarchical($value, 'asset_typedef', '@asset_type', '/', false())"/>
            </xsl:when>
            <xsl:when test="$name='language'">
              <xsl:value-of select="cs:cachelookup('language_def', '@id', $value)/@name"/>
            </xsl:when>
            <xsl:when test="$name='wf_id'">
              <xsl:value-of select="cs:cachelookup('workflow', '@id', $value)/@description"/>
            </xsl:when>
            <xsl:when test="$name='wf_step'">
              <xsl:variable name="wfID" select="$asset/@wf_id"/>
              <xsl:value-of select="cs:cachelookup('workflow_step', '@wf_id', $wfID, '@wf_step', $value)/@name"/>
            </xsl:when>
            <xsl:when test="$name='wf_target'">
              <xsl:value-of select="cs:cachelookup('party', '@id', $value)/@display_name"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="$value"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:function>

        <!-- Get localized value of given feature element -->
        <xsl:function name="my:getFeatureValue">
          <xsl:param name="featureElement" as="element(asset_feature)"/>
          <xsl:variable name="feature" select="cs:cachelookup('feature', '@key', $featureElement/@feature)"/>
          <xsl:variable name="type" select="$feature/@value_type"/>
          <xsl:choose>
            <!-- 0: No value -->
            <xsl:when test="$type='0'">
              <xsl:value-of select="''"/>
            </xsl:when>
            <!-- 1: Hierarchical attribute (string) -->
            <xsl:when test="$type='1'">
              <xsl:value-of select="cs:cachelookup('feature_value', '@feature', $featureElement/@feature, '@value_key', $featureElement/@value_key)/@name"/>
            </xsl:when>
            <!-- 2: Enumeration (string) -->
            <xsl:when test="$type='2'">
              <xsl:value-of select="cs:cachelookup('feature_value', '@feature', $featureElement/@feature, '@value_key', $featureElement/@value_key)/@name"/>
            </xsl:when>
            <!-- 3: Integer (long) -->
            <xsl:when test="$type='3'">
              <xsl:choose>
                <xsl:when test="$feature/@value_list_resource_key">
                  <xsl:value-of select="doc(concat('censhare:///service/assets/asset/id/', $featureElement/@asset_id, '/transform;key=censhare:value-list.product-feature;value=', $featureElement/@value_long))/options/option/@display_value"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="string-join((cs:format-number($featureElement/@value_long, '#,###'), my:getFeatureUnitString($featureElement)), ' ')"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <!-- 4: String -->
            <xsl:when test="$type='4'">
              <xsl:choose>
                <!-- censhare URL -->
                <xsl:when test="$featureElement/@feature='censhare:url'">
                  <a class="asset-info-link" target="_blank">
                    <xsl:attribute name="href" select="$featureElement/@value_string"/>
                    <xsl:value-of select="$featureElement/@value_string"/>
                  </a>
                </xsl:when>
                <!-- String -->
                <xsl:otherwise>
                  <xsl:choose>
                    <xsl:when test="$feature/@value_list_resource_key">
                      <xsl:value-of select="doc(concat('censhare:///service/assets/asset/id/', $featureElement/@asset_id, '/transform;key=censhare:value-list.product-feature;value=', $featureElement/@value_string))/options/option/@display_value"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="$featureElement/@value_string"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <!-- 5: Timestamp -->
            <xsl:when test="$type='5'">
              <xsl:value-of select="cs:format-date($featureElement/@value_timestamp, 'relative-short', 'short')"/>
            </xsl:when>
            <!-- 6: Boolean -->
            <xsl:when test="$type='6'">
              <xsl:value-of select="if ($featureElement/@value_long='1') then '${yes}' else '${no}'"/>
            </xsl:when>
            <!-- 7: Double -->
            <xsl:when test="$type='7'">
              <xsl:value-of select="string-join((cs:format-number($featureElement/@value_double, '#,###.###'), my:getFeatureUnitString($featureElement)), ' ')"/>
            </xsl:when>
            <!-- 8: Integer pair -->
            <xsl:when test="$type='8'">
              <xsl:value-of select="string-join((concat(cs:format-number($featureElement/@value_long, '#,###'), '-', cs:format-number($featureElement/@value_long2, '#,###')), my:getFeatureUnitString($featureElement)), ' ')"/>
            </xsl:when>
            <!-- 9: Timestamp pair -->
            <xsl:when test="$type='9'">
              <xsl:value-of select="concat(cs:format-date($featureElement/@value_timestamp, 'relative-short', 'short'), '-', cs:format-date($featureElement/@value_timestamp2, 'relative-short', 'short'))"/>
            </xsl:when>
            <!-- 10: Asset reference -->
            <xsl:when test="$type='10'">
              <xsl:choose>
                <xsl:when test="$feature/@value_list_resource_key">
                  <xsl:value-of select="doc(concat('censhare:///service/assets/asset/id/', $featureElement/@asset_id, '/transform;key=', $feature/@value_list_resource_key, ';value=', $featureElement/@value_asset_id))/options/option/@display_value"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="refAsset" select="cs:get-asset($featureElement/@value_asset_id)"/>
                  <xsl:choose>
                    <xsl:when test="exists($refAsset)">
                      <xsl:value-of select="if ($refAsset/asset_feature[@feature='censhare:name' and @language=$uiLocale]) then $refAsset/asset_feature[@feature='censhare:name' and @language=$uiLocale]/@value_string else $refAsset/@name"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="concat('ID: ', $featureElement/@value_asset_id)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <!-- 11: XML -->
            <xsl:when test="$type='11'">
              <xsl:value-of select="''"/>
            </xsl:when>
            <!-- 12: Double pair -->
            <xsl:when test="$type='12'">
              <xsl:value-of select="string-join((concat(cs:format-number($featureElement/@value_double, '#,###.###'), '-', cs:format-number($featureElement/@value_double2, '#,###.###')), my:getFeatureUnitString($featureElement)), ' ')"/>
            </xsl:when>
            <!-- 13: Date -->
            <xsl:when test="$type='13'">
              <xsl:value-of select="cs:format-date($featureElement/@value_timestamp, 'relative-short', 'none')"/>
            </xsl:when>
            <!-- 14: Date pair -->
            <xsl:when test="$type='14'">
              <xsl:value-of select="concat(cs:format-date($featureElement/@value_timestamp, 'relative-short', 'none'), '-', cs:format-date($featureElement/@value_timestamp2, 'relative-short', 'none'))"/>
            </xsl:when>
            <!-- 15: Time -->
            <xsl:when test="$type='15'">
              <xsl:value-of select="cs:format-date($featureElement/@value_timestamp, 'none', 'short')"/>
            </xsl:when>
            <!-- 16: Time pair -->
            <xsl:when test="$type='16'">
              <xsl:value-of select="concat(cs:format-date($featureElement/@value_timestamp, 'none', 'short'), '-', cs:format-date($featureElement/@value_timestamp2, 'none', 'short'))"/>
            </xsl:when>
            <!-- 17: Year -->
            <xsl:when test="$type='17'">
              <xsl:value-of select="year-from-dateTime($featureElement/@value_timestamp)"/>
            </xsl:when>
            <!-- 18: Year pair -->
            <xsl:when test="$type='18'">
              <xsl:value-of select="concat(year-from-dateTime($featureElement/@value_timestamp), '-', year-from-dateTime($featureElement/@value_timestamp2))"/>
            </xsl:when>
            <!-- 19: Year/month -->
            <xsl:when test="$type='19'">
              <xsl:value-of select="concat(my:getMonthName(month-from-dateTime($featureElement/@value_timestamp)), ' ', year-from-dateTime($featureElement/@value_timestamp))"/>
            </xsl:when>
            <!-- 20: Year/month pair -->
            <xsl:when test="$type='20'">
              <xsl:value-of select="concat(my:getMonthName(month-from-dateTime($featureElement/@value_timestamp)), ' ', year-from-dateTime($featureElement/@value_timestamp), '-', my:getMonthName(month-from-dateTime($featureElement/@value_timestamp2)), ' ', year-from-dateTime($featureElement/@value_timestamp2))"/>
            </xsl:when>
            <!-- 21: Month -->
            <xsl:when test="$type='21'">
              <xsl:value-of select="my:getMonthName(month-from-dateTime($featureElement/@value_timestamp))"/>
            </xsl:when>
            <!-- 22: Month pair -->
            <xsl:when test="$type='22'">
              <xsl:value-of select="concat(my:getMonthName(month-from-dateTime($featureElement/@value_timestamp)), '-', my:getMonthName(month-from-dateTime($featureElement/@value_timestamp2)))"/>
            </xsl:when>
            <!-- 23: Month/day -->
            <xsl:when test="$type='23'">
              <xsl:value-of select="concat(day-from-dateTime($featureElement/@value_timestamp), '. ', my:getMonthName(month-from-dateTime($featureElement/@value_timestamp)))"/>
            </xsl:when>
            <!-- 24: Month/day pair -->
            <xsl:when test="$type='24'">
              <xsl:value-of select="concat(day-from-dateTime($featureElement/@value_timestamp), '. ', my:getMonthName(month-from-dateTime($featureElement/@value_timestamp)), '-', day-from-dateTime($featureElement/@value_timestamp2), '. ', my:getMonthName(month-from-dateTime($featureElement/@value_timestamp2)))"/>
            </xsl:when>
            <!-- 25: Day -->
            <xsl:when test="$type='25'">
              <xsl:value-of select="concat(day-from-dateTime($featureElement/@value_timestamp), '.')"/>
            </xsl:when>
            <!-- 26: Day pair -->
            <xsl:when test="$type='26'">
              <xsl:value-of select="concat(day-from-dateTime($featureElement/@value_timestamp), '.-', day-from-dateTime($featureElement/@value_timestamp2), '.')"/>
            </xsl:when>
            <!-- 27: Duration -->
            <!-- 28: Asset Key -->
            <!-- 29: Asset key ref -->
            <xsl:when test="$type='29'">
              <xsl:choose>
                <xsl:when test="$feature/@value_list_resource_key">
                  <xsl:value-of select="doc(concat('censhare:///service/assets/asset/id/', $featureElement/@asset_id, '/transform;key=', $feature/@value_list_resource_key, ';value=', $featureElement/@value_asset_key_ref))/options/option/@display_value"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="refAsset" select="cs:asset()[@censhare:resource-key=$featureElement/@value_asset_key_ref]"/>
                  <xsl:choose>
                    <xsl:when test="exists($refAsset)">
                      <xsl:value-of select="if ($refAsset/asset_feature[@feature='censhare:name' and @language=$uiLocale]) then $refAsset/asset_feature[@feature='censhare:name' and @language=$uiLocale]/@value_string else $refAsset/@name"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="concat('Resource key: ', $featureElement/@value_asset_key_ref)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="'${none}'"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:function>

        <!-- Get localized value of given feature element -->
        <xsl:function name="my:getFeatureUnitString" as="xs:string">
          <xsl:param name="featureElement" as="element(asset_feature)"/>
          <xsl:value-of select="if ($featureElement/@value_unit) then cs:cachelookup('unit_set_rel', '@code', $featureElement/@value_unit)/@symbol else ()"/>
        </xsl:function>

        <!-- Get localized name of given month (integer) -->
        <xsl:function name="my:getMonthName" as="xs:string">
          <xsl:param name="month" as="xs:integer"/>
          <xsl:choose>
            <xsl:when test="$month=1">${january}</xsl:when>
            <xsl:when test="$month=2">${february}</xsl:when>
            <xsl:when test="$month=3">${march}</xsl:when>
            <xsl:when test="$month=4">${april}</xsl:when>
            <xsl:when test="$month=5">${may}</xsl:when>
            <xsl:when test="$month=6">${june}</xsl:when>
            <xsl:when test="$month=7">${july}</xsl:when>
            <xsl:when test="$month=8">${august}</xsl:when>
            <xsl:when test="$month=9">${september}</xsl:when>
            <xsl:when test="$month=10">${october}</xsl:when>
            <xsl:when test="$month=11">${november}</xsl:when>
            <xsl:when test="$month=12">${december}</xsl:when>
          </xsl:choose>
        </xsl:function>

        <!-- Get localized name of a given dot separated value -->
        <xsl:function name="my:getLocalizedValueHierarchical" as="xs:string">
          <xsl:param name="value" as="xs:string"/>
          <xsl:param name="cachedTableName" as="xs:string"/>
          <xsl:param name="cachedTableAttribute" as="xs:string"/>
          <xsl:param name="delimiter" as="xs:string"/>
          <xsl:param name="hideRoot" as="xs:boolean"/>
          <xsl:variable name="items" select="tokenize($value, '\.')"/>
          <xsl:variable name="startItem" select="if ($hideRoot) then 2 else 1"/>
          <xsl:value-of select="string-join(for $x in ($startItem to xs:long(count($items))) return cs:cachelookup($cachedTableName, $cachedTableAttribute, concat(string-join(subsequence($items, 1, $x), '.'), '.'))/@name, $delimiter)"/>
        </xsl:function>

      </xsl:stylesheet>
    </expression>

    <!-- Expression used to construct tooltips for the assetref XMLEditor widget -->
    <expression id="assetref-tooltip">
      <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0">
        <xsl:param name="system"/>
        <xsl:variable name="partyID" select="$system/system/party/@id"/>
        <xsl:template match="/">
          <html>
            <table cellpadding="1" valign="top" class="asset-info-table">
              <tr>
                <!-- Asset name -->
                <td>
                  <b><xsl:value-of select="asset[1]/@name"/></b>
                </td>
              </tr>
                <tr>
                <td>
                  <table cellpadding="0">
                    <!-- Asset type -->
                    <tr >
                      <td color="#707070" align="right" nowrap="nowrap">${type}:&#160;</td>
                      <td><xsl:value-of select="cs:cachelookup('asset_typedef', '@asset_type', asset/@type)/@name"/></td>
                    </tr>
                    <!-- Language -->
                    <xsl:if test="asset/@language">
                      <tr>
                        <td color="#707070" align="right" nowrap="nowrap">${language}:&#160;</td>
                        <td><xsl:value-of select="cs:cachelookup('language_def', '@id', asset/@language)/@name"/></td>
                      </tr>
                    </xsl:if>
                    <!-- Author -->
                    <xsl:if test="asset/@author">
                      <tr>
                        <td color="#707070" align="right" nowrap="nowrap">${author}:&#160;</td>
                        <td><xsl:value-of select="asset/@author"/></td>
                      </tr>
                    </xsl:if>
                    <!-- Workflow -->
                    <xsl:if test="asset/@wf_id">
                      <tr>
                        <td color="#707070" align="right" nowrap="nowrap">${workflow}:&#160;</td>
                        <td>
                          <xsl:value-of select="cs:cachelookup('workflow', '@id', asset/@wf_id)/@name"/>
                          <xsl:if test="asset/@wf_step">
                            <span color="#707070" align="right" nowrap="nowrap"> ${step}:&#160; </span>
                            <xsl:value-of select="cs:cachelookup('workflow_step', '@wf_id', asset/@wf_id, '@wf_step', asset/@wf_step)/@name"/>
                          </xsl:if>
                          <xsl:if test="asset/@wf_target">
                          <!-- Show Workflow target -->
                            <span color="#707070" align="right" nowrap="nowrap"> ${assigned-to}:&#160; </span>
                            <xsl:variable name="wf_target" select="asset/@wf_target" />
                            <xsl:variable name="display_name" select="cs:master-data('party')[@id=$wf_target]/@display_name" />
                            <xsl:choose>
                                <xsl:when test="not($display_name)">
                                    <xsl:value-of select="concat('User ID ', asset/@wf_target)" />
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="$display_name" />
                                </xsl:otherwise>
                            </xsl:choose>
                          </xsl:if>
                        </td>
                      </tr>
                    </xsl:if>
                    <!-- Created -->
                    <xsl:variable name="createdBy" select="asset/@created_by"/>
                    <xsl:variable name="modifiedBy" select="asset/@modified_by"/>
                    <xsl:variable name="date" select="asset/@creation_date"/>
                    <xsl:if test="$date or $createdBy">
                      <tr>
                        <td color="#707070" align="right" nowrap="nowrap">${created}:&#160;</td>
                        <td>
                          <xsl:value-of select="if ($date) then cs:format-date($date, 'relative-short', 'short') else '${multiple-values}'"/>
                          <span color="#707070" nowrap="nowrap"> ${by} </span>
                          <!-- Show created by -->
                            <xsl:variable name="display_name" select="cs:master-data('party')[@id=$createdBy]/@display_name" />
                            <xsl:if test="not($display_name)">
                                <xsl:variable name="display_name"  select="concat('User ID ', $createdBy)" />
                            </xsl:if>
                            <xsl:value-of select="if ($createdBy) then (if ($createdBy=$partyID) then '${myself}' else $display_name) else '${multiple-values}'"/>
                        </td>
                      </tr>
                    </xsl:if>
                    <!-- Modified -->
                    <xsl:variable name="date" select="asset/@modified_date"/>
                    <xsl:if test="$date or $modifiedBy">
                      <tr>
                        <td color="#707070" align="right" nowrap="nowrap">${modified}:&#160;</td>
                        <td>
                          <xsl:value-of select="if ($date) then cs:format-date($date, 'relative-short', 'short') else '${multiple-values}'"/>
                          <span color="#707070" nowrap="nowrap"> ${by} </span>
                          <!-- Modified by -->
                          <xsl:variable name="display_name" select="cs:master-data('party')[@id=$modifiedBy]/@display_name" />
                          <xsl:if test="not($display_name)">
                            <xsl:variable name="display_name"  select="concat('User ID ', $modifiedBy)" />
                          </xsl:if>
                          <xsl:value-of select="if ($modifiedBy) then (if ($modifiedBy=$partyID) then '${myself}' else $display_name) else '${multiple-values}'"/>
                        </td>
                      </tr>
                    </xsl:if>
                    <!-- Info -->
                    <tr>
                      <td color="#707070" align="right" nowrap="nowrap">${info}:&#160;</td>
                      <td color="#707070">
                        <xsl:value-of select="concat('${application}: ', cs:cachelookup('asset_application', '@id', asset/@application)/@name)"/>
                        <xsl:value-of select="concat(', ${id}: ', asset/@id, ', ${version}: ', asset/@version)"/>
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>
            </table>
          </html>
        </xsl:template>
      </xsl:stylesheet>
    </expression>

    <!-- Description for module-admin-info -->
    <expression id="module-admin-info">

      <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0">
        <xsl:param name="system"/>
        <xsl:param name="localized_content"/>
        <xsl:variable name="maxPreviewSize" select="32"/>
        <xsl:variable name="assetCount" select="count(asset)"/>
        <xsl:variable name="partyID" select="$system/system/party/@id"/>
        <xsl:variable name="urlPrefix" select="$system/system/@censhare-url-prefix"/>
        <xsl:variable name="lafBackground" select="$system/system/laf/@background"/>
        <xsl:variable name="lafIconset" select="$system/system/laf/@icon-set"/>

        <xsl:template match="/">
          <html>
            <table cellpadding="1" valign="top" class="asset-info-table">
              <tr>
                <!-- Asset name -->
                <td>
                  <b><xsl:value-of select="$localized_content/cmd/xml-info/@title"/></b>
                </td>
              </tr>
              <tr>
                <td>
                  <table cellpadding="0">
                    <!-- file-path -->
                    <tr>
                      <td class="asset-info-label" >${file-path}:</td>
                      <td class="asset-info-value">
                        <xsl:choose>
                          <xsl:when test="not(/cmd/xml-info/@template-url) or /cmd/xml-info/@template-url=''">
                            ${not-available}
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="/cmd/xml-info/@template-url"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </td>
                    </tr>
                    <!-- command-name -->
                    <tr>
                      <td class="asset-info-label" >${command-name}:</td>
                      <td class="asset-info-value">
                        <xsl:choose>
                          <xsl:when test="not(/cmd/cmd-info/@name) or /cmd//cmd/cmd-info/@name=''">
                            ${not-available}
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="/cmd/cmd-info/@name"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </td>
                    </tr>
                    <!-- knowledge level -->
                    <tr >
                      <td class="asset-info-label" >${knowledge-level}:</td>
                      <td class="asset-info-value">
                        <xsl:choose>
                          <xsl:when test="/cmd/xml-info/@knowledge-level = '1'">
                            ${censhare-user}
                          </xsl:when>
                          <xsl:when test="/cmd/xml-info/@knowledge-level = '2'">
                            ${censhare-administrator}
                          </xsl:when>
                          <xsl:when test="/cmd/xml-info/@knowledge-level = '3'">
                            ${censhare-application-engineer}
                          </xsl:when>
                          <xsl:when test="/cmd/xml-info/@knowledge-level = '4'">
                            ${censhare-software-developer}
                          </xsl:when>
                          <xsl:otherwise>
                            ${not-rated-yet}: <xsl:value-of select="/cmd/xml-info/@knowledge-level"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </td>
                    </tr>
                    <!-- feature-help-link -->
            <!--      mvs: feature help link is deactivated until documentation is ready.
                      <tr>
                        <td class="asset-info-label" >${online-help}:</td>
                        <td>
                          <xsl:choose>
                            <xsl:when test="not(/cmd/xml-info/@feature-help) or /cmd/xml-info/@feature-help=''">
                              <a class="admin-help-link" href="http://feature-overview.censhare.com:8000/{/cmd/cmd-info/@name}">${help}</a>
                            </xsl:when>
                            <xsl:otherwise>
                              <a class="admin-help-link" href="http://feature-overview.censhare.com:8000/{/cmd/xml-info/@feature-help}">${help}</a>
                            </xsl:otherwise>
                          </xsl:choose>
                        </td>
                      </tr>
           -->
                    <!-- special-licence needed -->
                    <tr>
                      <td class="asset-info-label">${special-licence}:</td>
                      <td class="asset-info-value">
                        <xsl:choose>
                          <xsl:when test="not(/cmd/xml-info/@special-licence) or /cmd/xml-info/@special-licence='false'">
                            ${special-license-not-needed}
                          </xsl:when>
                          <xsl:otherwise>
                            ${special-license-needed}
                          </xsl:otherwise>
                        </xsl:choose>
                      </td>
                    </tr>

                  </table>
                </td>
              </tr>
            </table>
          </html>
        </xsl:template>
      </xsl:stylesheet>
    </expression>

    <!-- Description for module-admin-help -->
    <expression id="module-admin-help">
      <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0">
        <xsl:param name="system"/>
        <xsl:param name="localized_content"/>
        <xsl:template match="/">
          <html>
            <table cellpadding="1" valign="top" width="100%">
              <tr>
                <td claas="admin-quick-help-text">
                  <xsl:value-of select="$localized_content/cmd/xml-info/@quick-help"/>
                </td>
              </tr>
          </table>
          </html>
        </xsl:template>
      </xsl:stylesheet>
    </expression>

    <!-- Description for module-admin-change-history -->
    <expression id="module-admin-change-history">
      <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0">
        <xsl:param name="system"/>
        <xsl:template match="/">
          <html>
            <table cellpadding="1" valign="top" border="0" width="100%">
              <tr>
                <td width="180px">
                  ${user}
                </td>
                <td width="100px">
                  ${timestamp}
                </td>
                <td>
                  ${comment}
                </td>
              </tr>
              <xsl:for-each select="/cmd/xml-info/history/entry">
              <tr>
                <td>
                  <b><xsl:value-of select="@user"/></b>
                </td>
                <td>
                  <b><xsl:value-of select="cs:format-date(@timestamp, 'relative-short', 'short')"/></b>
                </td>
                <td>
                  <xsl:value-of select="@comment"/>
                </td>
              </tr>
              </xsl:for-each>
            </table>
          </html>
        </xsl:template>
      </xsl:stylesheet>
    </expression>

    <!-- Description for module-admin-change-history -->
    <expression id="parameter-test">
      <xsl:stylesheet version="2.0"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:my="http://www.censhare.com/my">

        <xsl:param name="system"/>
        <xsl:param name="transform"/>
        <xsl:param name="control"/>
        <xsl:variable name="format" select="if ($transform) then $transform/@format else ()"/>

        <xsl:template match="/">
          <html>
            <!-- source -->
            <h3>Content of source</h3>
            <pre>
              <xsl:copy-of select="my:toString(.)"/>
            </pre>
            <!-- $system -->
            <xsl:if test="$system">
              <h3>Content of "system" variable</h3>
              <pre>
                <xsl:copy-of select="my:toString($system)"/>
              </pre>
            </xsl:if>
            <!-- $transform -->
            <xsl:if test="$transform">
              <h3>Content of "transform" variable</h3>
              <pre>
                <xsl:copy-of select="my:toString($transform)"/>
              </pre>
            </xsl:if>
            <!-- $control -->
            <xsl:if test="$control">
              <h3>Content of "control" variable</h3>
              <pre>
                <xsl:copy-of select="my:toString($control)"/>
              </pre>
            </xsl:if>
          </html>
        </xsl:template>

        <xsl:function name="my:toString">
          <xsl:param name="element"/>
          <xsl:value-of select="my:toString($element, 0)"/>
        </xsl:function>

        <xsl:function name="my:toString">
          <xsl:param name="element"/>
          <xsl:param name="indent" as="xs:integer"/>
          <xsl:choose>
            <xsl:when test="node-name($element)='#document' or node-name($element)='#document-fragment'">
              <xsl:for-each select="$element/element()">
                <xsl:copy-of select="my:toString(., 0)"/>
                <xsl:value-of select="if (position() != last()) then '&#10;&#10;' else ()"/>
              </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="concat(string-join(for $x in (1 to $indent) return '  ', ''), '&#60;', node-name($element))"/>
              <xsl:for-each select="$element/attribute()">
                <xsl:value-of select="concat(' ', node-name(.), '=&#34;', ., '&#34;')"/>
              </xsl:for-each>
              <xsl:choose>
                <xsl:when test="$element/element()">
                  <xsl:value-of select="'>&#10;'"/>
                  <xsl:for-each select="$element/element()">
                    <xsl:copy-of select="my:toString(., $indent+1)"/>
                  </xsl:for-each>
                  <xsl:value-of select="concat(string-join(for $x in (1 to $indent) return '  ', ''), '&#60;/', node-name($element), '>&#10;')"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="'/>&#10;'"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:function>

      </xsl:stylesheet>
    </expression>

  </expressions>

  <!-- Dialog change password -->
  <xe:part id="dialog-change-password" transactional="false">
    <xe:group align="down">
      <xe:password label="${old-password}" label-style="label-default" label-width="10em" width="15em" source="@old-password"/>
      <xe:password label="${new-password}" label-style="label-default" label-width="10em" width="15em" source="@new-password"/>
      <xe:password label="${repeat}" label-style="label-default" label-width="10em" width="15em" source="@new-password2"/>
    </xe:group>
  </xe:part>

  <!-- Dialog setup server -->
  <xe:part id="dialog-setup-hosts" transactional="false">
    <xe:foreach new-caption="${new-server}" source="hosts.host" align="down">
      <xe:group align="down">
        <xe:label style="label-title" value="='${server} ${quote-start}' + @name + '${quote-end}'" weight-x="1"/>
        <xe:group style="group-indent-left-right" align="down">
          <xe:deletebutton label="${delete}" label-style="label-default"/>
          <xe:groupbox caption="${general}" align="down" align-y="top">
            <xe:editfield label="${name}" label-style="label-default" width="120" source="@name" tooltip="${host-name-tooltip}">
              <xe:validate not-empty="true"/>
            </xe:editfield>
            <xe:editfield label="${database}" label-style="label-default" width="120" source="@databasename" tooltip="${host-database-tooltip}"/>
            <xe:editfield label="${url}" label-style="label-default" weight-x="1" source="@url" tooltip="${host-url-tooltip}">
              <xe:validate not-empty="true"/>
            </xe:editfield>
            <xe:popupmenu label="${compression}" label-style="label-default" weight-x="1" source="@compressionlevel" defaultvalue="0">
              <xe:options>
                <xe:option label="9 - ${highest-compression}" value="9"/>
                <xe:option label="8" value="8"/>
                <xe:option label="7" value="7"/>
                <xe:option label="6" value="6"/>
                <xe:option label="5" value="5"/>
                <xe:option label="4" value="4"/>
                <xe:option label="3" value="3"/>
                <xe:option label="2" value="2"/>
                <xe:option label="1" value="1"/>
                <xe:option label="0 - ${no-compression}" value="0"/>
              </xe:options>
            </xe:popupmenu>
            <xe:popupmenu label="${authentication}" label-style="label-default" weight-x="1" source="@authentication-method" defaultvalue="">
              <xe:options>
                <xe:option label="${host-authentication-censhare-md5}" value=""/>
                <xe:option label="${host-authentication-censhare}" value="censhare-dh"/>
                <xe:option label="${host-authentication-kerberos}" value="kerberos"/>
                <xe:option label="${host-authentication-kerberos_win_sspi}" value="kerberos_win_sspi"/>
                <xe:option label="${host-authentication-custom}" value="custom"/>
              </xe:options>
            </xe:popupmenu>
            <xe:checkbox label="${ignore-certificate}" label-style="label-default" source="@disable-trust-manager">
              <xe:listen-to source="@url"/>
            </xe:checkbox>
            <xe:checkbox label="${virtual-volume}" caption="${active}" label-style="label-default" source="censhare-vfs@use" checked-value="1" unchecked-value="0" defaultvalue="1"/>
          </xe:groupbox>

          <xe:groupbox caption="${proxy}" align="down" weight-x="1">
            <xe:checkbox label="${active}" label-style="label-default" source="proxy@use" checked-value="1" unchecked-value="0" defaultvalue="0"/>
            <xe:selectcase source="proxy@use" align="down">
              <xe:case value="1">
                <xe:popupmenu label="${type}" label-style="label-default" width="120" source="proxy@type" defaultvalue="http">
                  <xe:options>
                    <xe:option label="HTTP" value="http"/>
                  </xe:options>
                </xe:popupmenu>
                <xe:editfield label="${host}" label-style="label-default" width="120" source="proxy@host"/>
                <xe:editfield label="${port}" label-style="label-default" width="120" source="proxy@port"/>
                <xe:checkbox label="${host-proxy-use-for-http-requests}" label-style="label-default" source="proxy@use-for-http-requests" checked-value="1" unchecked-value="0" defaultvalue="0"/>
                <xe:checkbox label="${authentication}" label-style="label-default" source="proxy@authentication-required" checked-value="1" unchecked-value="0" defaultvalue="0"/>
                <xe:selectcase source="proxy@authentication-required" align="down">
                  <xe:case value="1">
                    <xe:group align="right">
                      <xe:editfield label="${user-name}" label-style="label-default" width="120" source="proxy@username"/>
                      <xe:label value="(${optional})"/>
                    </xe:group>
                    <xe:group align="right">
                      <xe:editfield label="${password}" label-style="label-default" width="120" source="proxy@password"/>
                      <xe:label value="(${optional})"/>
                    </xe:group>
                  </xe:case>
                </xe:selectcase>
              </xe:case>
            </xe:selectcase>
          </xe:groupbox>

          <xe:foreach new-caption="${new-volume}" source="volumes.volume">
            <xe:groupbox caption="${volume}" align="down">
              <xe:deletebutton label="${delete}" label-style="label-default"/>
              <xe:group align="right">
                <xe:editfield label="${file-system}" label-style="label-default" width="120" source="@filesystemname">
                  <xe:validate not-empty="true"/>
                </xe:editfield>
                <xe:checkbox caption="${file-streaming}" source="@filestreaming" defaultvalue="true"/>
              </xe:group>
              <xe:editfield label="${physical-url}" label-style="label-default" weight-x="1" source="@physicalurl">
                <xe:validate not-empty="true"/>
              </xe:editfield>
            </xe:groupbox>
          </xe:foreach>

          <!-- Alternate server -->
          <xe:groupbox caption="${alternate-servers}" weight-x="1">
            <xe:foreach source="backuphosts.backuphost" align="down" new-caption="${new-alternate-server}">
              <xe:group align="right">
                <xe:popupmenu label="${host-name}" label-style="label-default" width="200" source="@name">
                  <xe:options source="$content.hosts.host" label-key="@name" value-key="@name"/>
                  <xe:validate not-empty="true"/>
                </xe:popupmenu>
                <xe:deletebutton/>
              </xe:group>
            </xe:foreach>
          </xe:groupbox>
        </xe:group>
      </xe:group>
    </xe:foreach>
  </xe:part>

  <!-- dialog-setup-logging -->
  <xe:part id="dialog-setup-logging" transactional="false">
    <xe:param force_log_to_file="false"/>
    <xe:inititems>
      <xe:inititem condition="=bool($param@force_log_to_file)" dest="logging3-setup@log-to-file" value="true" overwrite="true"/>
    </xe:inititems>
    <xe:group align="down">
      <xe:groupbox caption="${general}" align="down" weight-x="1">
        <xe:popupmenu label="${client}" source="logging3-setup.main@level" defaultvalue="OFF" label-width="13em">
          <xe:options source="$editordef.log-levels.level-def" label-key="@name" value-key="@value"/>
        </xe:popupmenu>
        <xe:popupmenu label="${server}" source="logging3-setup@serverloglevel" defaultvalue="OFF" label-width="13em">
          <xe:options source="$editordef.log-levels.level-def" label-key="@name" value-key="@value"/>
        </xe:popupmenu>
        <xe:popupmenu label="${logging-vfs}" source="logging3-setup.vfs-log@level" defaultvalue="OFF" label-width="13em">
          <xe:options source="$editordef.log-levels-vfs.level-def" label-key="@name" value-key="@value"/>
        </xe:popupmenu>
        <xe:checkbox label="${logging-trace}" caption="${show}" source="logging3-setup.time-log@level" label-width="13em" defaultvalue="OFF" unchecked-value="OFF" checked-value="FINER"/>
        <xe:checkbox label="${logging-ui-watch}" source="logging3-setup.ui-watch@level" label-width="13em" defaultvalue="OFF" unchecked-value="OFF" checked-value="WARNING"/>
      </xe:groupbox>
      <xe:groupbox caption="${logging-xml-protocols}" weight-x="1">
        <xe:group align="right">
          <xe:group align="down">
            <xe:checkbox caption="${logging-rmi-communication}" source="logging3-setup.rmi@level" defaultvalue="OFF" unchecked-value="OFF" checked-value="FINEST">
              <xe:listen-to source="logging3-setup.server-events-rmi@level">
                <xe:change condition="=$$.logging3\-setup.server\-events\-rmi@level='FINEST'" value="FINEST" dest="logging3-setup.rmi@level"/>
              </xe:listen-to>
              <xe:listen-to source="logging3-setup.metadata-mapper@level">
                <xe:change condition="=$$.logging3\-setup.metadata\-mapper@level='FINEST'" value="FINEST" dest="logging3-setup.rmi@level"/>
              </xe:listen-to>
            </xe:checkbox>
            <xe:checkbox caption="${logging-layout-communication}" source="logging3-setup.layout-communication@level" defaultvalue="DEFAULT" unchecked-value="DEFAULT" checked-value="FINEST"/>
            <xe:checkbox caption="${logging-layout-events}" source="logging3-setup.layout-events@level" defaultvalue="DEFAULT" unchecked-value="DEFAULT" checked-value="FINEST"/>
            <xe:checkbox caption="${logging-document-validator}" source="logging3-setup.document-validator@level" defaultvalue="DEFAULT" unchecked-value="DEFAULT" checked-value="FINEST"/>
            <xe:checkbox caption="${logging-metadata-mapper}" source="logging3-setup.metadata-mapper@level" defaultvalue="OFF" unchecked-value="OFF" checked-value="FINEST">
              <xe:listen-to source="logging3-setup.rmi@level">
                <xe:change condition="=$$.logging3\-setup.rmi@level='OFF'" value="OFF" dest="logging3-setup.metadata-mapper@level"/>
              </xe:listen-to>
            </xe:checkbox>
          </xe:group>
          <xe:strut width="10"/>
          <xe:group align="down">
            <xe:checkbox caption="${logging-server-events}" source="logging3-setup.server-events@level" defaultvalue="DEFAULT" unchecked-value="DEFAULT" checked-value="FINEST"/>
            <xe:checkbox caption="${logging-server-events-rmi}" source="logging3-setup.server-events-rmi@level" defaultvalue="OFF" unchecked-value="OFF" checked-value="FINEST">
              <xe:listen-to source="logging3-setup.rmi@level">
                <xe:change condition="=$$.logging3\-setup.rmi@level='OFF'" value="OFF" dest="logging3-setup.server-events-rmi@level"/>
              </xe:listen-to>
            </xe:checkbox>
            <xe:checkbox caption="${logging-xml-editor}" source="logging3-setup.xml-editor@level" defaultvalue="DEFAULT" unchecked-value="DEFAULT" checked-value="FINEST"/>
            <xe:checkbox caption="${logging-asset-transaction}" source="logging3-setup.asset-transaction@level" defaultvalue="DEFAULT" unchecked-value="DEFAULT" checked-value="FINEST"/>
            <xe:checkbox caption="${logging-cached-tables}" source="logging3-setup.cached-tables@level" defaultvalue="DEFAULT" unchecked-value="DEFAULT" checked-value="FINEST"/>
          </xe:group>
        </xe:group>
      </xe:groupbox>
      <xe:groupbox caption="${output}" weight-x="1">
        <xe:checkbox caption="${window}"  source="logging3-setup@log-to-window"  defaultvalue="true"/>
        <xe:checkbox caption="${file}"    source="logging3-setup@log-to-file"    defaultvalue="=$param@force_log_to_file" readonly="=bool($param@force_log_to_file)"/>
        <xe:checkbox caption="${console}" source="logging3-setup@log-to-console" defaultvalue="false"/>
      </xe:groupbox>
    </xe:group>
  </xe:part>

  <!-- dialog-setup-logging-expert -->
  <xe:part id="dialog-setup-logging-expert" transactional="false">
    <xe:group align="down">
      <xe:groupbox caption="${logging-loggers}">
        <xe:foreach source="logging3.logger">
          <xe:inititems>
            <xe:inititem dest="@name" value="com.censhare."/>
            <xe:inititem dest="@level" value="INFO"/>
          </xe:inititems>
          <xe:group align="right">
            <xe:deletebutton/>
            <xe:popupmenu margin-left="7" source="@level">
              <xe:options source="$editordef.log-levels.level-def" label-key="@name" value-key="@value"/>
            </xe:popupmenu>
            <xe:editfield margin-left="7" weight-x="1" minwidth="400" source="@name"/>
          </xe:group>
        </xe:foreach>
      </xe:groupbox>
      <xe:groupbox caption="${output}" weight-x="1">
        <xe:checkbox caption="${window}"  source="logging3-setup@log-to-window"  defaultvalue="true"/>
        <xe:checkbox caption="${file}"    source="logging3-setup@log-to-file"    defaultvalue="false"/>
        <xe:checkbox caption="${console}" source="logging3-setup@log-to-console" defaultvalue="false"/>
      </xe:groupbox>
    </xe:group>
  </xe:part>

  <!-- Available log levels -->
  <log-levels>
    <level-def name="OFF" value="OFF"/>
    <level-def name="SEVERE" value="SEVERE"/>
    <level-def name="WARNING" value="WARNING"/>
    <level-def name="INFO" value="INFO"/>
    <level-def name="CONFIG" value="CONFIG"/>
    <level-def name="FINE" value="FINE"/>
    <level-def name="FINER" value="FINER"/>
    <level-def name="FINEST (XML)" value="FINEST"/>
    <level-def name="ALL" value="ALL"/>
  </log-levels>

  <!-- Available vfs-log levels -->
<log-levels-vfs>
    <level-def name="OFF" value="OFF"/>
    <level-def name="ERRORS" value="WARNING"/>
    <level-def name="FILES &amp; DIRECTORIES" value="INFO"/>
    <level-def name="FILE SYSTEM" value="CONFIG"/>
    <level-def name="CONTROLLER" value="FINEST"/>
    <level-def name="ALL" value="ALL"/>
  </log-levels-vfs>

  <!-- asset search at assets dialog -->
    <xe:part id="dialog-asset-search-asset" transactional="false">
    <xe:group align="down">
      <xe:include key="dialog-asset-search-asset-setup"/>
      <xe:separator/>
      <xe:include key="dialog-asset-search"/>
    </xe:group>
  </xe:part>

  <!-- asset search setup at assets dialog -->
  <xe:part id="dialog-asset-search-asset-setup" transactional="false">
    <xe:expandgroup caption="${setup}" id="setup" expanded="true" save-state="true" align="down">
      <xe:editfield label="${limit}" label-style="label-default" width="30em" source="@limit"/>
      <xe:editfield label="${start-row}" label-style="label-default" width="30em" source="@start-row"/>
      <xe:group align="right">
        <xe:label label="${sortorder}" label-style="label-default" align-y="top"/>
        <xe:foreach source="sortorders.order" align-y="top">
          <xe:popupmenu width="30em" source="@by">
            <xe:options>
              <xe:option label="${name}" value="@name"/>
              <xe:option label="${priority}" value="@priority"/>
              <xe:option label="${approved}" value="@approved_date"/>
              <xe:option label="${modified-at}" value="@modified_date"/>
            </xe:options>
          </xe:popupmenu>
          <xe:popupmenu source="@ascending" defaultvalue="true">
            <xe:options>
              <xe:option label="${ascend}" value="true"/>
              <xe:option label="${descend}" value="false"/>
            </xe:options>
          </xe:popupmenu>
          <xe:deletebutton/>
        </xe:foreach>
      </xe:group>
    </xe:expandgroup>
  </xe:part>

  <!-- asset search dialog -->
  <xe:part id="dialog-asset-search" transactional="false">
    <!-- get show-alt-results parameter of client preferences -->
    <xe:param show-alt-results="=:string(not($preferences/*/application/@show-alt-results='false'))"/>
    <xe:group align="down">
      <!-- relations -->
      <xe:expandgroup caption="${relations}" id="relations" expanded="true" save-state="true" visible="=:boolean(query/tree-query)" align="down">
        <xe:label label="${relations}" label-style="label-default" value="=:concat(if (query/tree-query/@child='true') then (if (query/tree-query/@recursive='true') then ('${search-in-all-child-relations}') else ('${search-in-direct-child-relations}')) else (if (query/tree-query/@recursive='true') then ('${search-in-all-parent-relations}') else ('${search-in-direct-parent-relations}')), ' (${id}: ${quote-start}', query/tree-query/asset/@id, '${quote-end})')"/>
        <xe:separator/>
      </xe:expandgroup>
      <!-- my work -->
      <xe:expandgroup caption="${my-work}" id="my-work" expanded="true" save-state="true" align="down">
        <xe:group>
          <xe:feature feature-key="censhare:function.my-domain" label="${my}" mode="query" label-style="label-default">
            <xe:checkbox-params caption="${domain}" checked-value="true" unchecked-value="false"/>
          </xe:feature>
          <xe:feature feature-key="censhare:function.my-tasks" mode="query" label="">
            <xe:checkbox-params caption="${tasks}"/>
          </xe:feature>
          <xe:feature feature-key="censhare:function.my-import-folders" mode="query" label="">
            <xe:checkbox-params caption="${import-groups}"/>
          </xe:feature>
        </xe:group>
        <xe:group>
          <xe:feature feature-key="censhare:function.my-created" label="" mode="query" label-style="label-default">
            <xe:checkbox-params caption="${created-assets}"/>
          </xe:feature>
          <xe:feature feature-key="censhare:function.my-modified" mode="query" label="">
            <xe:checkbox-params caption="${modified-assets}"/>
          </xe:feature>
          <xe:feature feature-key="censhare:function.my-checkedout" mode="query" label="">
            <xe:checkbox-params caption="${opened-assets}"/>
          </xe:feature>
        </xe:group>
      </xe:expandgroup>
      <xe:separator/>
      <!-- general -->
      <xe:expandgroup caption="${general}" id="general" expanded="true" save-state="true" align="down">
        <!-- name -->
        <xe:feature feature-key="censhare:text.name" mode="query" label-style="label-default" width="30em" show-counts="false" add-delete-button="true">
          <xe:queryfield-params min-chars="2"/>
        </xe:feature>
        <!-- content -->
        <xe:feature feature-key="censhare:text.content" mode="query" label-style="label-default" width="30em" add-delete-button="true"/>
        <!-- meta data -->
        <xe:feature feature-key="censhare:text.meta" mode="query" label-style="label-default" width="30em" add-delete-button="true"/>
        <!-- type -->
        <xe:selectcase source="$param@show-alt-results">
          <xe:case value="true">
            <xe:feature feature-key="censhare:asset.type" mode="query" label-style="label-default" add-delete-button="true" sort="ascending">
              <xe:popupmenutree-params column-width="200" hide-root-popup="false" add-joker="true" partial-load-tree="false"/>
            </xe:feature>
          </xe:case>
          <xe:case value="false">
            <xe:popupmenutree label="${type}" label-style="label-default" source="condition[name='censhare:asset.type']@value" hide-root-popup="false" sort="ascending">
              <xe:treeoptions label-key="@name" value-key="@asset_type" add-joker="true">
                <xe:generator name="filtered_cachedtables" table-name="asset_typedef"/>
              </xe:treeoptions>
            </xe:popupmenutree>
            <xe:deletebutton align-y="top" source="condition[name='censhare:asset.type']@value"/>
            <xe:checkbox source="condition[name='censhare:asset.type']@altresults" visible="false" defaultvalue="false"/>
          </xe:case>
        </xe:selectcase>
        <!-- domains -->
        <xe:selectcase source="$param@show-alt-results">
          <xe:case value="true">
            <xe:group align="down">
              <xe:feature feature-key="censhare:asset.domain" mode="query" label-style="label-default" add-delete-button="true">
                <xe:sort key="@sorting" data-type="integer"/>
                <xe:sort key="@name${localized-attr-suffix}" data-type="string"/>
                <xe:popupmenutree-params column-width="15em" hide-root-popup="false" add-joker="true"/>
              </xe:feature>
              <xe:feature feature-key="censhare:asset.domain2" mode="query" label-style="label-default" add-delete-button="true" visible="=:count(cs:master-data('domain2')) gt 1">
                <xe:sort key="@sorting" data-type="integer"/>
                <xe:sort key="@name${localized-attr-suffix}" data-type="string"/>
                <xe:popupmenutree-params column-width="15em" hide-root-popup="false" add-joker="true">
                  <xe:treeoptions label-key="@name" value-key="@pathid" add-joker="true">
                    <xe:generator name="filtered_cachedtables" table-name="domain2"/>
                    <xe:sort key="@sorting" data-type="integer"/>
                    <xe:sort key="@name${localized-attr-suffix}" data-type="string"/>
                  </xe:treeoptions>
                </xe:popupmenutree-params>
              </xe:feature>
            </xe:group>
          </xe:case>
          <xe:case value="false">
            <xe:group align="down">
              <xe:group align="right">
                <xe:popupmenutree label="${domain}" label-style="label-default" source="condition[name='censhare:asset.domain']@value" hide-root-popup="true">
                  <xe:treeoptions label-key="@name" value-key="@pathid" add-joker="true">
                    <xe:generator name="filtered_cachedtables" table-name="domain"/>
                    <xe:sort key="@sorting" data-type="integer"/>
                    <xe:sort key="@name${localized-attr-suffix}" data-type="string"/>
                  </xe:treeoptions>
                </xe:popupmenutree>
                <xe:deletebutton source="condition[name='censhare:asset.domain']"/>
                <xe:checkbox source="condition[name='censhare:asset.domain']@altresults" visible="false" defaultvalue="false"/>
              </xe:group>
              <xe:group align="right">
                <xe:popupmenutree label="${domain2}" label-style="label-default" source="condition[name='censhare:asset.domain2']@value" hide-root-popup="true" visible="=:count(cs:master-data('domain2')) gt 1">
                  <xe:treeoptions label-key="@name" value-key="@pathid" add-joker="true">
                    <xe:generator name="filtered_cachedtables" table-name="domain2"/>
                    <xe:sort key="@sorting" data-type="integer"/>
                    <xe:sort key="@name${localized-attr-suffix}" data-type="string"/>
                  </xe:treeoptions>
                </xe:popupmenutree>
                <xe:deletebutton source="condition[name='censhare:asset.domain2']"/>
                <xe:checkbox source="condition[name='censhare:asset.domain2']@altresults" visible="false" defaultvalue="false"/>
              </xe:group>
            </xe:group>
          </xe:case>
        </xe:selectcase>
        <!-- language -->
        <xe:selectcase source="$param@show-alt-results">
          <xe:case value="true">
            <xe:feature feature-key="censhare:asset.language" mode="query" label-style="label-default" width="30em" sort="ascending" add-delete-button="true"/>
          </xe:case>
          <xe:case value="false">
            <xe:group>
              <xe:popupmenu label="${language}" label-style="label-default" width="30em" source="condition[name='censhare:asset.language']@value" sort="ascending">
                <xe:options label-key="@name" value-key="@id">
                  <xe:generator name="filtered_cachedtables" table-name="language_def"/>
                </xe:options>
              </xe:popupmenu>
              <xe:deletebutton source="condition[name='censhare:asset.language']@value"/>
              <xe:checkbox source="condition[name='censhare:asset.language']@altresults" visible="false" defaultvalue="false"/>
            </xe:group>
          </xe:case>
        </xe:selectcase>
      </xe:expandgroup>
      <xe:separator/>
      <!-- workflow -->
      <xe:expandgroup caption="${workflow}" id="workflow" expanded="true" save-state="true" align="down">
        <xe:selectcase source="$param@show-alt-results">
          <xe:case value="true">
            <xe:group align="down">
              <xe:feature feature-key="censhare:asset.wf_id" mode="query" label-style="label-default" width="30em" sort="ascending" add-delete-button="true"/>
              <xe:feature feature-key="censhare:function.workflow-step" label="${step}" label-style="label-default" mode="query" width="30em" add-delete-button="true"
                readonly="=$$.'condition[name=\'censhare:asset.wf_id\']'@value = null">
                <xe:listen-to source="condition[name='censhare:asset.wf_id']@value">
                  <!-- clear step if workflow is changed -->
                  <xe:change dest="condition[name='censhare:function.workflow-step']@value" value="=null" overwrite="true"/>
                </xe:listen-to>
                <xe:sort key="@sorting" data-type="integer"/>
                <xe:option-filters>
                  <xe:filter enabled="=bool(@sql)" source="@wf_id" match-source="$current.condition[name='censhare:asset.wf_id']@value"/>
                </xe:option-filters>
              </xe:feature>
              <xe:feature feature-key="censhare:asset.wf_target" mode="query" label-style="label-default" width="30em" sort="ascending" add-delete-button="true">
                <xe:option-filters>
                  <xe:filter source="@isvisible" match="1"/>
                </xe:option-filters>
              </xe:feature>
            </xe:group>
          </xe:case>
          <xe:case value="false">
            <xe:group align="down">
              <xe:group>
                <xe:popupmenu label="${workflow}" label-style="label-default" source="condition[name='censhare:asset.wf_id']@value" width="30em" sort="ascending">
                  <xe:options label-key="@name" value-key="@id">
                    <xe:generator name="filtered_cachedtables" table-name="workflow"/>
                  </xe:options>
                  <xe:delete dest="condition[name='censhare:function.workflow-step']"/>
                </xe:popupmenu>
                <xe:deletebutton>
                  <xe:delete dest="condition[name='censhare:asset.wf_id']"/>
                  <xe:delete dest="condition[name='censhare:function.workflow-step']"/>
                </xe:deletebutton>
                <xe:checkbox source="condition[name='censhare:asset.wf_id']@altresults" visible="false" defaultvalue="false"/>
              </xe:group>
              <xe:group>
                <xe:popupmenu label="${step}" label-style="label-default" source="condition[name='censhare:function.workflow-step']@value" width="30em" visible="=:condition[name='censhare:asset.wf_id']@value != null">
                  <xe:options label-key="@name" value-key="@wf_step">
                    <xe:generator name="filtered_cachedtables" table-name="workflow_step" source="@wf_id" match-source="condition[name='censhare:asset.wf_id']@value"/>
                    <xe:sort key="@sorting" data-type="integer"/>
                  </xe:options>
                  <xe:listen-to source="condition[name='censhare:asset.wf_id']@value" is-key-part="true"/>
                </xe:popupmenu>
                <xe:deletebutton source="condition[name='censhare:function.workflow-step']@value"/>
                <xe:checkbox source="condition[name='censhare:function.workflow-step']@altresults" visible="false" defaultvalue="false"/>
              </xe:group>
              <xe:group>
                <xe:popupmenu label="${assigned-to}" label-style="label-default" width="30em" source="condition[name='censhare:asset.wf_target']@value" sort="ascending">
                  <xe:options label-key="@display_name" value-key="@id">
                    <xe:generator name="filtered_cachedtables" table-name="party" source="@isvisible" match="1"/>
                  </xe:options>
                </xe:popupmenu>
                <xe:deletebutton source="condition[name='censhare:asset.wf_target']@value"/>
                <xe:button icon="user" tooltip="${use-me-as-workflow-target}">
                  <xe:change dest="condition[name='censhare:asset.wf_target',altresults='false']@value" value="=:$system/system/party/@id"/>
                </xe:button>
                <xe:checkbox source="condition[name='censhare:asset.wf_target']@altresults" visible="false" defaultvalue="false"/>
              </xe:group>
            </xe:group>
          </xe:case>
        </xe:selectcase>
        <!-- deadline -->
        <xe:feature feature-key="censhare:asset.deadline_actual" mode="query" label="${deadline}" label-style="label-default" width="30em" add-delete-button="true"/>
      </xe:expandgroup>
    </xe:group>
  </xe:part>

  <!-- asset search flags -->
  <xe:part id="dialog-asset-search-flags" transactional="false">
    <!-- get show-alt-results parameter of client preferences -->
    <xe:param show-alt-results="=:string(not($preferences/*/application/@show-alt-results='false'))"/>
    <xe:group align="down">
      <!-- Example how to combine a list of feature values using an OR-condition - instead of AND, which is the default -->
      <!--
      <xe:groupbox caption="${production-flags}" font-weight="bold" align="down" weight-x="1" readonly="=$param@readonly">
        <xe:select source="or[key='censhare:asset-flag']" create-node="true">
          <xe:foreach source="condition" align-y="top">
            <xe:row-filters>
              <xe:filter source="@name" match="censhare:asset-flag"/>
            </xe:row-filters>
            <xe:feature feature-key="censhare:asset-flag" mode="query" label-style="label-default" minwidth="20em" sort="ascending" label="${production-flag}"/>
            <xe:deletebutton/>
          </xe:foreach>
        </xe:select>
      </xe:groupbox>
      -->
      <!-- general -->
      <xe:expandgroup caption="${general}" id="general" expanded="true" save-state="true" align="down">
        <!-- keyword tree -->
        <xe:selectcase source="$param@show-alt-results">
          <xe:case value="true">
            <xe:feature feature-key="censhare:keyword" widget-type="treeselector" mode="query" label-style="label-default"
              width="30em" label-align="left-top" query-mode="or" add-delete-button="true">
              <xe:sort key="@sorting" ascending="true"/>
              <xe:treeselector-params rows="1" add-joker="true"/>
            </xe:feature>
          </xe:case>
          <xe:case value="false">
            <!-- missing -->
          </xe:case>
        </xe:selectcase>
        <!-- keywords -->
        <xe:feature feature-key="censhare:asset.keywords" mode="query" label-style="label-default" width="30em" add-delete-button="true"/>
        <!-- categories -->
        <!--
          <xe:feature feature-key="censhare:category" widget-type="treeselector" mode="query" label-style="label-default"
          maxwidth="800" weight-x="1" label-align="left-top">
          <xe:sort key="@sorting" ascending="true"/>
          <xe:treeselector-params rows="1" add-joker="true"/>
          </xe:feature>
        -->
        <!-- application -->
        <xe:selectcase source="$param@show-alt-results">
          <xe:case value="true">
            <xe:feature feature-key="censhare:asset.application" mode="query" label-style="label-default" width="30em" sort="ascending" add-delete-button="true"/>
          </xe:case>
          <xe:case value="false">
            <xe:popupmenu label="${application}" label-style="label-default" width="30em" source="condition[name='censhare:asset.application']@value" sort="ascending">
              <xe:options label-key="@name" value-key="@id">
                <xe:generator name="cachedtables" table-name="asset_application"/>
              </xe:options>
            </xe:popupmenu>
            <xe:deletebutton source="condition[name='censhare:asset.application']@value"/>
            <xe:checkbox source="condition[name='censhare:asset.application']@altresults" visible="false" defaultvalue="false"/>
          </xe:case>
        </xe:selectcase>
         <!-- asset id -->
        <xe:group>
          <xe:editfield label="=:cs:cachelookup('feature', '@key', 'censhare:asset.id')/@name" label-style="label-default" source="$temp@id" width="10em">
              <xe:change condition="=:$temp/temp/@search-mode='id'" dest="condition[name='censhare:asset.id']@value" source="$temp@id" />
              <xe:change condition="=:$temp/temp/@search-mode='child-of-asset-id'" dest="tree-query[child='true',recursive='false'].asset@id" source="$temp@id" />
              <xe:change condition="=:$temp/temp/@search-mode='child-tree-of-asset-id'" dest="tree-query[child='true',recursive='true'].asset@id" source="$temp@id" />
              <xe:change condition="=:$temp/temp/@search-mode='parent-of-asset-id'" dest="tree-query[parent='true',recursive='false'].asset@id" source="$temp@id" />
              <xe:change condition="=:$temp/temp/@search-mode='parent-tree-of-asset-id'" dest="tree-query[parent='true',recursive='true'].asset@id" source="$temp@id" />
      </xe:editfield>
           <xe:popupmenu source="$temp@search-mode" width="20em">
            <xe:options>
              <xe:option label="" value=""/>
              <xe:option label="${search-for-matching-assets}" value="id"/>
              <xe:option label="${child-of-asset-id}" value="child-of-asset-id"/>
              <xe:option label="${child-tree-of-asset-id}" value="child-tree-of-asset-id"/>
              <xe:option label="${parent-of-asset-id}" value="parent-of-asset-id"/>
              <xe:option label="${parent-tree-of-asset-id}" value="parent-tree-of-asset-id"/>
            </xe:options>
              <xe:listen-to source="$temp@id"/>
              <xe:validate condition="=:empty($temp/temp/@id) or (exists($temp/temp/@id) and string-length($temp/temp/@search-mode) gt 0)"/>
              <xe:delete dest="tree-query" condition="=:exists(query/tree-query)"/>
              <xe:delete dest="condition[name='censhare:asset.id']" condition="=:exists(query/condition[@name='censhare:asset.id'])"/>
              <xe:change condition="=:$temp/temp/@search-mode='id'" dest="condition[name='censhare:asset.id']@value" source="$temp@id" />
              <xe:change condition="=:$temp/temp/@search-mode='child-of-asset-id'" dest="tree-query[child='true',recursive='false'].asset@id" source="$temp@id" />
              <xe:change condition="=:$temp/temp/@search-mode='child-tree-of-asset-id'" dest="tree-query[child='true',recursive='true'].asset@id" source="$temp@id" />
              <xe:change condition="=:$temp/temp/@search-mode='parent-of-asset-id'" dest="tree-query[parent='true',recursive='false'].asset@id" source="$temp@id" />
              <xe:change condition="=:$temp/temp/@search-mode='parent-tree-of-asset-id'" dest="tree-query[parent='true',recursive='true'].asset@id" source="$temp@id" />
           </xe:popupmenu>
        </xe:group>
        <!-- admin mode -->
        <xe:selectcase source="$system@is-admin-mode" align="down">
          <xe:case value="true">
            <xe:strut height="20"/>
            <xe:label value="${add-condition}" font-weight="bold"/>
            <xe:foreach source="condition">
              <xe:row-filters>
                <xe:filter source="@test" match="true"/>
              </xe:row-filters>
              <xe:inititems>
                <xe:inititem dest="@test" value="true"/>
                <xe:inititem dest="@altresults" value="true"/>
                <xe:inititem dest="$temp@refidcounter" value="=int($temp@refidcounter, 10000000) + 1" overwrite="true"/>
                <xe:inititem dest="@refid" value="=$temp@refidcounter"/>
              </xe:inititems>
              <xe:editfield label="${feature}" label-style="label-default" width="30em" source="@name"/>
              <xe:strut width="10"/>
              <xe:popupmenu source="@op">
                <xe:options>
                  <xe:option label="" value=""/>
                  <xe:option label="=" value="="/>
                  <xe:option label="&gt;" value="&gt;"/>
                  <xe:option label="&lt;" value="&lt;"/>
                  <xe:option label="&gt;=" value="&gt;="/>
                  <xe:option label="&lt;=" value="&lt;="/>
                  <xe:option label="IN" value="IN"/>
                  <xe:option label="LIKE" value="LIKE"/>
                  <xe:option label="ISNULL" value="ISNULL"/>
                  <xe:option label="NOTNULL" value="NOTNULL"/>
                </xe:options>
              </xe:popupmenu>
              <xe:strut width="10"/>
              <xe:editfield label="${value}:" source="@value" weight-x="1"/>
              <xe:deletebutton/>
            </xe:foreach>
            <xe:strut height="20"/>
            <xe:checkbox label="SQL" source="@sql"/>
            <xe:popupmenu source="@query-mode">
              <xe:options>
                <xe:option label="current" value="current"/>
                <xe:option label="checkedout" value="checkedout"/>
                <xe:option label="history" value="history"/>
              </xe:options>
            </xe:popupmenu>
          </xe:case>
        </xe:selectcase>
      </xe:expandgroup>
      <xe:separator/>
      <!-- workflow -->
      <xe:expandgroup caption="${workflow}" id="workflow" expanded="true" save-state="true" align="down">
        <!-- workflow states -->
        <xe:feature feature-key="censhare:function.workflow-state" mode="query" label-style="label-default" width="30em" sort="ascending" add-delete-button="true"/>
        <xe:feature feature-key="censhare:asset.wf_worst_state_id" mode="query" label-style="label-default" width="30em" sort="ascending" add-delete-button="true"/>
        <!-- deadlines -->
        <xe:feature feature-key="censhare:asset.deadline_calc" mode="query" label-style="label-default" width="30em" add-delete-button="true"/>
        <xe:feature feature-key="censhare:asset.deadline" mode="query" label-style="label-default" width="30em" add-delete-button="true"/>
      </xe:expandgroup>
      <xe:separator/>
      <!-- production flags -->
      <xe:expandgroup caption="${production-flags}" id="production-flags" expanded="true" save-state="true" align="down">
        <xe:select source="condition[name='censhare:asset-flag']" create-node="true"/>
        <xe:foreach source="condition" align-y="top">
          <xe:row-filters>
            <xe:filter source="@name" match="censhare:asset-flag"/>
          </xe:row-filters>
          <xe:feature feature-key="censhare:asset-flag" mode="query" label="${production-flag}" label-style="label-default" minwidth="30em" sort="ascending"/>
          <xe:deletebutton/>
        </xe:foreach>
      </xe:expandgroup>
      <xe:separator/>
      <!-- template hierarchy -->
      <xe:expandgroup caption="${template-hierarchy}" id="template-hierarchy" expanded="true" save-state="true" align="down">
        <xe:select source="condition[name='censhare:template-hierarchy']" create-node="true"/>
        <xe:foreach source="condition" align-y="top">
          <xe:row-filters>
            <xe:filter source="@name" match="censhare:template-hierarchy"/>
          </xe:row-filters>
          <xe:feature feature-key="censhare:template-hierarchy" mode="query" label-style="label-default" sort="ascending">
            <xe:popupmenutree-params column-width="20em" hide-root-popup="true" add-joker="true"/>
          </xe:feature>
          <xe:deletebutton/>
        </xe:foreach>
      </xe:expandgroup>
      <xe:separator/>
      <!-- placement categories -->
      <xe:expandgroup caption="${placement-categories}" id="placement-categories" expanded="true" save-state="true" align="down">
        <xe:select source="condition[name='censhare:placement-category']" create-node="true"/>
        <xe:foreach source="condition" align-y="top">
          <xe:row-filters>
            <xe:filter source="@name" match="censhare:placement-category"/>
          </xe:row-filters>
          <xe:feature feature-key="censhare:placement-category" mode="query" label-style="label-default" minwidth="30em" sort="ascending"/>
          <xe:deletebutton/>
        </xe:foreach>
      </xe:expandgroup>
    </xe:group>
  </xe:part>

  <!-- asset search map dialog -->
  <xe:part id="dialog-asset-search-map" transactional="false">
    <xe:group align="down">
      <xe:deletebutton label="${delete}" source="condition[name='censhare:function.radius-geo-coord']@value"/>
      <xe:feature feature-key="censhare:function.radius-geo-coord" mode="query" weight-x="1" weight-y="1" add-label="false">
        <xe:map-params map-control="small" zoom-level="10">
          <xe:latitude defaultvalue="48.1539" />
          <xe:longitude defaultvalue="11.47875" />
        </xe:map-params>
      </xe:feature>
    </xe:group>
  </xe:part>

  <!-- asset search for experts dialog -->
  <xe:part id="dialog-asset-search-expert" transactional="false">
    <xe:group align-y="top" margin="6">
      <xe:label value="${and}" font-weight="bold" width="4em" align-y="top"/>
      <xe:groupbox align-y="top" align="down">
        <xe:include key="query-condition-include"/>
        <xe:include key="predicate-or-include"/>
        <xe:include key="predicate-not-include"/>
        <xe:include key="predicate-relation-include"/>
      </xe:groupbox>
    </xe:group>
  </xe:part>

  <!-- predicate "relation" include -->
  <xe:part id="predicate-relation-include" transactional="false">
    <xe:group align="down" align-y="top">
      <xe:foreach source="relation" new-caption="${relation}" align-y="top">
        <xe:insertbutton-params width="9em"/>
        <xe:group align="down" align-y="top">
          <xe:label value="${relation}" font-weight="bold" width="8em"/>
          <xe:deletebutton/>
        </xe:group>
        <xe:groupbox align-y="top" align="down">
          <!-- input direction of relation -->
          <xe:group align="right" align-y="top">
            <xe:label value="${direction}" width="8em"/>
            <xe:popupmenu source="@target" align-y="top" width="30em" defaultvalue="child">
              <xe:options>
                <xe:option label="${any-relation}" value="any"/>
                <xe:option label="${parent-relation}" value="parent"/>
                <xe:option label="${child-relation}" value="child"/>
                <xe:option label="${feature-reference}" value="feature"/>
                <xe:option label="${feature-reference-reverse}" value="feature-reverse"/>
              </xe:options>
              <xe:validate not-empty="true"/>
            </xe:popupmenu>
          </xe:group>
          <!-- input type of relation -->
          <xe:group align="right" align-y="top">
            <xe:label value="${type}" width="8em"/>
            <xe:selectcase value="=true" align-y="top">
              <xe:listen-to source="@target"/>
              <xe:case value="=:substring(relation/@target, 1, 7) = 'feature'">
                <xe:popupmenu width="30em" source="@type" align-y="top" sort="ascending">
                  <xe:options value-key="@key" label-key="=:concat('@name', if($system/system/client/@type='javaadmin') then ('${localized-attr-suffix}') else ())">
                    <xe:generator name="filtered_cachedtables" table-name="feature"/>
                    <xe:filters combine="and">
                      <xe:filter source="@issearchable" match="1"/>
                      <xe:filter source="@value_type" operator="regex" match="10|29"/>
                    </xe:filters>
                  </xe:options>
                </xe:popupmenu>
              </xe:case>
              <xe:defaultcase>
                <xe:popupmenutree label-style="label-default" source="@type" hide-root-popup="false" sort="ascending">
                  <xe:treeoptions label-key="@name" value-key="@key" add-joker="true">
                    <xe:generator name="filtered_cachedtables" table-name="asset_rel_typedef"/>
                  </xe:treeoptions>
                  <xe:validate not-empty="true"/>
                </xe:popupmenutree>
              </xe:defaultcase>
            </xe:selectcase>
          </xe:group>
          <xe:include key="relation-target-include"/>
        </xe:groupbox>
      </xe:foreach>
    </xe:group>
  </xe:part>

  <!-- predicate "or" include -->
  <xe:part id="predicate-or-include" transactional="false">
    <xe:group align="down" align-y="top">
      <xe:foreach source="or" new-caption="${or}" align-y="top">
        <xe:insertbutton-params width="9em"/>
        <xe:group align="down" align-y="top">
          <xe:label value="${or}" font-weight="bold" width="4em"/>
          <xe:deletebutton/>
        </xe:group>
        <xe:groupbox align-y="top" align="down">
          <xe:include key="query-condition-include"/>
          <xe:include key="predicate-and-include"/>
          <xe:include key="predicate-not-include"/>
          <xe:include key="predicate-relation-include"/>
        </xe:groupbox>
      </xe:foreach>
    </xe:group>
  </xe:part>

  <!-- predicate "and" include -->
  <xe:part id="predicate-and-include" transactional="false">
    <xe:group align="down" align-y="top">
      <xe:foreach source="and" new-caption="${and}" align-y="top">
        <xe:insertbutton-params width="9em"/>
        <xe:group align="down" align-y="top">
          <xe:label value="${and}" font-weight="bold" width="4em"/>
          <xe:deletebutton/>
        </xe:group>
        <xe:groupbox align-y="top" align="down">
          <xe:include key="query-condition-include"/>
          <xe:include key="predicate-or-include"/>
          <xe:include key="predicate-not-include"/>
          <xe:include key="predicate-relation-include"/>
        </xe:groupbox>
      </xe:foreach>
    </xe:group>
  </xe:part>

  <!-- predicate "not" include -->
  <xe:part id="predicate-not-include" transactional="false">
    <xe:group align="down" align-y="top">
      <xe:foreach source="not" new-caption="${not}" align-y="top">
        <xe:insertbutton-params width="9em"/>
        <xe:group align="down" align-y="top">
          <xe:label value="${not}" font-weight="bold" width="4em"/>
          <xe:deletebutton/>
        </xe:group>
        <xe:groupbox align-y="top" align="down">
          <xe:include key="query-condition-include"/>
          <xe:include key="predicate-or-include"/>
          <xe:include key="predicate-and-include"/>
          <xe:include key="predicate-relation-include"/>
        </xe:groupbox>
      </xe:foreach>
    </xe:group>
  </xe:part>

  <!-- predicate "maybe" include -->
  <xe:part id="predicate-maybe-include" transactional="false">
    <xe:group align="down" align-y="top">
      <xe:foreach source="maybe" new-caption="${maybe}" align-y="top">
        <xe:insertbutton-params width="9em"/>
        <xe:group align="down" align-y="top">
          <xe:label value="${maybe}" font-weight="bold" width="4em"/>
          <xe:deletebutton/>
        </xe:group>
        <xe:groupbox align-y="top" align="down">
          <xe:include key="query-condition-include"/>
          <xe:include key="predicate-or-include"/>
          <xe:include key="predicate-not-include"/>
        </xe:groupbox>
      </xe:foreach>
    </xe:group>
  </xe:part>

  <!-- query part condition include -->
  <xe:part id="query-part-condition-include" transactional="false">
    <xe:group align="down">

      <xe:group align="right">
        <!-- feature selector -->
        <xe:selectcase value="=true" align-y="top">
          <xe:case value="=$param@parent_feature_key != null">
            <xe:popupmenu width="25em" source="@name" align-y="top" sort="ascending">
              <!-- reset value on selection change -->
              <xe:change dest="@value" value="=null"/>
              <xe:change dest="@op" value="=:if(cs:cachelookup('feature', '@key', condition/@name)/@value_type = 0) then ('NOTNULL') else ()"/>
              <xe:change dest="@value2" value="=null"/>
              <xe:change dest="@op2" value="=null"/>
              <xe:change dest="@refid" value="=null"/>
              <xe:change dest="@partial-load-tree" value="=null"/>
              <xe:change dest="@expanded-nodes" value="=null"/>
              <xe:change dest="@value-unit" value="=null"/>
              <xe:options value-key="@key" label-key="=:concat('@name', if($system/system/client/@type='javaadmin') then ('${localized-attr-suffix}') else ())">
                <xe:generator name="filtered_cachedtables" table-name="feature"/>
                <xe:filters combine="and">
                  <xe:filter source="@issearchable" match="1"/>
                  <xe:filter condition="=cachelookup('feature_rel', '@child_feature', '@key', '@parent_feature', '$param@parent_feature_key') != null"/>
                </xe:filters>
              </xe:options>
              <xe:validate not-empty="true"/>
            </xe:popupmenu>
          </xe:case>
          <xe:defaultcase>
            <xe:popupmenu width="25em" source="@name" align-y="top" sort="ascending">
              <!-- reset value on selection change -->
              <xe:change dest="@value" value="=null"/>
              <xe:change dest="@op" value="=:if(cs:cachelookup('feature', '@key', condition/@name)/@value_type = 0) then ('NOTNULL') else ()"/>
              <xe:change dest="@value2" value="=null"/>
              <xe:change dest="@op2" value="=null"/>
              <xe:change dest="@refid" value="=null"/>
              <xe:change dest="@partial-load-tree" value="=null"/>
              <xe:change dest="@expanded-nodes" value="=null"/>
              <xe:change dest="@value-unit" value="=null"/>
              <xe:options value-key="@key" label-key="=:concat('@name', if($system/system/client/@type='javaadmin') then ('${localized-attr-suffix}') else ())">
                <xe:generator name="filtered_cachedtables" table-name="feature"/>
                <xe:filter source="@issearchable" match="1"/>
              </xe:options>
              <xe:validate not-empty="true"/>
            </xe:popupmenu>
          </xe:defaultcase>
        </xe:selectcase>
        <!-- operator selector -->
        <xe:popupmenu source="@op" align-y="top" width="8em"
          visible="=:condition/@name and not(starts-with(condition/@name, 'censhare:text.') or index-of((5, 8, 9, 12, 14, 16, 18, 20, 22, 24, 26), cs:cachelookup('feature', '@key', condition/@name)/@value_type))">
          <xe:options>
            <xe:option label="" value=""/>
            <xe:option label="&lt;" value="&lt;"/>
            <xe:option label="&lt;=" value="&lt;="/>
            <xe:option label="=" value="="/>
            <xe:option label="&gt;" value="&gt;"/>
            <xe:option label="&gt;=" value="&gt;="/>
            <xe:option label="!=" value="!="/>
            <xe:option label="like (%)" value="like"/>
            <xe:option label="IN" value="IN"/>
            <xe:option label="IS NULL" value="ISNULL"/>
            <xe:option label="NOT NULL" value="NOTNULL"/>
          </xe:options>
          <xe:listen-to source="@name"/>
        </xe:popupmenu>
        <xe:label value="${contains-(lowercase)}" width="7em" visible="=:contains(condition/@name, 'censhare:text.')">
          <xe:listen-to source="@name"/>
        </xe:label>
        <!-- feature value selector -->
        <xe:selectcase source="@name">
          <xe:defaultcase>
            <xe:selectcase source="@op">
              <xe:case value="IN">
                <xe:feature feature-key-source="@name" mode="query" widget-type="queryfield" add-label="false" visible="=not(contains(@op, 'NULL'))" sort="ascending">
                  <xe:listen-to source="@op"/>
                  <xe:queryfield-params data-type="VARCHAR"/>
                  <xe:change dest="@sepchar" value=","/>
                </xe:feature>
              </xe:case>
              <xe:defaultcase>
                <xe:variable name="name" value="=@name"/>
                <xe:variable name="valueType" value="=:cs:master-data('feature')[@key=$name]/@value_type"/>
                <xe:feature feature-key-source="@name" mode="query" add-label="false" visible="=not(contains(@op, 'NULL'))" sort="ascending">
                  <xe:listen-to source="@op"/>
                  <xe:auto-completion-field-params cuetext="${enter-search-term}" search-value-source="$temp@search_value" width="30em" internal-search="false" popup-row-height="40" popup-row-width="46em" css-key="asset-info" expression-id="asset-ref-list" max-items="100">
                    <xe:options label-key="@name" value-key="@id" lookup-expression="=:cs:get-asset(condition/@value)">
                      <xe:generator expression="=:if ($temp/temp/@search_value and string-length($temp/temp/@search_value) > 2) then cs:evaluate(concat('cs:asset()[@', $name, ']/cs:feature-ref-reverse()[@key=''', $name, ''']/cs:asset(limit=10)[@censhare:text.name = string($temp/temp/@search_value) or @censhare:asset.id = string($temp/temp/@search_value) or @censhare:resource-key = string($temp/temp/@search_value)]')) else ()"/>
                    </xe:options>
                  </xe:auto-completion-field-params>
                  <xe:popupmenu-params width="250"/>
                  <xe:suggestbox-params width="250"/>
                  <xe:editdate-params width="300"/>
                  <xe:popupmenutree-params column-width-list="250,200" hide-root-popup="false" add-joker="true"/>
                  <xe:map-params readonly="true" width="250" height="250"/>
                  <xe:change dest="@sepchar" value="=null"/>
                </xe:feature>
              </xe:defaultcase>
            </xe:selectcase>
          </xe:defaultcase>
        </xe:selectcase>
        <!-- unit -->
        <xe:selectcase value="=true" align-y="top">
          <xe:listen-to source="@name"/>
          <xe:case value="=cachelookup('feature', '@key', @name)@unit_set != null">
            <xe:popupmenu width="15em" source="@value-unit">
              <xe:options value-key="@unit" option-label-expression="=cachelookup('unit', '@key', @unit)@symbol">
                <xe:generator name="filtered_cachedtables" table-name="unit_set_rel" source="@unit_set" match="=cachelookup('feature', '@key', @name)@unit_set"/>
                <xe:sort key="@sorting" data-type="integer"/>
              </xe:options>
            </xe:popupmenu>
          </xe:case>
        </xe:selectcase>
        <!-- delete button -->
        <xe:deletebutton align-y="top"/>
        <!-- warning icon -->
        <xe:image url="=:concat(system-property('censhare:url-prefix'), 'resources/icon/warning/background/', system-property('censhare:laf-background'), '/file')" tooltip="${search-warning-wildcard}" visible="=:contains(condition/@value, '*') and (condition/@op='=' or condition/@op='!=')">
          <xe:listen-to source="@op"/>
          <xe:listen-to source="@value"/>
        </xe:image>
      </xe:group>

      <!-- child features -->
      <xe:group visible="=:boolean(cs:cachelookup('feature_rel', '@parent_feature', condition/@name))">
        <xe:listen-to source="@name"/>
        <xe:group align="right">
          <xe:strut width="3em" height="0"/>
          <xe:include key="query-child-condition-include">
            <xe:param parent_feature_key="=@name"/>
          </xe:include>
        </xe:group>
      </xe:group>

    </xe:group>
  </xe:part>

  <!-- query condition include -->
  <xe:part id="query-condition-include" transactional="false">
    <xe:foreach source="condition" align-y="top">
      <xe:include key="query-part-condition-include"/>
    </xe:foreach>
  </xe:part>

  <!-- query child condition include -->
  <xe:part id="query-child-condition-include" transactional="false">
    <xe:foreach source="condition" new-caption="${new-child-feature}" align-y="top">
      <xe:include key="query-part-condition-include"/>
    </xe:foreach>
  </xe:part>

  <xe:part id="relation-target-include" transactional="false">
    <xe:foreach source="target" max-occurs="1" min-occurs="1" align-y="top">
      <xe:group align="right" align-y="top">
        <xe:label value="${and}" font-weight="bold" width="8em" align-y="top"/>
        <xe:group align="right" align-y="top">
          <xe:groupbox align-y="top" align="down">
            <xe:include key="query-condition-include"/>
            <xe:include key="predicate-or-include"/>
            <xe:include key="predicate-not-include"/>
            <xe:include key="predicate-relation-include"/>
          </xe:groupbox>
        </xe:group>
      </xe:group>
    </xe:foreach>
  </xe:part>

  <!-- test transfer rate dialog (should be moved to serverAction) -->
  <xe:part id="dialog-transfer-rate" transactional="false" scrollpane="false">
    <xe:groupbox align="down" margin="10">
      <xe:group align="right">
        <xe:editfield label="${upstream}" label-width="160" width="80" source="transfer_rate@upstream"/>
        <xe:label value="${kilobyte-per-second}"/>
      </xe:group>
      <xe:group align="right">
        <xe:editfield label="${upstream} (multi-threaded)" label-width="160" width="80" source="transfer_rate@upstream-multi-threaded"/>
        <xe:label value="${kilobyte-per-second}"/>
        <xe:strut width="10"/>
        <xe:label value="("/>
        <xe:label source="transfer_rate@thread-count" defaultvalue="2">
          <xe:listen-to source="transfer_rate@thread-count"/>
        </xe:label>
        <xe:label value=" Threads)"/>
      </xe:group>
      <xe:group align="right">
        <xe:editfield label="${downstream}" label-width="160" width="80" source="transfer_rate@downstream"/>
        <xe:label value="${kilobyte-per-second}"/>
      </xe:group>
      <xe:group align="right">
        <xe:editfield label="${latency}" label-width="160" width="80" source="transfer_rate@latency"/>
        <xe:label value="${milliseconds}"/>
      </xe:group>
    </xe:groupbox>
  </xe:part>

  <!-- asset search flags dialog -->
  <!--
  <xe:part id="dialog-asset-search-flags" transactional="false">
    <xe:group align="down">
      <xe:groupbox caption="${production-flags}" font-weight="bold" align="down">
        <xe:strut weight-x="1"/>
        <xe:foreach source="condition">
          <xe:row-filters>
            <xe:filter source="@name" match="censhare:asset-flag"/>
          </xe:row-filters>
          <xe:feature feature-key="censhare:asset-flag" mode="query" label="" width="200" sort="ascending">
            <xe:change dest="$temp@production_flag_modified" value="=int($temp@production_flag_modified) + 1"/>
          </xe:feature>
          <xe:deletebutton/>
        </xe:foreach>
      </xe:groupbox>

      <xe:groupbox caption="${asset-type-allocations}" font-weight="bold" align="down" visible="=lookup('condition', '@name', 'censhare:asset-flag', '@value', 'is-output-template') != null">
        <xe:listen-to source="$temp@production_flag_modified"/>
        <xe:strut weight-x="1"/>
        <xe:foreach source="condition">
          <xe:row-filters>
            <xe:filter source="@name" match="censhare:asset-type-allocation"/>
          </xe:row-filters>
          <xe:inititems>
            <xe:inititem dest="@name" value="censhare:asset-type-allocation"/>
          </xe:inititems>
          -->
          <!-- Feature widget does not work for asset-type-allocation feature ==> using conventional popupmenutree
            <xe:feature feature-key="censhare:asset-type-allocation" mode="query" label="" width="200" sort="ascending">
            <xe:popupmenutree-params column-width="200" hide-root-popup="false" add-joker="true"/>
            </xe:feature>
          -->
          <!--
          <xe:popupmenutree source="@value" label="" column-width="200" sort="ascending" hide-root-popup="false">
            <xe:treeoptions label-key="@name" value-key="@asset_type" add-joker="true">
              <xe:generator name="cachedtables" table-name="asset_typedef"/>
            </xe:treeoptions>
          </xe:popupmenutree>
          <xe:deletebutton/>
        </xe:foreach>
      </xe:groupbox>

      <xe:groupbox caption="${placement-categories}" font-weight="bold" align="down" weight-x="1">
        <xe:strut weight-x="1"/>
        <xe:foreach source="condition">
          <xe:row-filters>
            <xe:filter source="@name" match="censhare:placement-category"/>
          </xe:row-filters>
          <xe:feature feature-key="censhare:placement-category" mode="query" label-style="label-default" width="200" sort="ascending"/>
          <xe:deletebutton/>
        </xe:foreach>
      </xe:groupbox>

    </xe:group>
  </xe:part>
  -->

</cmd>

